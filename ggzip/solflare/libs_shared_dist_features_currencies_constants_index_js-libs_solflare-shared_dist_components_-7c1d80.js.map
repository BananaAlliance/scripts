{"version":3,"file":"libs_shared_dist_features_currencies_constants_index_js-libs_solflare-shared_dist_components_-7c1d80.js","mappings":";;;AAeA;ACLA;AACA;;;;;;AA2CA","sources":["webpack://@rise-wallet/solflare-extension/../../libs/solflare-shared/dist/wallet/components/LedgerConfirm/index.js","webpack://@rise-wallet/solflare-extension/../../libs/solflare-shared/dist/wallet/components/KeystoneQRConfirm/index.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { PageContent, PageTitle, Typography } from '@rise-wallet/foundation-ui';\nimport { useTranslation } from 'react-i18next';\nimport { useSolflareWallet } from '../../context';\nimport LedgerImage from '../../../assets/ledger-confirm.svg';\nimport styled from '@emotion/styled';\nconst Image = styled.img `\n  width: 150px;\n  margin: 24px auto 0 auto;\n`;\nconst LedgerConfirm = () => {\n    const { t } = useTranslation();\n    const { transactionTitle } = useSolflareWallet();\n    return (_jsxs(PageContent, { children: [_jsx(PageTitle, { center: transactionTitle || t('confirm_transaction_title') }), _jsx(Typography, { variant: 'textM', alignCenter: true, children: t('confirm_ledger_transaction') }), _jsx(Image, { src: LedgerImage, alt: 'Ledger' })] }));\n};\nexport default LedgerConfirm;\n\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, ButtonGroup, FooterActions, PageContent, PageTitle, Typography } from '@rise-wallet/foundation-ui';\nimport { AnimatedQRCode, AnimatedQRScanner, Purpose, QRCodeError } from '@keystonehq/animated-qr';\nimport { useSolflareWallet } from '../../context';\nimport { SolSignature } from '@keystonehq/bc-ur-registry-sol';\nimport { stringify } from 'uuid';\nimport styled from '@emotion/styled';\nconst QrContainer = styled.div `\n  min-width: ${(props) => `${props.size}px`};\n  min-height: ${(props) => `${props.size}px`};\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nconst KeystoneQRConfirm = ({ onCancel, isExtension }) => {\n    const { t } = useTranslation();\n    const { keystoneSignRequest, transactionTitle, wallet } = useSolflareWallet();\n    const [step, setStep] = useState('show_request');\n    const [cameraStatus, setCameraStatus] = useState('ready');\n    const [cameraError, setCameraError] = useState(null);\n    const handleVideoLoaded = useCallback((canPlay) => {\n        setCameraStatus(canPlay ? 'ready' : 'permission_needed');\n    }, []);\n    const handleScanSuccess = useCallback(({ cbor }) => {\n        const solSignature = SolSignature.fromCBOR(Buffer.from(cbor, 'hex'));\n        const requestId = stringify(solSignature.getRequestId());\n        if (requestId === keystoneSignRequest?.requestId) {\n            wallet.instance?.submitSignature(requestId, cbor);\n        }\n    }, [keystoneSignRequest?.requestId, wallet.instance]);\n    const handleScanFailure = useCallback((error) => {\n        if (error === QRCodeError.UNEXPECTED_QRCODE || error === QRCodeError.INVALID_QR_CODE) {\n            setCameraError('Please check your QR code');\n        }\n    }, []);\n    const handleCancel = useCallback(() => {\n        wallet.instance?.cancelSignRequest(keystoneSignRequest?.requestId);\n        onCancel?.();\n    }, [keystoneSignRequest?.requestId, onCancel, wallet.instance]);\n    useEffect(() => {\n        setStep('show_request');\n    }, [keystoneSignRequest?.cbor]);\n    if (step === 'show_request') {\n        return (_jsxs(_Fragment, { children: [_jsxs(PageContent, { children: [_jsx(PageTitle, { center: transactionTitle || t('confirm_transaction_title') }), _jsx(Typography, { variant: 'textM', alignCenter: true, children: t('confirm_transaction_follow_keystone_steps') }), _jsx(QrContainer, { size: isExtension ? 290 : 320, children: !!keystoneSignRequest?.cbor && (_jsx(AnimatedQRCode, { cbor: keystoneSignRequest.cbor, type: 'sol-sign-request', options: { size: isExtension ? 290 : 320 } })) })] }, keystoneSignRequest?.requestId), _jsx(FooterActions, { children: _jsxs(ButtonGroup, { children: [_jsx(Button, { onClick: handleCancel, variant: 'secondary', children: t('action_cancel') }), _jsx(Button, { onClick: () => setStep('scan_signature'), children: t('action_next_step') })] }) })] }));\n    }\n    if (step === 'scan_signature') {\n        return (_jsxs(_Fragment, { children: [_jsxs(PageContent, { children: [_jsx(PageTitle, { center: transactionTitle || t('confirm_transaction_title') }), _jsx(Typography, { variant: 'headingS', children: t('confirm_transaction_scan_qr_code') }), cameraStatus === 'permission_needed' && (_jsxs(_Fragment, { children: [_jsx(Typography, { variant: 'headingS', alignCenter: true, children: t('onboard_keystone_title_1') }), _jsx(Typography, { variant: 'textM', alignCenter: true, children: t('onboard_keystone_description_1') }), _jsxs(Typography, { ariant: 'textM', alignCenter: true, children: [t('onboard_keystone_description_2'), ' ', _jsx(Typography, { component: 'a', target: '_blank', variant: 'textM', href: 'https://keyst.one/solflare', children: t('onboard_full_tutorial') })] })] })), _jsx(QrContainer, { size: isExtension ? 290 : 320, children: _jsx(AnimatedQRScanner, { purpose: Purpose.SOL_SIGN, handleScan: handleScanSuccess, handleError: handleScanFailure, videoLoaded: handleVideoLoaded, options: { width: isExtension ? 290 : 320 } }) }), cameraError && (_jsx(Typography, { variant: 'textM', alignCenter: true, children: cameraError }))] }, keystoneSignRequest?.requestId), _jsx(FooterActions, { children: _jsx(ButtonGroup, { children: _jsx(Button, { onClick: () => setStep('show_request'), variant: 'secondary', children: t('action_back') }) }) })] }));\n    }\n    return null;\n};\nexport default KeystoneQRConfirm;\n\n"],"names":[],"sourceRoot":""}