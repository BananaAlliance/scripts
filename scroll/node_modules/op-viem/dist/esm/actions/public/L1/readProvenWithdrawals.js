import { optimismPortalABI } from '@eth-optimism/contracts-ts';
import { OpStackL1Contract } from '../../../types/opStackContracts.js';
import { readOpStackL1 } from './readOpStackL1.js';
const ABI = optimismPortalABI;
const CONTRACT = OpStackL1Contract.OptimismPortal;
const FUNCTION_NAME = 'provenWithdrawals';
// Convention: use `read` if this is just 1:1 with some contract function
export async function readProvenWithdrawals(client, { withdrawalHash, optimismPortalAddress, l2Chain, }) {
    const values = await readOpStackL1(client, {
        contract: CONTRACT,
        abi: ABI,
        functionName: FUNCTION_NAME,
        l2Chain,
        address: optimismPortalAddress,
        args: [withdrawalHash],
        chain: client.chain,
    });
    const provenWithdrawal = {
        outputRoot: values[0],
        timestamp: values[1],
        l2OutputIndex: values[2],
    };
    if (provenWithdrawal.timestamp === 0n) {
        throw new Error(`Withdrawal with hash ${withdrawalHash} is not proven`);
    }
    return provenWithdrawal;
}
//# sourceMappingURL=readProvenWithdrawals.js.map