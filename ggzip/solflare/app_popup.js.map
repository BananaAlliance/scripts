{"version":3,"file":"app_popup.js","mappings":";;;;;AAWA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AAUA;;;;;;AAOA;ACrCA;AACA;;;;;;AA2CA","sources":["webpack://@rise-wallet/solflare-extension/./src/common/components/Notifier/withNotifier.js","webpack://@rise-wallet/solflare-extension/../../libs/solflare-shared/dist/wallet/components/KeystoneQRConfirm/index.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Box, Fade, LinearProgress, Typography, Zoom } from '@mui/material';\nimport { styled } from '@mui/material';\nimport FullMessageModal from './FullMessageModal';\nconst NotifierContainer = styled(Box) `\n  position: fixed;\n  top: 63px;\n  width: 100%;\n  z-index: 20000;\n`;\nconst MessageContainer = styled(Box) `\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  cursor: pointer;\n  top: 50%;\n  left: 50%;\n  max-width: calc(100% - 32px);\n  transform: translate(-50%, -50%);\n  &:before {\n    content: '';\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: -1;\n    border-radius: 19px;\n    background: #131519;\n  }\n`;\nconst MessageChip = styled(Box) `\n  border: 1px solid transparent;\n  border-radius: 19px;\n  padding: 2px 8px;\n  white-space: nowrap;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: center;\n`;\nconst GradientProgress = styled(LinearProgress) `\n  background: rgba(245, 252, 255, 0.1);\n  height: 1px;\n  & .MuiLinearProgress-bar {\n    background: linear-gradient(90deg, #3dd28b 0%, rgba(61, 210, 139, 0) 88.53%);\n  }\n`;\nconst colorByVariant = {\n    success: 'success.main',\n    error: 'error.main',\n    info: 'info.main',\n    warning: 'warning.main'\n};\nconst backgroundByVariant = {\n    success: 'black',\n    error: 'black',\n    info: 'black',\n    warning: 'blackd'\n};\n// TODO - copied some logic from Notistack code to make API relatively similar. We should refactor this and make it better\nexport const withNotifier = (Component) => {\n    class RiseNotifierComponent extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                notification: null,\n                showNotification: false,\n                snack: null,\n                loading: false,\n                showFullMessage: false,\n                showFullMessageData: null\n            };\n            this.enqueueSnackbar = (message, opts) => {\n                const { key, messageShort, ...options } = opts;\n                if (options.loading === true) {\n                    this.removeSnackbar();\n                    this.setState({ loading: true, notification: null });\n                    return;\n                }\n                this.setState({ notification: null, loading: false });\n                clearTimeout(this.timeout);\n                const id = key ?? new Date().getTime() + Math.random();\n                const snack = {\n                    key: id,\n                    ...options,\n                    message: messageShort ?? message,\n                    messageOriginal: message,\n                    open: true,\n                    entered: false,\n                    requestClose: false,\n                    variant: options.variant ?? 'info',\n                    autoHideDuration: options.autoHideDuration ?? 50000,\n                    onExited: options?.onExited\n                };\n                if (options.persist) {\n                    snack.autoHideDuration = undefined;\n                }\n                this.setState({ notification: snack, showNotification: true });\n                this.timeout = setTimeout(() => this.closeSnackbar(), snack.autoHideDuration);\n                return id;\n            };\n            this.closeSnackbar = () => {\n                this.setState({ showNotification: false });\n            };\n            this.removeSnackbar = () => {\n                this.setState({ notification: null, showNotification: false });\n            };\n            this.handleMessageClick = () => {\n                const { notification } = this.state;\n                if (notification?.onClick) {\n                    notification.onClick();\n                }\n                else {\n                    this.closeSnackbar();\n                    this.setState({\n                        showFullMessage: true,\n                        showFullMessageData: notification\n                    });\n                }\n            };\n            this.renderFixedProgress = (variant) => {\n                return (_jsx(LinearProgress, { variant: 'determinate', value: 100, sx: {\n                        height: '1px',\n                        backgroundColor: colorByVariant[variant] ?? 'transparent',\n                        variant,\n                        '& .MuiLinearProgress-bar': {\n                            backgroundColor: colorByVariant[variant] ?? 'transparent'\n                        }\n                    } }));\n            };\n            this.renderNotification = () => {\n                const { notification, loading, showNotification, showFullMessageData } = this.state;\n                return (_jsxs(_Fragment, { children: [_jsxs(NotifierContainer, { children: [loading && _jsx(GradientProgress, {}), _jsx(Zoom, { in: showNotification, timeout: 500, children: _jsx(Box, { children: this.renderFixedProgress(notification?.variant) }) }), _jsx(Fade, { in: showNotification, timeout: 500, mountOnEnter: true, unmountOnExit: true, children: _jsx(Box, { children: notification?.message && (_jsx(MessageContainer, { onClick: this.handleMessageClick, children: _jsx(MessageChip, { sx: {\n                                                    borderColor: colorByVariant[notification?.variant],\n                                                    backgroundColor: backgroundByVariant[notification?.variant]\n                                                }, children: _jsx(Typography, { variant: 'label', sx: {\n                                                        fontWeight: 600,\n                                                        textAlign: 'center',\n                                                        lineHeight: '18px',\n                                                        color: 'white'\n                                                    }, children: notification?.message }) }) })) }) })] }), this.state.showFullMessage && (_jsx(FullMessageModal, { notification: showFullMessageData, onClose: () => this.setState({ showFullMessage: false }) }))] }));\n            };\n        }\n        componentWillUnmount() {\n            clearTimeout(this.timeout);\n        }\n        render() {\n            return (_jsxs(_Fragment, { children: [this.renderNotification(), _jsx(Component, { ...this.props, enqueueSnackbar: this.enqueueSnackbar, closeSnackbar: this.closeSnackbar, removeSnackbar: this.removeSnackbar })] }));\n        }\n    }\n    return RiseNotifierComponent;\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, ButtonGroup, FooterActions, PageContent, PageTitle, Typography } from '@rise-wallet/foundation-ui';\nimport { AnimatedQRCode, AnimatedQRScanner, Purpose, QRCodeError } from '@keystonehq/animated-qr';\nimport { useSolflareWallet } from '../../context';\nimport { SolSignature } from '@keystonehq/bc-ur-registry-sol';\nimport { stringify } from 'uuid';\nimport styled from '@emotion/styled';\nconst QrContainer = styled.div `\n  min-width: ${(props) => `${props.size}px`};\n  min-height: ${(props) => `${props.size}px`};\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nconst KeystoneQRConfirm = ({ onCancel, isExtension }) => {\n    const { t } = useTranslation();\n    const { keystoneSignRequest, transactionTitle, wallet } = useSolflareWallet();\n    const [step, setStep] = useState('show_request');\n    const [cameraStatus, setCameraStatus] = useState('ready');\n    const [cameraError, setCameraError] = useState(null);\n    const handleVideoLoaded = useCallback((canPlay) => {\n        setCameraStatus(canPlay ? 'ready' : 'permission_needed');\n    }, []);\n    const handleScanSuccess = useCallback(({ cbor }) => {\n        const solSignature = SolSignature.fromCBOR(Buffer.from(cbor, 'hex'));\n        const requestId = stringify(solSignature.getRequestId());\n        if (requestId === keystoneSignRequest?.requestId) {\n            wallet.instance?.submitSignature(requestId, cbor);\n        }\n    }, [keystoneSignRequest?.requestId, wallet.instance]);\n    const handleScanFailure = useCallback((error) => {\n        if (error === QRCodeError.UNEXPECTED_QRCODE || error === QRCodeError.INVALID_QR_CODE) {\n            setCameraError('Please check your QR code');\n        }\n    }, []);\n    const handleCancel = useCallback(() => {\n        wallet.instance?.cancelSignRequest(keystoneSignRequest?.requestId);\n        onCancel?.();\n    }, [keystoneSignRequest?.requestId, onCancel, wallet.instance]);\n    useEffect(() => {\n        setStep('show_request');\n    }, [keystoneSignRequest?.cbor]);\n    if (step === 'show_request') {\n        return (_jsxs(_Fragment, { children: [_jsxs(PageContent, { children: [_jsx(PageTitle, { center: transactionTitle || t('confirm_transaction_title') }), _jsx(Typography, { variant: 'textM', alignCenter: true, children: t('confirm_transaction_follow_keystone_steps') }), _jsx(QrContainer, { size: isExtension ? 290 : 320, children: !!keystoneSignRequest?.cbor && (_jsx(AnimatedQRCode, { cbor: keystoneSignRequest.cbor, type: 'sol-sign-request', options: { size: isExtension ? 290 : 320 } })) })] }, keystoneSignRequest?.requestId), _jsx(FooterActions, { children: _jsxs(ButtonGroup, { children: [_jsx(Button, { onClick: handleCancel, variant: 'secondary', children: t('action_cancel') }), _jsx(Button, { onClick: () => setStep('scan_signature'), children: t('action_next_step') })] }) })] }));\n    }\n    if (step === 'scan_signature') {\n        return (_jsxs(_Fragment, { children: [_jsxs(PageContent, { children: [_jsx(PageTitle, { center: transactionTitle || t('confirm_transaction_title') }), _jsx(Typography, { variant: 'headingS', children: t('confirm_transaction_scan_qr_code') }), cameraStatus === 'permission_needed' && (_jsxs(_Fragment, { children: [_jsx(Typography, { variant: 'headingS', alignCenter: true, children: t('onboard_keystone_title_1') }), _jsx(Typography, { variant: 'textM', alignCenter: true, children: t('onboard_keystone_description_1') }), _jsxs(Typography, { ariant: 'textM', alignCenter: true, children: [t('onboard_keystone_description_2'), ' ', _jsx(Typography, { component: 'a', target: '_blank', variant: 'textM', href: 'https://keyst.one/solflare', children: t('onboard_full_tutorial') })] })] })), _jsx(QrContainer, { size: isExtension ? 290 : 320, children: _jsx(AnimatedQRScanner, { purpose: Purpose.SOL_SIGN, handleScan: handleScanSuccess, handleError: handleScanFailure, videoLoaded: handleVideoLoaded, options: { width: isExtension ? 290 : 320 } }) }), cameraError && (_jsx(Typography, { variant: 'textM', alignCenter: true, children: cameraError }))] }, keystoneSignRequest?.requestId), _jsx(FooterActions, { children: _jsx(ButtonGroup, { children: _jsx(Button, { onClick: () => setStep('show_request'), variant: 'secondary', children: t('action_back') }) }) })] }));\n    }\n    return null;\n};\nexport default KeystoneQRConfirm;\n\n"],"names":[],"sourceRoot":""}