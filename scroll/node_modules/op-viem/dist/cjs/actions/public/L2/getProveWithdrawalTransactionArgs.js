"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProveWithdrawalTransactionArgs = void 0;
const actions_1 = require("viem/actions");
const index_js_1 = require("../../../index.js");
const getWithdrawalMessageStorageSlot_js_1 = require("../../../utils/getWithdrawalMessageStorageSlot.js");
const getProof_js_1 = require("../getProof.js");
const OUTPUT_ROOT_PROOF_VERSION = '0x0000000000000000000000000000000000000000000000000000000000000000';
async function getProveWithdrawalTransactionArgs(client, { message, output }) {
    const slot = (0, getWithdrawalMessageStorageSlot_js_1.getWithdrawalMessageStorageSlot)(message.withdrawalHash);
    const block = await (0, actions_1.getBlock)(client, {
        blockNumber: output.proposal.l2BlockNumber,
    });
    if (!block.hash) {
        throw new Error(`Block not found for block number ${output.proposal.l2BlockNumber}`);
    }
    const proof = await (0, getProof_js_1.getProof)(client, {
        address: index_js_1.opStackL2ChainContracts.l2ToL1MessagePasser.address,
        storageKeys: [slot],
        block: block.hash,
    });
    const { withdrawalHash, ...withdrawalTransaction } = message;
    return {
        withdrawalTransaction,
        outputRootProof: {
            version: OUTPUT_ROOT_PROOF_VERSION,
            stateRoot: block.stateRoot,
            messagePasserStorageRoot: proof.storageHash,
            latestBlockhash: block.hash,
        },
        withdrawalProof: proof.storageProof[0].proof,
        L2OutputIndex: output.outputIndex,
    };
}
exports.getProveWithdrawalTransactionArgs = getProveWithdrawalTransactionArgs;
//# sourceMappingURL=getProveWithdrawalTransactionArgs.js.map