import { l2OutputOracleABI } from '@eth-optimism/contracts-ts';
import { OpStackL1Contract } from '../../../types/opStackContracts.js';
import { readOpStackL1 } from './readOpStackL1.js';
const ABI = l2OutputOracleABI;
const CONTRACT = OpStackL1Contract.L2OutputOracle;
export async function getSecondsToNextL2Output(client, { latestL2BlockNumber, l2OutputOracleAddress, l2Chain, }) {
    const latestBlockNumber = await readOpStackL1(client, {
        contract: CONTRACT,
        abi: ABI,
        functionName: 'latestBlockNumber',
        l2Chain,
        address: l2OutputOracleAddress,
    });
    const interval = await readOpStackL1(client, {
        contract: CONTRACT,
        abi: ABI,
        functionName: 'SUBMISSION_INTERVAL',
        l2Chain,
        address: l2OutputOracleAddress,
    });
    const blockTime = await readOpStackL1(client, {
        contract: CONTRACT,
        abi: ABI,
        functionName: 'L2_BLOCK_TIME',
        l2Chain,
        address: l2OutputOracleAddress,
    });
    const blocksTillUpdate = interval - (latestL2BlockNumber - latestBlockNumber);
    // NOTE(Wilson): incase there is some problem
    // e.g. output posting has stalled or the wrong latestL2BlockNumber is passed
    // we do not return a negative number, as negative seconds to next output
    // does not make sense
    return blocksTillUpdate < 0n ? 0n : blocksTillUpdate * blockTime;
}
//# sourceMappingURL=getSecondsToNextL2Output.js.map