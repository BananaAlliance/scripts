"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSecondsToFinalizable = void 0;
const contracts_ts_1 = require("@eth-optimism/contracts-ts");
const opStackContracts_js_1 = require("../../../types/opStackContracts.js");
const resolveL1OpStackContractAddress_js_1 = require("../../../utils/resolveL1OpStackContractAddress.js");
const readOpStackL1_js_1 = require("./readOpStackL1.js");
const readProvenWithdrawals_js_1 = require("./readProvenWithdrawals.js");
const ABI = contracts_ts_1.l2OutputOracleABI;
const CONTRACT = opStackContracts_js_1.OpStackL1Contract.L2OutputOracle;
async function getSecondsToFinalizable(client, { withdrawalHash, l2OutputOracleAddress, optimismPortalAddress, l2Chain, }) {
    const resolvedPortalAddress = (0, resolveL1OpStackContractAddress_js_1.resolveL1OpStackContractAddress)({
        l2Chain,
        chain: client.chain,
        contract: opStackContracts_js_1.OpStackL1Contract.OptimismPortal,
        address: optimismPortalAddress,
    });
    const provenWithdrawal = await (0, readProvenWithdrawals_js_1.readProvenWithdrawals)(client, {
        optimismPortalAddress: resolvedPortalAddress,
        withdrawalHash,
    });
    const finalizationPeriod = await (0, readOpStackL1_js_1.readOpStackL1)(client, {
        contract: opStackContracts_js_1.OpStackL1Contract.L2OutputOracle,
        abi: contracts_ts_1.l2OutputOracleABI,
        functionName: 'FINALIZATION_PERIOD_SECONDS',
        l2Chain,
        address: l2OutputOracleAddress,
    });
    const timeSinceProven = BigInt(Date.now()) / 1000n - provenWithdrawal.timestamp;
    const finalizable = finalizationPeriod - timeSinceProven;
    return finalizable < 0n ? 0n : finalizable;
}
exports.getSecondsToFinalizable = getSecondsToFinalizable;
//# sourceMappingURL=getSecondsToFinalizable.js.map