// src/actions.ts
import {
  getContract,
  readContract,
  writeContract,
  prepareWriteContract,
  watchContractEvent
} from "wagmi/actions";
var addressManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_name", internalType: "string", type: "string", indexed: true },
      {
        name: "_newAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "_oldAddress",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AddressSet"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "getAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_address", internalType: "address", type: "address" }
    ],
    name: "setAddress",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  }
];
var addressManagerAddress = {
  1: "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
  5: "0xa6f73589243a6A7a9023b1Fa0651b1d89c177111"
};
var addressManagerConfig = {
  address: addressManagerAddress,
  abi: addressManagerABI
};
var assetReceiverABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var assetReceiverAddress = {
  1: "0x15DdA60616Ffca20371ED1659dBB78E888f65556",
  10: "0x15DdA60616Ffca20371ED1659dBB78E888f65556"
};
var assetReceiverConfig = {
  address: assetReceiverAddress,
  abi: assetReceiverABI
};
var checkBalanceHighABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckBalanceHigh.Params",
        type: "tuple",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkBalanceHighAddress = {
  1: "0x7eC64a8a591bFf829ff6C8be76074D540ACb813F",
  5: "0x7eC64a8a591bFf829ff6C8be76074D540ACb813F",
  420: "0x5d7103853f12109A7d27F118e54BbC654ad847E9"
};
var checkBalanceHighConfig = {
  address: checkBalanceHighAddress,
  abi: checkBalanceHighABI
};
var checkBalanceLowABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckBalanceLow.Params",
        type: "tuple",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkBalanceLowAddress = {
  1: "0x381a4eFC2A2C914eA1889722bB4B44Fa6BD5b640",
  5: "0x381a4eFC2A2C914eA1889722bB4B44Fa6BD5b640",
  420: "0x7Ce13D154FAEE5C8B3E6b19d4Add16f21d884474"
};
var checkBalanceLowConfig = {
  address: checkBalanceLowAddress,
  abi: checkBalanceLowABI
};
var checkGelatoLowABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckGelatoLow.Params",
        type: "tuple",
        components: [
          { name: "treasury", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" },
          { name: "recipient", internalType: "address", type: "address" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkGelatoLowAddress = {
  1: "0x4f7CFc43f6D262a085F3b946cAC69E7a8E39BBAa",
  5: "0x4f7CFc43f6D262a085F3b946cAC69E7a8E39BBAa",
  420: "0xF9c8a4Cb4021f57F9f6d69799cA9BefF64524862"
};
var checkGelatoLowConfig = {
  address: checkGelatoLowAddress,
  abi: checkGelatoLowABI
};
var checkTrueABI = [
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkTrueAddress = {
  1: "0x5c741a38cb11424711231777D71689C458eE835D",
  5: "0x5c741a38cb11424711231777D71689C458eE835D",
  420: "0x47443D0C184e022F19BD1578F5bca6B8a9F58E32"
};
var checkTrueConfig = {
  address: checkTrueAddress,
  abi: checkTrueABI
};
var drippieABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieAddress = {
  1: "0x44b3A2a040057eBafC601A78647e805fd58B1f50"
};
var drippieConfig = {
  address: drippieAddress,
  abi: drippieABI
};
var drippieGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieGoerliAddress = {
  5: "0x44b3A2a040057eBafC601A78647e805fd58B1f50"
};
var drippieGoerliConfig = {
  address: drippieGoerliAddress,
  abi: drippieGoerliABI
};
var drippieOptimismGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieOptimismGoerliAddress = {
  420: "0x8D8d533C16D23847EB04EEB0925be8900Dd3af86"
};
var drippieOptimismGoerliConfig = {
  address: drippieOptimismGoerliAddress,
  abi: drippieOptimismGoerliABI
};
var l1CrossDomainMessengerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_portal",
        internalType: "contract OptimismPortal",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "FailedRelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "message", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "messageNonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessageExtension1"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_CALLDATA_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OTHER_MESSENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PORTAL",
    outputs: [
      { name: "", internalType: "contract OptimismPortal", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CALL_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CONSTANT_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_GAS_CHECK_BUFFER",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_RESERVED_GAS",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "baseGas",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "failedMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_nonce", internalType: "uint256", type: "uint256" },
      { name: "_sender", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint256", type: "uint256" },
      { name: "_message", internalType: "bytes", type: "bytes" }
    ],
    name: "relayMessage",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "sendMessage",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "successfulMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  }
];
var l1CrossDomainMessengerAddress = {
  1: "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
  5: "0x5086d1eEF304eb5284A0f6720f79403b4e9bE294"
};
var l1CrossDomainMessengerConfig = {
  address: l1CrossDomainMessengerAddress,
  abi: l1CrossDomainMessengerABI
};
var l1Erc721BridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address", type: "address" },
      { name: "_otherBridge", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721To",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC721",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "otherBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l1Erc721BridgeAddress = {
  1: "0x5a7749f83b81B301cAb5f48EB8516B986DAef23D",
  5: "0x8DD330DdE8D9898d43b4dc840Da27A07dF91b3c9"
};
var l1Erc721BridgeConfig = {
  address: l1Erc721BridgeAddress,
  abi: l1Erc721BridgeABI
};
var l1StandardBridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address payable", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20DepositInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20WithdrawalFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHDepositInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHWithdrawalFinalized"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETHTo",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositETHTo",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC20",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeERC20Withdrawal",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeETHWithdrawal",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2TokenBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var l1StandardBridgeAddress = {
  1: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
  5: "0x636Af16bf2f682dD3109e60102b8E1A089FedAa8"
};
var l1StandardBridgeConfig = {
  address: l1StandardBridgeAddress,
  abi: l1StandardBridgeABI
};
var l2OutputOracleABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_submissionInterval", internalType: "uint256", type: "uint256" },
      { name: "_l2BlockTime", internalType: "uint256", type: "uint256" },
      {
        name: "_startingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "_startingTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_proposer", internalType: "address", type: "address" },
      { name: "_challenger", internalType: "address", type: "address" },
      {
        name: "_finalizationPeriodSeconds",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "outputRoot",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "l2OutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "l2BlockNumber",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "l1Timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "OutputProposed"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevNextOutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "newNextOutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "OutputsDeleted"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CHALLENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "FINALIZATION_PERIOD_SECONDS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "L2_BLOCK_TIME",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROPOSER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "SUBMISSION_INTERVAL",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "computeL2Timestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "deleteL2Outputs",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2Output",
    outputs: [
      {
        name: "",
        internalType: "struct Types.OutputProposal",
        type: "tuple",
        components: [
          { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
          { name: "timestamp", internalType: "uint128", type: "uint128" },
          { name: "l2BlockNumber", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2OutputAfter",
    outputs: [
      {
        name: "",
        internalType: "struct Types.OutputProposal",
        type: "tuple",
        components: [
          { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
          { name: "timestamp", internalType: "uint128", type: "uint128" },
          { name: "l2BlockNumber", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2OutputIndexAfter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_startingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "_startingTimestamp", internalType: "uint256", type: "uint256" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "latestBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "latestOutputIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextOutputIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_outputRoot", internalType: "bytes32", type: "bytes32" },
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" },
      { name: "_l1BlockHash", internalType: "bytes32", type: "bytes32" },
      { name: "_l1BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "proposeL2Output",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "startingBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "startingTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l2OutputOracleAddress = {
  1: "0xdfe97868233d1aa22e815a266982f2cf17685a27",
  5: "0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0"
};
var l2OutputOracleConfig = {
  address: l2OutputOracleAddress,
  abi: l2OutputOracleABI
};
var optimismMintableErc20FactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_bridge", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC20Created"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "StandardL2TokenCreated"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BRIDGE",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC20",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createStandardL2Token",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc20FactoryAddress = {
  1: "0x4200000000000000000000000000000000000012",
  5: "0x4200000000000000000000000000000000000012",
  420: "0x4200000000000000000000000000000000000012"
};
var optimismMintableErc20FactoryConfig = {
  address: optimismMintableErc20FactoryAddress,
  abi: optimismMintableErc20FactoryABI
};
var optimismPortalABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_l2Oracle",
        internalType: "contract L2OutputOracle",
        type: "address"
      },
      { name: "_guardian", internalType: "address", type: "address" },
      { name: "_paused", internalType: "bool", type: "bool" },
      {
        name: "_config",
        internalType: "contract SystemConfig",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Paused"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "version",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "opaqueData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "TransactionDeposited"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Unpaused"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      { name: "success", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "WithdrawalFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true }
    ],
    name: "WithdrawalProven"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "GUARDIAN",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "L2_ORACLE",
    outputs: [
      { name: "", internalType: "contract L2OutputOracle", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "SYSTEM_CONFIG",
    outputs: [
      { name: "", internalType: "contract SystemConfig", type: "address" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_isCreation", internalType: "bool", type: "bool" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "depositTransaction",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "donateETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_tx",
        internalType: "struct Types.WithdrawalTransaction",
        type: "tuple",
        components: [
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "sender", internalType: "address", type: "address" },
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "gasLimit", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "finalizeWithdrawalTransaction",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "finalizedWithdrawals",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_paused", internalType: "bool", type: "bool" }],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "isOutputFinalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2Sender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_byteCount", internalType: "uint64", type: "uint64" }],
    name: "minimumGasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "params",
    outputs: [
      { name: "prevBaseFee", internalType: "uint128", type: "uint128" },
      { name: "prevBoughtGas", internalType: "uint64", type: "uint64" },
      { name: "prevBlockNum", internalType: "uint64", type: "uint64" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "pause",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_tx",
        internalType: "struct Types.WithdrawalTransaction",
        type: "tuple",
        components: [
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "sender", internalType: "address", type: "address" },
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "gasLimit", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" }
        ]
      },
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_outputRootProof",
        internalType: "struct Types.OutputRootProof",
        type: "tuple",
        components: [
          { name: "version", internalType: "bytes32", type: "bytes32" },
          { name: "stateRoot", internalType: "bytes32", type: "bytes32" },
          {
            name: "messagePasserStorageRoot",
            internalType: "bytes32",
            type: "bytes32"
          },
          { name: "latestBlockhash", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "_withdrawalProof", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "proveWithdrawalTransaction",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "provenWithdrawals",
    outputs: [
      { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
      { name: "timestamp", internalType: "uint128", type: "uint128" },
      { name: "l2OutputIndex", internalType: "uint128", type: "uint128" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "unpause",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var optimismPortalAddress = {
  1: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
  5: "0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383"
};
var optimismPortalConfig = {
  address: optimismPortalAddress,
  abi: optimismPortalABI
};
var portalSenderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_portal",
        internalType: "contract OptimismPortal",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PORTAL",
    outputs: [
      { name: "", internalType: "contract OptimismPortal", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "donate",
    outputs: []
  }
];
var portalSenderAddress = {
  1: "0x0A893d9576b9cFD9EF78595963dc973238E78210",
  5: "0xe7FACd39531ee3C313330E93B4d7a8B8A3c84Aa4"
};
var portalSenderConfig = {
  address: portalSenderAddress,
  abi: portalSenderABI
};
var proxyAdminABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "addressManager",
    outputs: [
      { name: "", internalType: "contract AddressManager", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_newAdmin", internalType: "address", type: "address" }
    ],
    name: "changeProxyAdmin",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" }
    ],
    name: "getProxyAdmin",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_proxy", internalType: "address", type: "address" }],
    name: "getProxyImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "implementationName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isUpgrading",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "proxyType",
    outputs: [
      { name: "", internalType: "enum ProxyAdmin.ProxyType", type: "uint8" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_address", internalType: "address", type: "address" }
    ],
    name: "setAddress",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_address",
        internalType: "contract AddressManager",
        type: "address"
      }
    ],
    name: "setAddressManager",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_address", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" }
    ],
    name: "setImplementationName",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_address", internalType: "address", type: "address" },
      {
        name: "_type",
        internalType: "enum ProxyAdmin.ProxyType",
        type: "uint8"
      }
    ],
    name: "setProxyType",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_upgrading", internalType: "bool", type: "bool" }],
    name: "setUpgrading",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_implementation", internalType: "address", type: "address" }
    ],
    name: "upgrade",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_implementation", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeAndCall",
    outputs: []
  }
];
var proxyAdminAddress = {
  1: "0x4200000000000000000000000000000000000018",
  5: "0x4200000000000000000000000000000000000018"
};
var proxyAdminConfig = {
  address: proxyAdminAddress,
  abi: proxyAdminABI
};
var systemConfigABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "updateType",
        internalType: "enum SystemConfig.UpdateType",
        type: "uint8",
        indexed: true
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "ConfigUpdate"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "UNSAFE_BLOCK_SIGNER_SLOT",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "batcherHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minimumGasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "overhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "resourceConfig",
    outputs: [
      {
        name: "",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "scalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" }
    ],
    name: "setBatcherHash",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" }
    ],
    name: "setGasConfig",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_gasLimit", internalType: "uint64", type: "uint64" }],
    name: "setGasLimit",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    name: "setResourceConfig",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" }
    ],
    name: "setUnsafeBlockSigner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "unsafeBlockSigner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var systemConfigAddress = {
  1: "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290",
  5: "0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60"
};
var systemConfigConfig = {
  address: systemConfigAddress,
  abi: systemConfigABI
};
var systemDictatorABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EXIT_1_NO_RETURN_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROXY_TRANSFER_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      {
        name: "globalConfig",
        internalType: "struct SystemDictator.GlobalConfig",
        type: "tuple",
        components: [
          {
            name: "addressManager",
            internalType: "contract AddressManager",
            type: "address"
          },
          {
            name: "proxyAdmin",
            internalType: "contract ProxyAdmin",
            type: "address"
          },
          { name: "controller", internalType: "address", type: "address" },
          { name: "finalOwner", internalType: "address", type: "address" }
        ]
      },
      {
        name: "proxyAddressConfig",
        internalType: "struct SystemDictator.ProxyAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismPortalProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1StandardBridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1ERC721BridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "systemConfigProxy",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "implementationAddressConfig",
        internalType: "struct SystemDictator.ImplementationAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleImpl",
            internalType: "contract L2OutputOracle",
            type: "address"
          },
          {
            name: "optimismPortalImpl",
            internalType: "contract OptimismPortal",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerImpl",
            internalType: "contract L1CrossDomainMessenger",
            type: "address"
          },
          {
            name: "l1StandardBridgeImpl",
            internalType: "contract L1StandardBridge",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryImpl",
            internalType: "contract OptimismMintableERC20Factory",
            type: "address"
          },
          {
            name: "l1ERC721BridgeImpl",
            internalType: "contract L1ERC721Bridge",
            type: "address"
          },
          {
            name: "portalSenderImpl",
            internalType: "contract PortalSender",
            type: "address"
          },
          {
            name: "systemConfigImpl",
            internalType: "contract SystemConfig",
            type: "address"
          }
        ]
      },
      {
        name: "systemConfigConfig",
        internalType: "struct SystemDictator.SystemConfigConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "overhead", internalType: "uint256", type: "uint256" },
          { name: "scalar", internalType: "uint256", type: "uint256" },
          { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
          { name: "gasLimit", internalType: "uint64", type: "uint64" },
          {
            name: "unsafeBlockSigner",
            internalType: "address",
            type: "address"
          },
          {
            name: "resourceConfig",
            internalType: "struct ResourceMetering.ResourceConfig",
            type: "tuple",
            components: [
              {
                name: "maxResourceLimit",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "elasticityMultiplier",
                internalType: "uint8",
                type: "uint8"
              },
              {
                name: "baseFeeMaxChangeDenominator",
                internalType: "uint8",
                type: "uint8"
              },
              {
                name: "minimumBaseFee",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "systemTxMaxGas",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "maximumBaseFee",
                internalType: "uint128",
                type: "uint128"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "currentStep",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "dynamicConfigSet",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "exit1",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "exited",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "finalize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "finalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct SystemDictator.DeployConfig",
        type: "tuple",
        components: [
          {
            name: "globalConfig",
            internalType: "struct SystemDictator.GlobalConfig",
            type: "tuple",
            components: [
              {
                name: "addressManager",
                internalType: "contract AddressManager",
                type: "address"
              },
              {
                name: "proxyAdmin",
                internalType: "contract ProxyAdmin",
                type: "address"
              },
              { name: "controller", internalType: "address", type: "address" },
              { name: "finalOwner", internalType: "address", type: "address" }
            ]
          },
          {
            name: "proxyAddressConfig",
            internalType: "struct SystemDictator.ProxyAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismPortalProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1StandardBridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1ERC721BridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "systemConfigProxy",
                internalType: "address",
                type: "address"
              }
            ]
          },
          {
            name: "implementationAddressConfig",
            internalType: "struct SystemDictator.ImplementationAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleImpl",
                internalType: "contract L2OutputOracle",
                type: "address"
              },
              {
                name: "optimismPortalImpl",
                internalType: "contract OptimismPortal",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerImpl",
                internalType: "contract L1CrossDomainMessenger",
                type: "address"
              },
              {
                name: "l1StandardBridgeImpl",
                internalType: "contract L1StandardBridge",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryImpl",
                internalType: "contract OptimismMintableERC20Factory",
                type: "address"
              },
              {
                name: "l1ERC721BridgeImpl",
                internalType: "contract L1ERC721Bridge",
                type: "address"
              },
              {
                name: "portalSenderImpl",
                internalType: "contract PortalSender",
                type: "address"
              },
              {
                name: "systemConfigImpl",
                internalType: "contract SystemConfig",
                type: "address"
              }
            ]
          },
          {
            name: "systemConfigConfig",
            internalType: "struct SystemDictator.SystemConfigConfig",
            type: "tuple",
            components: [
              { name: "owner", internalType: "address", type: "address" },
              { name: "overhead", internalType: "uint256", type: "uint256" },
              { name: "scalar", internalType: "uint256", type: "uint256" },
              { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
              { name: "gasLimit", internalType: "uint64", type: "uint64" },
              {
                name: "unsafeBlockSigner",
                internalType: "address",
                type: "address"
              },
              {
                name: "resourceConfig",
                internalType: "struct ResourceMetering.ResourceConfig",
                type: "tuple",
                components: [
                  {
                    name: "maxResourceLimit",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "elasticityMultiplier",
                    internalType: "uint8",
                    type: "uint8"
                  },
                  {
                    name: "baseFeeMaxChangeDenominator",
                    internalType: "uint8",
                    type: "uint8"
                  },
                  {
                    name: "minimumBaseFee",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "systemTxMaxGas",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "maximumBaseFee",
                    internalType: "uint128",
                    type: "uint128"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2OutputOracleDynamicConfig",
    outputs: [
      {
        name: "l2OutputOracleStartingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "l2OutputOracleStartingTimestamp",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oldL1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "optimismPortalDynamicConfig",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "phase1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "phase2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step3",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step4",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step5",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_l2OutputOracleDynamicConfig",
        internalType: "struct SystemDictator.L2OutputOracleDynamicConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleStartingBlockNumber",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "l2OutputOracleStartingTimestamp",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      },
      {
        name: "_optimismPortalDynamicConfig",
        internalType: "bool",
        type: "bool"
      }
    ],
    name: "updateDynamicConfig",
    outputs: []
  }
];
var systemDictatorAddress = {
  1: "0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB"
};
var systemDictatorConfig = {
  address: systemDictatorAddress,
  abi: systemDictatorABI
};
var systemDictatorGoerliABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EXIT_1_NO_RETURN_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROXY_TRANSFER_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      {
        name: "globalConfig",
        internalType: "struct SystemDictator.GlobalConfig",
        type: "tuple",
        components: [
          {
            name: "addressManager",
            internalType: "contract AddressManager",
            type: "address"
          },
          {
            name: "proxyAdmin",
            internalType: "contract ProxyAdmin",
            type: "address"
          },
          { name: "controller", internalType: "address", type: "address" },
          { name: "finalOwner", internalType: "address", type: "address" }
        ]
      },
      {
        name: "proxyAddressConfig",
        internalType: "struct SystemDictator.ProxyAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismPortalProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1StandardBridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1ERC721BridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "systemConfigProxy",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "implementationAddressConfig",
        internalType: "struct SystemDictator.ImplementationAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleImpl",
            internalType: "contract L2OutputOracle",
            type: "address"
          },
          {
            name: "optimismPortalImpl",
            internalType: "contract OptimismPortal",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerImpl",
            internalType: "contract L1CrossDomainMessenger",
            type: "address"
          },
          {
            name: "l1StandardBridgeImpl",
            internalType: "contract L1StandardBridge",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryImpl",
            internalType: "contract OptimismMintableERC20Factory",
            type: "address"
          },
          {
            name: "l1ERC721BridgeImpl",
            internalType: "contract L1ERC721Bridge",
            type: "address"
          },
          {
            name: "portalSenderImpl",
            internalType: "contract PortalSender",
            type: "address"
          },
          {
            name: "systemConfigImpl",
            internalType: "contract SystemConfig",
            type: "address"
          }
        ]
      },
      {
        name: "systemConfigConfig",
        internalType: "struct SystemDictator.SystemConfigConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "overhead", internalType: "uint256", type: "uint256" },
          { name: "scalar", internalType: "uint256", type: "uint256" },
          { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
          { name: "gasLimit", internalType: "uint64", type: "uint64" },
          {
            name: "unsafeBlockSigner",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "currentStep",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "dynamicConfigSet",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "exit1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "finalize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "finalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct SystemDictator.DeployConfig",
        type: "tuple",
        components: [
          {
            name: "globalConfig",
            internalType: "struct SystemDictator.GlobalConfig",
            type: "tuple",
            components: [
              {
                name: "addressManager",
                internalType: "contract AddressManager",
                type: "address"
              },
              {
                name: "proxyAdmin",
                internalType: "contract ProxyAdmin",
                type: "address"
              },
              { name: "controller", internalType: "address", type: "address" },
              { name: "finalOwner", internalType: "address", type: "address" }
            ]
          },
          {
            name: "proxyAddressConfig",
            internalType: "struct SystemDictator.ProxyAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismPortalProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1StandardBridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1ERC721BridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "systemConfigProxy",
                internalType: "address",
                type: "address"
              }
            ]
          },
          {
            name: "implementationAddressConfig",
            internalType: "struct SystemDictator.ImplementationAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleImpl",
                internalType: "contract L2OutputOracle",
                type: "address"
              },
              {
                name: "optimismPortalImpl",
                internalType: "contract OptimismPortal",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerImpl",
                internalType: "contract L1CrossDomainMessenger",
                type: "address"
              },
              {
                name: "l1StandardBridgeImpl",
                internalType: "contract L1StandardBridge",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryImpl",
                internalType: "contract OptimismMintableERC20Factory",
                type: "address"
              },
              {
                name: "l1ERC721BridgeImpl",
                internalType: "contract L1ERC721Bridge",
                type: "address"
              },
              {
                name: "portalSenderImpl",
                internalType: "contract PortalSender",
                type: "address"
              },
              {
                name: "systemConfigImpl",
                internalType: "contract SystemConfig",
                type: "address"
              }
            ]
          },
          {
            name: "systemConfigConfig",
            internalType: "struct SystemDictator.SystemConfigConfig",
            type: "tuple",
            components: [
              { name: "owner", internalType: "address", type: "address" },
              { name: "overhead", internalType: "uint256", type: "uint256" },
              { name: "scalar", internalType: "uint256", type: "uint256" },
              { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
              { name: "gasLimit", internalType: "uint64", type: "uint64" },
              {
                name: "unsafeBlockSigner",
                internalType: "address",
                type: "address"
              }
            ]
          }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2OutputOracleDynamicConfig",
    outputs: [
      {
        name: "l2OutputOracleStartingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "l2OutputOracleStartingTimestamp",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oldL1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step3",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step4",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step5",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step6",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_l2OutputOracleDynamicConfig",
        internalType: "struct SystemDictator.L2OutputOracleDynamicConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleStartingBlockNumber",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "l2OutputOracleStartingTimestamp",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      }
    ],
    name: "updateL2OutputOracleDynamicConfig",
    outputs: []
  }
];
var systemDictatorGoerliAddress = {
  5: "0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971"
};
var systemDictatorGoerliConfig = {
  address: systemDictatorGoerliAddress,
  abi: systemDictatorGoerliABI
};
var teleportrWithdrawerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "data",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "recipient",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "setData",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "setRecipient",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_teleportr", internalType: "address", type: "address" }],
    name: "setTeleportr",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "teleportr",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdrawFromTeleportr",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var teleportrWithdrawerAddress = {
  1: "0x78A25524D90E3D0596558fb43789bD800a5c3007"
};
var teleportrWithdrawerConfig = {
  address: teleportrWithdrawerAddress,
  abi: teleportrWithdrawerABI
};
var attestationStationABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "about",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "key", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "AttestationCreated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_attestations",
        internalType: "struct AttestationStation.AttestationData[]",
        type: "tuple[]",
        components: [
          { name: "about", internalType: "address", type: "address" },
          { name: "key", internalType: "bytes32", type: "bytes32" },
          { name: "val", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_about", internalType: "address", type: "address" },
      { name: "_key", internalType: "bytes32", type: "bytes32" },
      { name: "_val", internalType: "bytes", type: "bytes" }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" }
    ],
    name: "attestations",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var attestationStationAddress = {
  10: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  420: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77"
};
var attestationStationConfig = {
  address: attestationStationAddress,
  abi: attestationStationABI
};
var l2Erc721BridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address", type: "address" },
      { name: "_otherBridge", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721To",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC721",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "otherBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l2Erc721BridgeAddress = {
  10: "0x4200000000000000000000000000000000000014",
  420: "0x4200000000000000000000000000000000000014"
};
var l2Erc721BridgeConfig = {
  address: l2Erc721BridgeAddress,
  abi: l2Erc721BridgeABI
};
var mintManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_upgrader", internalType: "address", type: "address" },
      { name: "_governanceToken", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DENOMINATOR",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINT_CAP",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINT_PERIOD",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "governanceToken",
    outputs: [
      { name: "", internalType: "contract GovernanceToken", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "mint",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "mintPermittedAfter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newMintManager", internalType: "address", type: "address" }
    ],
    name: "upgrade",
    outputs: []
  }
];
var mintManagerAddress = {
  10: "0x5C4e7Ba1E219E47948e6e3F55019A647bA501005",
  420: "0x038a8825A3C3B0c08d52Cc76E5E361953Cf6Dc76"
};
var mintManagerConfig = {
  address: mintManagerAddress,
  abi: mintManagerABI
};
var optimismMintableErc721FactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_bridge", internalType: "address", type: "address" },
      { name: "_remoteChainId", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC721Created"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC721",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isOptimismMintableERC721",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "remoteChainId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc721FactoryAddress = {
  10: "0x4200000000000000000000000000000000000017"
};
var optimismMintableErc721FactoryConfig = {
  address: optimismMintableErc721FactoryAddress,
  abi: optimismMintableErc721FactoryABI
};
var optimismMintableErc721FactoryOptimismGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_bridge", internalType: "address", type: "address" },
      { name: "_remoteChainId", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC721Created"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BRIDGE",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "REMOTE_CHAIN_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC721",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isOptimismMintableERC721",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc721FactoryOptimismGoerliAddress = {
  420: "0x4200000000000000000000000000000000000017"
};
var optimismMintableErc721FactoryOptimismGoerliConfig = {
  address: optimismMintableErc721FactoryOptimismGoerliAddress,
  abi: optimismMintableErc721FactoryOptimismGoerliABI
};
var optimistABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_baseURIAttestor", internalType: "address", type: "address" },
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      },
      {
        name: "_optimistAllowlist",
        internalType: "contract OptimistAllowlist",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "approved",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "Transfer"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BASE_URI_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BASE_URI_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_ALLOWLIST",
    outputs: [
      { name: "", internalType: "contract OptimistAllowlist", type: "address" }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "isOnAllowList",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "mint",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "safeTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }],
    name: "tokenIdOfAddress",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistAddress = {
  10: "0x2335022c740d17c2837f9C884Bfe4fFdbf0A95D5",
  420: "0x2335022c740d17c2837f9C884Bfe4fFdbf0A95D5"
};
var optimistConfig = {
  address: optimistAddress,
  abi: optimistABI
};
var optimistAllowlistABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      },
      { name: "_allowlistAttestor", internalType: "address", type: "address" },
      {
        name: "_coinbaseQuestAttestor",
        internalType: "address",
        type: "address"
      },
      { name: "_optimistInviter", internalType: "address", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ALLOWLIST_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "COINBASE_QUEST_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_INVITER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_claimer", internalType: "address", type: "address" }],
    name: "isAllowedToMint",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistAllowlistAddress = {
  10: "0x482b1945D58f2E9Db0CEbe13c7fcFc6876b41180",
  420: "0x482b1945D58f2E9Db0CEbe13c7fcFc6876b41180"
};
var optimistAllowlistConfig = {
  address: optimistAllowlistAddress,
  abi: optimistAllowlistABI
};
var optimistInviterABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_inviteGranter", internalType: "address", type: "address" },
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "issuer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "claimer",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "InviteClaimed"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CAN_INVITE_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CLAIMABLE_INVITE_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EIP712_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "INVITE_GRANTER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_COMMITMENT_PERIOD",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_claimer", internalType: "address", type: "address" },
      {
        name: "_claimableInvite",
        internalType: "struct OptimistInviter.ClaimableInvite",
        type: "tuple",
        components: [
          { name: "issuer", internalType: "address", type: "address" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "_signature", internalType: "bytes", type: "bytes" }
    ],
    name: "claimInvite",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_commitment", internalType: "bytes32", type: "bytes32" }],
    name: "commitInvite",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "commitmentTimestamps",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "inviteCounts",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_accounts", internalType: "address[]", type: "address[]" },
      { name: "_inviteCount", internalType: "uint256", type: "uint256" }
    ],
    name: "setInviteCounts",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" }
    ],
    name: "usedNonces",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistInviterAddress = {
  10: "0x073031A1E1b8F5458Ed41Ce56331F5fd7e1de929",
  420: "0x073031A1E1b8F5458Ed41Ce56331F5fd7e1de929"
};
var optimistInviterConfig = {
  address: optimistInviterAddress,
  abi: optimistInviterABI
};
var baseFeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var baseFeeVaultAddress = {
  420: "0x4200000000000000000000000000000000000019"
};
var baseFeeVaultConfig = {
  address: baseFeeVaultAddress,
  abi: baseFeeVaultABI
};
var gasPriceOracleABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gasPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "getL1Fee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "getL1GasUsed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1BaseFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "overhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "scalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var gasPriceOracleAddress = {
  420: "0x420000000000000000000000000000000000000F"
};
var gasPriceOracleConfig = {
  address: gasPriceOracleAddress,
  abi: gasPriceOracleABI
};
var l1BlockABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEPOSITOR_ACCOUNT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "basefee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "batcherHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeOverhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeScalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "number",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sequenceNumber",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_number", internalType: "uint64", type: "uint64" },
      { name: "_timestamp", internalType: "uint64", type: "uint64" },
      { name: "_basefee", internalType: "uint256", type: "uint256" },
      { name: "_hash", internalType: "bytes32", type: "bytes32" },
      { name: "_sequenceNumber", internalType: "uint64", type: "uint64" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_l1FeeOverhead", internalType: "uint256", type: "uint256" },
      { name: "_l1FeeScalar", internalType: "uint256", type: "uint256" }
    ],
    name: "setL1BlockValues",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timestamp",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l1BlockAddress = {
  420: "0x4200000000000000000000000000000000000015"
};
var l1BlockConfig = {
  address: l1BlockAddress,
  abi: l1BlockABI
};
var l1FeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var l1FeeVaultAddress = {
  420: "0x420000000000000000000000000000000000001A"
};
var l1FeeVaultConfig = {
  address: l1FeeVaultAddress,
  abi: l1FeeVaultABI
};
var l2CrossDomainMessengerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_l1CrossDomainMessenger",
        internalType: "address",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "FailedRelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "message", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "messageNonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessageExtension1"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_CALLDATA_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OTHER_MESSENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CALL_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CONSTANT_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_GAS_CHECK_BUFFER",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_RESERVED_GAS",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "baseGas",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "failedMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_nonce", internalType: "uint256", type: "uint256" },
      { name: "_sender", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint256", type: "uint256" },
      { name: "_message", internalType: "bytes", type: "bytes" }
    ],
    name: "relayMessage",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "sendMessage",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "successfulMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  }
];
var l2CrossDomainMessengerAddress = {
  420: "0x4200000000000000000000000000000000000007"
};
var l2CrossDomainMessengerConfig = {
  address: l2CrossDomainMessengerAddress,
  abi: l2CrossDomainMessengerABI
};
var l2StandardBridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_otherBridge",
        internalType: "address payable",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "DepositFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "WithdrawalInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETHTo",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC20",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeDeposit",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1TokenBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "withdraw",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "withdrawTo",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var l2StandardBridgeAddress = {
  420: "0x4200000000000000000000000000000000000010"
};
var l2StandardBridgeConfig = {
  address: l2StandardBridgeAddress,
  abi: l2StandardBridgeABI
};
var l2ToL1MessagePasserABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      }
    ],
    name: "MessagePassed"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "WithdrawerBalanceBurnt"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "burn",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_gasLimit", internalType: "uint256", type: "uint256" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "initiateWithdrawal",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "sentMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var l2ToL1MessagePasserAddress = {
  420: "0x4200000000000000000000000000000000000016"
};
var l2ToL1MessagePasserConfig = {
  address: l2ToL1MessagePasserAddress,
  abi: l2ToL1MessagePasserABI
};
var sequencerFeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeWallet",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var sequencerFeeVaultAddress = {
  420: "0x4200000000000000000000000000000000000011"
};
var sequencerFeeVaultConfig = {
  address: sequencerFeeVaultAddress,
  abi: sequencerFeeVaultABI
};
function getAddressManager(config) {
  return getContract({
    abi: addressManagerABI,
    address: addressManagerAddress[config.chainId],
    ...config
  });
}
function readAddressManager(config) {
  return readContract({
    abi: addressManagerABI,
    address: addressManagerAddress[config.chainId],
    ...config
  });
}
function writeAddressManager(config) {
  return writeContract({
    abi: addressManagerABI,
    address: addressManagerAddress[config.chainId],
    ...config
  });
}
function prepareWriteAddressManager(config) {
  return prepareWriteContract({
    abi: addressManagerABI,
    address: addressManagerAddress[config.chainId],
    ...config
  });
}
function watchAddressManagerEvent(config, callback) {
  return watchContractEvent(
    {
      abi: addressManagerABI,
      address: addressManagerAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getAssetReceiver(config) {
  return getContract({
    abi: assetReceiverABI,
    address: assetReceiverAddress[config.chainId],
    ...config
  });
}
function readAssetReceiver(config) {
  return readContract({
    abi: assetReceiverABI,
    address: assetReceiverAddress[config.chainId],
    ...config
  });
}
function writeAssetReceiver(config) {
  return writeContract({
    abi: assetReceiverABI,
    address: assetReceiverAddress[config.chainId],
    ...config
  });
}
function prepareWriteAssetReceiver(config) {
  return prepareWriteContract({
    abi: assetReceiverABI,
    address: assetReceiverAddress[config.chainId],
    ...config
  });
}
function watchAssetReceiverEvent(config, callback) {
  return watchContractEvent(
    {
      abi: assetReceiverABI,
      address: assetReceiverAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getCheckBalanceHigh(config) {
  return getContract({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[config.chainId],
    ...config
  });
}
function readCheckBalanceHigh(config) {
  return readContract({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[config.chainId],
    ...config
  });
}
function watchCheckBalanceHighEvent(config, callback) {
  return watchContractEvent(
    {
      abi: checkBalanceHighABI,
      address: checkBalanceHighAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getCheckBalanceLow(config) {
  return getContract({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[config.chainId],
    ...config
  });
}
function readCheckBalanceLow(config) {
  return readContract({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[config.chainId],
    ...config
  });
}
function watchCheckBalanceLowEvent(config, callback) {
  return watchContractEvent(
    {
      abi: checkBalanceLowABI,
      address: checkBalanceLowAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getCheckGelatoLow(config) {
  return getContract({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[config.chainId],
    ...config
  });
}
function readCheckGelatoLow(config) {
  return readContract({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[config.chainId],
    ...config
  });
}
function watchCheckGelatoLowEvent(config, callback) {
  return watchContractEvent(
    {
      abi: checkGelatoLowABI,
      address: checkGelatoLowAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getCheckTrue(config) {
  return getContract({
    abi: checkTrueABI,
    address: checkTrueAddress[config.chainId],
    ...config
  });
}
function readCheckTrue(config) {
  return readContract({
    abi: checkTrueABI,
    address: checkTrueAddress[config.chainId],
    ...config
  });
}
function getDrippie(config) {
  return getContract({ abi: drippieABI, address: drippieAddress[1], ...config });
}
function readDrippie(config) {
  return readContract({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function writeDrippie(config) {
  return writeContract({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function prepareWriteDrippie(config) {
  return prepareWriteContract({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function watchDrippieEvent(config, callback) {
  return watchContractEvent(
    {
      abi: drippieABI,
      address: drippieAddress[1],
      ...config
    },
    callback
  );
}
function getDrippieGoerli(config) {
  return getContract({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function readDrippieGoerli(config) {
  return readContract({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function writeDrippieGoerli(config) {
  return writeContract({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function prepareWriteDrippieGoerli(config) {
  return prepareWriteContract({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function watchDrippieGoerliEvent(config, callback) {
  return watchContractEvent(
    {
      abi: drippieGoerliABI,
      address: drippieGoerliAddress[5],
      ...config
    },
    callback
  );
}
function getDrippieOptimismGoerli(config) {
  return getContract({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function readDrippieOptimismGoerli(config) {
  return readContract({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function writeDrippieOptimismGoerli(config) {
  return writeContract({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function prepareWriteDrippieOptimismGoerli(config) {
  return prepareWriteContract({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function watchDrippieOptimismGoerliEvent(config, callback) {
  return watchContractEvent(
    {
      abi: drippieOptimismGoerliABI,
      address: drippieOptimismGoerliAddress[420],
      ...config
    },
    callback
  );
}
function getL1CrossDomainMessenger(config) {
  return getContract({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[config.chainId],
    ...config
  });
}
function readL1CrossDomainMessenger(config) {
  return readContract({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[config.chainId],
    ...config
  });
}
function writeL1CrossDomainMessenger(config) {
  return writeContract({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[config.chainId],
    ...config
  });
}
function prepareWriteL1CrossDomainMessenger(config) {
  return prepareWriteContract({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[config.chainId],
    ...config
  });
}
function watchL1CrossDomainMessengerEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l1CrossDomainMessengerABI,
      address: l1CrossDomainMessengerAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getL1Erc721Bridge(config) {
  return getContract({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function readL1Erc721Bridge(config) {
  return readContract({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function writeL1Erc721Bridge(config) {
  return writeContract({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function prepareWriteL1Erc721Bridge(config) {
  return prepareWriteContract({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function watchL1Erc721BridgeEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l1Erc721BridgeABI,
      address: l1Erc721BridgeAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getL1StandardBridge(config) {
  return getContract({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[config.chainId],
    ...config
  });
}
function readL1StandardBridge(config) {
  return readContract({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[config.chainId],
    ...config
  });
}
function writeL1StandardBridge(config) {
  return writeContract({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[config.chainId],
    ...config
  });
}
function prepareWriteL1StandardBridge(config) {
  return prepareWriteContract({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[config.chainId],
    ...config
  });
}
function watchL1StandardBridgeEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l1StandardBridgeABI,
      address: l1StandardBridgeAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getL2OutputOracle(config) {
  return getContract({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[config.chainId],
    ...config
  });
}
function readL2OutputOracle(config) {
  return readContract({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[config.chainId],
    ...config
  });
}
function writeL2OutputOracle(config) {
  return writeContract({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[config.chainId],
    ...config
  });
}
function prepareWriteL2OutputOracle(config) {
  return prepareWriteContract({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[config.chainId],
    ...config
  });
}
function watchL2OutputOracleEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l2OutputOracleABI,
      address: l2OutputOracleAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getOptimismMintableErc20Factory(config) {
  return getContract({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[config.chainId],
    ...config
  });
}
function readOptimismMintableErc20Factory(config) {
  return readContract({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[config.chainId],
    ...config
  });
}
function writeOptimismMintableErc20Factory(config) {
  return writeContract({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[config.chainId],
    ...config
  });
}
function prepareWriteOptimismMintableErc20Factory(config) {
  return prepareWriteContract({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[config.chainId],
    ...config
  });
}
function watchOptimismMintableErc20FactoryEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimismMintableErc20FactoryABI,
      address: optimismMintableErc20FactoryAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getOptimismPortal(config) {
  return getContract({
    abi: optimismPortalABI,
    address: optimismPortalAddress[config.chainId],
    ...config
  });
}
function readOptimismPortal(config) {
  return readContract({
    abi: optimismPortalABI,
    address: optimismPortalAddress[config.chainId],
    ...config
  });
}
function writeOptimismPortal(config) {
  return writeContract({
    abi: optimismPortalABI,
    address: optimismPortalAddress[config.chainId],
    ...config
  });
}
function prepareWriteOptimismPortal(config) {
  return prepareWriteContract({
    abi: optimismPortalABI,
    address: optimismPortalAddress[config.chainId],
    ...config
  });
}
function watchOptimismPortalEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimismPortalABI,
      address: optimismPortalAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getPortalSender(config) {
  return getContract({
    abi: portalSenderABI,
    address: portalSenderAddress[config.chainId],
    ...config
  });
}
function readPortalSender(config) {
  return readContract({
    abi: portalSenderABI,
    address: portalSenderAddress[config.chainId],
    ...config
  });
}
function writePortalSender(config) {
  return writeContract({
    abi: portalSenderABI,
    address: portalSenderAddress[config.chainId],
    ...config
  });
}
function prepareWritePortalSender(config) {
  return prepareWriteContract({
    abi: portalSenderABI,
    address: portalSenderAddress[config.chainId],
    ...config
  });
}
function getProxyAdmin(config) {
  return getContract({
    abi: proxyAdminABI,
    address: proxyAdminAddress[config.chainId],
    ...config
  });
}
function readProxyAdmin(config) {
  return readContract({
    abi: proxyAdminABI,
    address: proxyAdminAddress[config.chainId],
    ...config
  });
}
function writeProxyAdmin(config) {
  return writeContract({
    abi: proxyAdminABI,
    address: proxyAdminAddress[config.chainId],
    ...config
  });
}
function prepareWriteProxyAdmin(config) {
  return prepareWriteContract({
    abi: proxyAdminABI,
    address: proxyAdminAddress[config.chainId],
    ...config
  });
}
function watchProxyAdminEvent(config, callback) {
  return watchContractEvent(
    {
      abi: proxyAdminABI,
      address: proxyAdminAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getSystemConfig(config) {
  return getContract({
    abi: systemConfigABI,
    address: systemConfigAddress[config.chainId],
    ...config
  });
}
function readSystemConfig(config) {
  return readContract({
    abi: systemConfigABI,
    address: systemConfigAddress[config.chainId],
    ...config
  });
}
function writeSystemConfig(config) {
  return writeContract({
    abi: systemConfigABI,
    address: systemConfigAddress[config.chainId],
    ...config
  });
}
function prepareWriteSystemConfig(config) {
  return prepareWriteContract({
    abi: systemConfigABI,
    address: systemConfigAddress[config.chainId],
    ...config
  });
}
function watchSystemConfigEvent(config, callback) {
  return watchContractEvent(
    {
      abi: systemConfigABI,
      address: systemConfigAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getSystemDictator(config) {
  return getContract({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function readSystemDictator(config) {
  return readContract({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function writeSystemDictator(config) {
  return writeContract({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function prepareWriteSystemDictator(config) {
  return prepareWriteContract({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function watchSystemDictatorEvent(config, callback) {
  return watchContractEvent(
    {
      abi: systemDictatorABI,
      address: systemDictatorAddress[1],
      ...config
    },
    callback
  );
}
function getSystemDictatorGoerli(config) {
  return getContract({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function readSystemDictatorGoerli(config) {
  return readContract({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function writeSystemDictatorGoerli(config) {
  return writeContract({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function prepareWriteSystemDictatorGoerli(config) {
  return prepareWriteContract({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function watchSystemDictatorGoerliEvent(config, callback) {
  return watchContractEvent(
    {
      abi: systemDictatorGoerliABI,
      address: systemDictatorGoerliAddress[5],
      ...config
    },
    callback
  );
}
function getTeleportrWithdrawer(config) {
  return getContract({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function readTeleportrWithdrawer(config) {
  return readContract({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function writeTeleportrWithdrawer(config) {
  return writeContract({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function prepareWriteTeleportrWithdrawer(config) {
  return prepareWriteContract({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function watchTeleportrWithdrawerEvent(config, callback) {
  return watchContractEvent(
    {
      abi: teleportrWithdrawerABI,
      address: teleportrWithdrawerAddress[1],
      ...config
    },
    callback
  );
}
function getAttestationStation(config) {
  return getContract({
    abi: attestationStationABI,
    address: attestationStationAddress[config.chainId],
    ...config
  });
}
function readAttestationStation(config) {
  return readContract({
    abi: attestationStationABI,
    address: attestationStationAddress[config.chainId],
    ...config
  });
}
function writeAttestationStation(config) {
  return writeContract({
    abi: attestationStationABI,
    address: attestationStationAddress[config.chainId],
    ...config
  });
}
function prepareWriteAttestationStation(config) {
  return prepareWriteContract({
    abi: attestationStationABI,
    address: attestationStationAddress[config.chainId],
    ...config
  });
}
function watchAttestationStationEvent(config, callback) {
  return watchContractEvent(
    {
      abi: attestationStationABI,
      address: attestationStationAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getL2Erc721Bridge(config) {
  return getContract({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function readL2Erc721Bridge(config) {
  return readContract({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function writeL2Erc721Bridge(config) {
  return writeContract({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function prepareWriteL2Erc721Bridge(config) {
  return prepareWriteContract({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[config.chainId],
    ...config
  });
}
function watchL2Erc721BridgeEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l2Erc721BridgeABI,
      address: l2Erc721BridgeAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getMintManager(config) {
  return getContract({
    abi: mintManagerABI,
    address: mintManagerAddress[config.chainId],
    ...config
  });
}
function readMintManager(config) {
  return readContract({
    abi: mintManagerABI,
    address: mintManagerAddress[config.chainId],
    ...config
  });
}
function writeMintManager(config) {
  return writeContract({
    abi: mintManagerABI,
    address: mintManagerAddress[config.chainId],
    ...config
  });
}
function prepareWriteMintManager(config) {
  return prepareWriteContract({
    abi: mintManagerABI,
    address: mintManagerAddress[config.chainId],
    ...config
  });
}
function watchMintManagerEvent(config, callback) {
  return watchContractEvent(
    {
      abi: mintManagerABI,
      address: mintManagerAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getOptimismMintableErc721Factory(config) {
  return getContract({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function readOptimismMintableErc721Factory(config) {
  return readContract({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function writeOptimismMintableErc721Factory(config) {
  return writeContract({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function prepareWriteOptimismMintableErc721Factory(config) {
  return prepareWriteContract({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function watchOptimismMintableErc721FactoryEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimismMintableErc721FactoryABI,
      address: optimismMintableErc721FactoryAddress[10],
      ...config
    },
    callback
  );
}
function getOptimismMintableErc721FactoryOptimismGoerli(config) {
  return getContract({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function readOptimismMintableErc721FactoryOptimismGoerli(config) {
  return readContract({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function writeOptimismMintableErc721FactoryOptimismGoerli(config) {
  return writeContract({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function prepareWriteOptimismMintableErc721FactoryOptimismGoerli(config) {
  return prepareWriteContract({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function watchOptimismMintableErc721FactoryOptimismGoerliEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimismMintableErc721FactoryOptimismGoerliABI,
      address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
      ...config
    },
    callback
  );
}
function getOptimist(config) {
  return getContract({
    abi: optimistABI,
    address: optimistAddress[config.chainId],
    ...config
  });
}
function readOptimist(config) {
  return readContract({
    abi: optimistABI,
    address: optimistAddress[config.chainId],
    ...config
  });
}
function writeOptimist(config) {
  return writeContract({
    abi: optimistABI,
    address: optimistAddress[config.chainId],
    ...config
  });
}
function prepareWriteOptimist(config) {
  return prepareWriteContract({
    abi: optimistABI,
    address: optimistAddress[config.chainId],
    ...config
  });
}
function watchOptimistEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimistABI,
      address: optimistAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getOptimistAllowlist(config) {
  return getContract({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[config.chainId],
    ...config
  });
}
function readOptimistAllowlist(config) {
  return readContract({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[config.chainId],
    ...config
  });
}
function getOptimistInviter(config) {
  return getContract({
    abi: optimistInviterABI,
    address: optimistInviterAddress[config.chainId],
    ...config
  });
}
function readOptimistInviter(config) {
  return readContract({
    abi: optimistInviterABI,
    address: optimistInviterAddress[config.chainId],
    ...config
  });
}
function writeOptimistInviter(config) {
  return writeContract({
    abi: optimistInviterABI,
    address: optimistInviterAddress[config.chainId],
    ...config
  });
}
function prepareWriteOptimistInviter(config) {
  return prepareWriteContract({
    abi: optimistInviterABI,
    address: optimistInviterAddress[config.chainId],
    ...config
  });
}
function watchOptimistInviterEvent(config, callback) {
  return watchContractEvent(
    {
      abi: optimistInviterABI,
      address: optimistInviterAddress[config.chainId],
      ...config
    },
    callback
  );
}
function getBaseFeeVault(config) {
  return getContract({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function readBaseFeeVault(config) {
  return readContract({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function writeBaseFeeVault(config) {
  return writeContract({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function prepareWriteBaseFeeVault(config) {
  return prepareWriteContract({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function watchBaseFeeVaultEvent(config, callback) {
  return watchContractEvent(
    {
      abi: baseFeeVaultABI,
      address: baseFeeVaultAddress[420],
      ...config
    },
    callback
  );
}
function getGasPriceOracle(config) {
  return getContract({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    ...config
  });
}
function readGasPriceOracle(config) {
  return readContract({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    ...config
  });
}
function getL1Block(config) {
  return getContract({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function readL1Block(config) {
  return readContract({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function writeL1Block(config) {
  return writeContract({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function prepareWriteL1Block(config) {
  return prepareWriteContract({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function getL1FeeVault(config) {
  return getContract({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function readL1FeeVault(config) {
  return readContract({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function writeL1FeeVault(config) {
  return writeContract({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function prepareWriteL1FeeVault(config) {
  return prepareWriteContract({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function watchL1FeeVaultEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l1FeeVaultABI,
      address: l1FeeVaultAddress[420],
      ...config
    },
    callback
  );
}
function getL2CrossDomainMessenger(config) {
  return getContract({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function readL2CrossDomainMessenger(config) {
  return readContract({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function writeL2CrossDomainMessenger(config) {
  return writeContract({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function prepareWriteL2CrossDomainMessenger(config) {
  return prepareWriteContract({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function watchL2CrossDomainMessengerEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l2CrossDomainMessengerABI,
      address: l2CrossDomainMessengerAddress[420],
      ...config
    },
    callback
  );
}
function getL2StandardBridge(config) {
  return getContract({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function readL2StandardBridge(config) {
  return readContract({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function writeL2StandardBridge(config) {
  return writeContract({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function prepareWriteL2StandardBridge(config) {
  return prepareWriteContract({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function watchL2StandardBridgeEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l2StandardBridgeABI,
      address: l2StandardBridgeAddress[420],
      ...config
    },
    callback
  );
}
function getL2ToL1MessagePasser(config) {
  return getContract({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function readL2ToL1MessagePasser(config) {
  return readContract({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function writeL2ToL1MessagePasser(config) {
  return writeContract({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function prepareWriteL2ToL1MessagePasser(config) {
  return prepareWriteContract({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function watchL2ToL1MessagePasserEvent(config, callback) {
  return watchContractEvent(
    {
      abi: l2ToL1MessagePasserABI,
      address: l2ToL1MessagePasserAddress[420],
      ...config
    },
    callback
  );
}
function getSequencerFeeVault(config) {
  return getContract({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function readSequencerFeeVault(config) {
  return readContract({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function writeSequencerFeeVault(config) {
  return writeContract({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function prepareWriteSequencerFeeVault(config) {
  return prepareWriteContract({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function watchSequencerFeeVaultEvent(config, callback) {
  return watchContractEvent(
    {
      abi: sequencerFeeVaultABI,
      address: sequencerFeeVaultAddress[420],
      ...config
    },
    callback
  );
}
export {
  addressManagerABI,
  addressManagerAddress,
  addressManagerConfig,
  assetReceiverABI,
  assetReceiverAddress,
  assetReceiverConfig,
  attestationStationABI,
  attestationStationAddress,
  attestationStationConfig,
  baseFeeVaultABI,
  baseFeeVaultAddress,
  baseFeeVaultConfig,
  checkBalanceHighABI,
  checkBalanceHighAddress,
  checkBalanceHighConfig,
  checkBalanceLowABI,
  checkBalanceLowAddress,
  checkBalanceLowConfig,
  checkGelatoLowABI,
  checkGelatoLowAddress,
  checkGelatoLowConfig,
  checkTrueABI,
  checkTrueAddress,
  checkTrueConfig,
  drippieABI,
  drippieAddress,
  drippieConfig,
  drippieGoerliABI,
  drippieGoerliAddress,
  drippieGoerliConfig,
  drippieOptimismGoerliABI,
  drippieOptimismGoerliAddress,
  drippieOptimismGoerliConfig,
  gasPriceOracleABI,
  gasPriceOracleAddress,
  gasPriceOracleConfig,
  getAddressManager,
  getAssetReceiver,
  getAttestationStation,
  getBaseFeeVault,
  getCheckBalanceHigh,
  getCheckBalanceLow,
  getCheckGelatoLow,
  getCheckTrue,
  getDrippie,
  getDrippieGoerli,
  getDrippieOptimismGoerli,
  getGasPriceOracle,
  getL1Block,
  getL1CrossDomainMessenger,
  getL1Erc721Bridge,
  getL1FeeVault,
  getL1StandardBridge,
  getL2CrossDomainMessenger,
  getL2Erc721Bridge,
  getL2OutputOracle,
  getL2StandardBridge,
  getL2ToL1MessagePasser,
  getMintManager,
  getOptimismMintableErc20Factory,
  getOptimismMintableErc721Factory,
  getOptimismMintableErc721FactoryOptimismGoerli,
  getOptimismPortal,
  getOptimist,
  getOptimistAllowlist,
  getOptimistInviter,
  getPortalSender,
  getProxyAdmin,
  getSequencerFeeVault,
  getSystemConfig,
  getSystemDictator,
  getSystemDictatorGoerli,
  getTeleportrWithdrawer,
  l1BlockABI,
  l1BlockAddress,
  l1BlockConfig,
  l1CrossDomainMessengerABI,
  l1CrossDomainMessengerAddress,
  l1CrossDomainMessengerConfig,
  l1Erc721BridgeABI,
  l1Erc721BridgeAddress,
  l1Erc721BridgeConfig,
  l1FeeVaultABI,
  l1FeeVaultAddress,
  l1FeeVaultConfig,
  l1StandardBridgeABI,
  l1StandardBridgeAddress,
  l1StandardBridgeConfig,
  l2CrossDomainMessengerABI,
  l2CrossDomainMessengerAddress,
  l2CrossDomainMessengerConfig,
  l2Erc721BridgeABI,
  l2Erc721BridgeAddress,
  l2Erc721BridgeConfig,
  l2OutputOracleABI,
  l2OutputOracleAddress,
  l2OutputOracleConfig,
  l2StandardBridgeABI,
  l2StandardBridgeAddress,
  l2StandardBridgeConfig,
  l2ToL1MessagePasserABI,
  l2ToL1MessagePasserAddress,
  l2ToL1MessagePasserConfig,
  mintManagerABI,
  mintManagerAddress,
  mintManagerConfig,
  optimismMintableErc20FactoryABI,
  optimismMintableErc20FactoryAddress,
  optimismMintableErc20FactoryConfig,
  optimismMintableErc721FactoryABI,
  optimismMintableErc721FactoryAddress,
  optimismMintableErc721FactoryConfig,
  optimismMintableErc721FactoryOptimismGoerliABI,
  optimismMintableErc721FactoryOptimismGoerliAddress,
  optimismMintableErc721FactoryOptimismGoerliConfig,
  optimismPortalABI,
  optimismPortalAddress,
  optimismPortalConfig,
  optimistABI,
  optimistAddress,
  optimistAllowlistABI,
  optimistAllowlistAddress,
  optimistAllowlistConfig,
  optimistConfig,
  optimistInviterABI,
  optimistInviterAddress,
  optimistInviterConfig,
  portalSenderABI,
  portalSenderAddress,
  portalSenderConfig,
  prepareWriteAddressManager,
  prepareWriteAssetReceiver,
  prepareWriteAttestationStation,
  prepareWriteBaseFeeVault,
  prepareWriteDrippie,
  prepareWriteDrippieGoerli,
  prepareWriteDrippieOptimismGoerli,
  prepareWriteL1Block,
  prepareWriteL1CrossDomainMessenger,
  prepareWriteL1Erc721Bridge,
  prepareWriteL1FeeVault,
  prepareWriteL1StandardBridge,
  prepareWriteL2CrossDomainMessenger,
  prepareWriteL2Erc721Bridge,
  prepareWriteL2OutputOracle,
  prepareWriteL2StandardBridge,
  prepareWriteL2ToL1MessagePasser,
  prepareWriteMintManager,
  prepareWriteOptimismMintableErc20Factory,
  prepareWriteOptimismMintableErc721Factory,
  prepareWriteOptimismMintableErc721FactoryOptimismGoerli,
  prepareWriteOptimismPortal,
  prepareWriteOptimist,
  prepareWriteOptimistInviter,
  prepareWritePortalSender,
  prepareWriteProxyAdmin,
  prepareWriteSequencerFeeVault,
  prepareWriteSystemConfig,
  prepareWriteSystemDictator,
  prepareWriteSystemDictatorGoerli,
  prepareWriteTeleportrWithdrawer,
  proxyAdminABI,
  proxyAdminAddress,
  proxyAdminConfig,
  readAddressManager,
  readAssetReceiver,
  readAttestationStation,
  readBaseFeeVault,
  readCheckBalanceHigh,
  readCheckBalanceLow,
  readCheckGelatoLow,
  readCheckTrue,
  readDrippie,
  readDrippieGoerli,
  readDrippieOptimismGoerli,
  readGasPriceOracle,
  readL1Block,
  readL1CrossDomainMessenger,
  readL1Erc721Bridge,
  readL1FeeVault,
  readL1StandardBridge,
  readL2CrossDomainMessenger,
  readL2Erc721Bridge,
  readL2OutputOracle,
  readL2StandardBridge,
  readL2ToL1MessagePasser,
  readMintManager,
  readOptimismMintableErc20Factory,
  readOptimismMintableErc721Factory,
  readOptimismMintableErc721FactoryOptimismGoerli,
  readOptimismPortal,
  readOptimist,
  readOptimistAllowlist,
  readOptimistInviter,
  readPortalSender,
  readProxyAdmin,
  readSequencerFeeVault,
  readSystemConfig,
  readSystemDictator,
  readSystemDictatorGoerli,
  readTeleportrWithdrawer,
  sequencerFeeVaultABI,
  sequencerFeeVaultAddress,
  sequencerFeeVaultConfig,
  systemConfigABI,
  systemConfigAddress,
  systemConfigConfig,
  systemDictatorABI,
  systemDictatorAddress,
  systemDictatorConfig,
  systemDictatorGoerliABI,
  systemDictatorGoerliAddress,
  systemDictatorGoerliConfig,
  teleportrWithdrawerABI,
  teleportrWithdrawerAddress,
  teleportrWithdrawerConfig,
  watchAddressManagerEvent,
  watchAssetReceiverEvent,
  watchAttestationStationEvent,
  watchBaseFeeVaultEvent,
  watchCheckBalanceHighEvent,
  watchCheckBalanceLowEvent,
  watchCheckGelatoLowEvent,
  watchDrippieEvent,
  watchDrippieGoerliEvent,
  watchDrippieOptimismGoerliEvent,
  watchL1CrossDomainMessengerEvent,
  watchL1Erc721BridgeEvent,
  watchL1FeeVaultEvent,
  watchL1StandardBridgeEvent,
  watchL2CrossDomainMessengerEvent,
  watchL2Erc721BridgeEvent,
  watchL2OutputOracleEvent,
  watchL2StandardBridgeEvent,
  watchL2ToL1MessagePasserEvent,
  watchMintManagerEvent,
  watchOptimismMintableErc20FactoryEvent,
  watchOptimismMintableErc721FactoryEvent,
  watchOptimismMintableErc721FactoryOptimismGoerliEvent,
  watchOptimismPortalEvent,
  watchOptimistEvent,
  watchOptimistInviterEvent,
  watchProxyAdminEvent,
  watchSequencerFeeVaultEvent,
  watchSystemConfigEvent,
  watchSystemDictatorEvent,
  watchSystemDictatorGoerliEvent,
  watchTeleportrWithdrawerEvent,
  writeAddressManager,
  writeAssetReceiver,
  writeAttestationStation,
  writeBaseFeeVault,
  writeDrippie,
  writeDrippieGoerli,
  writeDrippieOptimismGoerli,
  writeL1Block,
  writeL1CrossDomainMessenger,
  writeL1Erc721Bridge,
  writeL1FeeVault,
  writeL1StandardBridge,
  writeL2CrossDomainMessenger,
  writeL2Erc721Bridge,
  writeL2OutputOracle,
  writeL2StandardBridge,
  writeL2ToL1MessagePasser,
  writeMintManager,
  writeOptimismMintableErc20Factory,
  writeOptimismMintableErc721Factory,
  writeOptimismMintableErc721FactoryOptimismGoerli,
  writeOptimismPortal,
  writeOptimist,
  writeOptimistInviter,
  writePortalSender,
  writeProxyAdmin,
  writeSequencerFeeVault,
  writeSystemConfig,
  writeSystemDictator,
  writeSystemDictatorGoerli,
  writeTeleportrWithdrawer
};
//# sourceMappingURL=actions.js.map