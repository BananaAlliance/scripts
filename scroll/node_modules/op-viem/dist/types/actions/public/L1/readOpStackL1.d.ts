import type { Abi, Address, Chain, Client, ReadContractParameters, ReadContractReturnType, Transport } from 'viem';
import type { GetL2Chain } from '../../../types/l1Actions.js';
import { OpStackL1Contract } from '../../../types/opStackContracts.js';
export type ReadOpStackL1Parameters<TChain extends Chain | undefined = Chain, TAbi extends Abi | readonly unknown[] = Abi, TFunctionName extends string = string> = {
    contract: OpStackL1Contract;
    chain: TChain;
} & ({
    l2Chain: GetL2Chain<TChain>;
    address?: never;
} | {
    l2Chain?: never;
    address: Address;
}) & Omit<ReadContractParameters<TAbi, TFunctionName>, 'address'>;
export declare function readOpStackL1<TChain extends Chain | undefined, const TAbi extends Abi | readonly unknown[], TFunctionName extends string>(client: Client<Transport, TChain>, { l2Chain, contract, address, chain, ...rest }: ReadOpStackL1Parameters<TChain, TAbi, TFunctionName>): Promise<ReadContractReturnType<TAbi, TFunctionName>>;
//# sourceMappingURL=readOpStackL1.d.ts.map