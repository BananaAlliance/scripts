import type { Chain, Hex, PublicClient, Transport } from 'viem';
import type { GetL2Chain, L1ActionBaseType } from '../../../types/l1Actions.js';
import { OpStackL1Contract } from '../../../types/opStackContracts.js';
declare const CONTRACT = OpStackL1Contract.L2OutputOracle;
export type Proposal = {
    outputRoot: Hex;
    timestamp: bigint;
    l2BlockNumber: bigint;
};
export type GetOutputForL2BlockParameters<TChain extends Chain | undefined = Chain> = {
    l2BlockNumber: bigint;
} & L1ActionBaseType<GetL2Chain<TChain>, typeof CONTRACT>;
export type GetOutputForL2BlockReturnType = {
    proposal: Proposal;
    outputIndex: bigint;
};
/**
 * Calls to the L2OutputOracle contract on L1 to get the output for a given L2 block
 *
 * @param {bigint} blockNumber the L2 block number to get the output for
 * @param {OpChainL2} rollup the L2 chain
 * @returns {GetOutputForL2BlockReturnType} Output proposal and index for the L2 block
 */
export declare function getOutputForL2Block<TChain extends Chain | undefined>(client: PublicClient<Transport, TChain>, { l2BlockNumber, l2Chain, l2OutputOracleAddress, }: GetOutputForL2BlockParameters<TChain>): Promise<GetOutputForL2BlockReturnType>;
export {};
//# sourceMappingURL=getOutputForL2Block.d.ts.map