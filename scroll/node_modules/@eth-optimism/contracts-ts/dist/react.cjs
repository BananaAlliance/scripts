"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react.ts
var react_exports = {};
__export(react_exports, {
  addressManagerABI: () => addressManagerABI,
  addressManagerAddress: () => addressManagerAddress,
  addressManagerConfig: () => addressManagerConfig,
  assetReceiverABI: () => assetReceiverABI,
  assetReceiverAddress: () => assetReceiverAddress,
  assetReceiverConfig: () => assetReceiverConfig,
  attestationStationABI: () => attestationStationABI,
  attestationStationAddress: () => attestationStationAddress,
  attestationStationConfig: () => attestationStationConfig,
  baseFeeVaultABI: () => baseFeeVaultABI,
  baseFeeVaultAddress: () => baseFeeVaultAddress,
  baseFeeVaultConfig: () => baseFeeVaultConfig,
  checkBalanceHighABI: () => checkBalanceHighABI,
  checkBalanceHighAddress: () => checkBalanceHighAddress,
  checkBalanceHighConfig: () => checkBalanceHighConfig,
  checkBalanceLowABI: () => checkBalanceLowABI,
  checkBalanceLowAddress: () => checkBalanceLowAddress,
  checkBalanceLowConfig: () => checkBalanceLowConfig,
  checkGelatoLowABI: () => checkGelatoLowABI,
  checkGelatoLowAddress: () => checkGelatoLowAddress,
  checkGelatoLowConfig: () => checkGelatoLowConfig,
  checkTrueABI: () => checkTrueABI,
  checkTrueAddress: () => checkTrueAddress,
  checkTrueConfig: () => checkTrueConfig,
  drippieABI: () => drippieABI,
  drippieAddress: () => drippieAddress,
  drippieConfig: () => drippieConfig,
  drippieGoerliABI: () => drippieGoerliABI,
  drippieGoerliAddress: () => drippieGoerliAddress,
  drippieGoerliConfig: () => drippieGoerliConfig,
  drippieOptimismGoerliABI: () => drippieOptimismGoerliABI,
  drippieOptimismGoerliAddress: () => drippieOptimismGoerliAddress,
  drippieOptimismGoerliConfig: () => drippieOptimismGoerliConfig,
  gasPriceOracleABI: () => gasPriceOracleABI,
  gasPriceOracleAddress: () => gasPriceOracleAddress,
  gasPriceOracleConfig: () => gasPriceOracleConfig,
  l1BlockABI: () => l1BlockABI,
  l1BlockAddress: () => l1BlockAddress,
  l1BlockConfig: () => l1BlockConfig,
  l1CrossDomainMessengerABI: () => l1CrossDomainMessengerABI,
  l1CrossDomainMessengerAddress: () => l1CrossDomainMessengerAddress,
  l1CrossDomainMessengerConfig: () => l1CrossDomainMessengerConfig,
  l1Erc721BridgeABI: () => l1Erc721BridgeABI,
  l1Erc721BridgeAddress: () => l1Erc721BridgeAddress,
  l1Erc721BridgeConfig: () => l1Erc721BridgeConfig,
  l1FeeVaultABI: () => l1FeeVaultABI,
  l1FeeVaultAddress: () => l1FeeVaultAddress,
  l1FeeVaultConfig: () => l1FeeVaultConfig,
  l1StandardBridgeABI: () => l1StandardBridgeABI,
  l1StandardBridgeAddress: () => l1StandardBridgeAddress,
  l1StandardBridgeConfig: () => l1StandardBridgeConfig,
  l2CrossDomainMessengerABI: () => l2CrossDomainMessengerABI,
  l2CrossDomainMessengerAddress: () => l2CrossDomainMessengerAddress,
  l2CrossDomainMessengerConfig: () => l2CrossDomainMessengerConfig,
  l2Erc721BridgeABI: () => l2Erc721BridgeABI,
  l2Erc721BridgeAddress: () => l2Erc721BridgeAddress,
  l2Erc721BridgeConfig: () => l2Erc721BridgeConfig,
  l2OutputOracleABI: () => l2OutputOracleABI,
  l2OutputOracleAddress: () => l2OutputOracleAddress,
  l2OutputOracleConfig: () => l2OutputOracleConfig,
  l2StandardBridgeABI: () => l2StandardBridgeABI,
  l2StandardBridgeAddress: () => l2StandardBridgeAddress,
  l2StandardBridgeConfig: () => l2StandardBridgeConfig,
  l2ToL1MessagePasserABI: () => l2ToL1MessagePasserABI,
  l2ToL1MessagePasserAddress: () => l2ToL1MessagePasserAddress,
  l2ToL1MessagePasserConfig: () => l2ToL1MessagePasserConfig,
  mintManagerABI: () => mintManagerABI,
  mintManagerAddress: () => mintManagerAddress,
  mintManagerConfig: () => mintManagerConfig,
  optimismMintableErc20FactoryABI: () => optimismMintableErc20FactoryABI,
  optimismMintableErc20FactoryAddress: () => optimismMintableErc20FactoryAddress,
  optimismMintableErc20FactoryConfig: () => optimismMintableErc20FactoryConfig,
  optimismMintableErc721FactoryABI: () => optimismMintableErc721FactoryABI,
  optimismMintableErc721FactoryAddress: () => optimismMintableErc721FactoryAddress,
  optimismMintableErc721FactoryConfig: () => optimismMintableErc721FactoryConfig,
  optimismMintableErc721FactoryOptimismGoerliABI: () => optimismMintableErc721FactoryOptimismGoerliABI,
  optimismMintableErc721FactoryOptimismGoerliAddress: () => optimismMintableErc721FactoryOptimismGoerliAddress,
  optimismMintableErc721FactoryOptimismGoerliConfig: () => optimismMintableErc721FactoryOptimismGoerliConfig,
  optimismPortalABI: () => optimismPortalABI,
  optimismPortalAddress: () => optimismPortalAddress,
  optimismPortalConfig: () => optimismPortalConfig,
  optimistABI: () => optimistABI,
  optimistAddress: () => optimistAddress,
  optimistAllowlistABI: () => optimistAllowlistABI,
  optimistAllowlistAddress: () => optimistAllowlistAddress,
  optimistAllowlistConfig: () => optimistAllowlistConfig,
  optimistConfig: () => optimistConfig,
  optimistInviterABI: () => optimistInviterABI,
  optimistInviterAddress: () => optimistInviterAddress,
  optimistInviterConfig: () => optimistInviterConfig,
  portalSenderABI: () => portalSenderABI,
  portalSenderAddress: () => portalSenderAddress,
  portalSenderConfig: () => portalSenderConfig,
  proxyAdminABI: () => proxyAdminABI,
  proxyAdminAddress: () => proxyAdminAddress,
  proxyAdminConfig: () => proxyAdminConfig,
  sequencerFeeVaultABI: () => sequencerFeeVaultABI,
  sequencerFeeVaultAddress: () => sequencerFeeVaultAddress,
  sequencerFeeVaultConfig: () => sequencerFeeVaultConfig,
  systemConfigABI: () => systemConfigABI,
  systemConfigAddress: () => systemConfigAddress,
  systemConfigConfig: () => systemConfigConfig,
  systemDictatorABI: () => systemDictatorABI,
  systemDictatorAddress: () => systemDictatorAddress,
  systemDictatorConfig: () => systemDictatorConfig,
  systemDictatorGoerliABI: () => systemDictatorGoerliABI,
  systemDictatorGoerliAddress: () => systemDictatorGoerliAddress,
  systemDictatorGoerliConfig: () => systemDictatorGoerliConfig,
  teleportrWithdrawerABI: () => teleportrWithdrawerABI,
  teleportrWithdrawerAddress: () => teleportrWithdrawerAddress,
  teleportrWithdrawerConfig: () => teleportrWithdrawerConfig,
  useAddressManagerAddressSetEvent: () => useAddressManagerAddressSetEvent,
  useAddressManagerEvent: () => useAddressManagerEvent,
  useAddressManagerGetAddress: () => useAddressManagerGetAddress,
  useAddressManagerOwner: () => useAddressManagerOwner,
  useAddressManagerOwnershipTransferredEvent: () => useAddressManagerOwnershipTransferredEvent,
  useAddressManagerRead: () => useAddressManagerRead,
  useAddressManagerRenounceOwnership: () => useAddressManagerRenounceOwnership,
  useAddressManagerSetAddress: () => useAddressManagerSetAddress,
  useAddressManagerTransferOwnership: () => useAddressManagerTransferOwnership,
  useAddressManagerWrite: () => useAddressManagerWrite,
  useAssetReceiverCall: () => useAssetReceiverCall,
  useAssetReceiverDelegatecall: () => useAssetReceiverDelegatecall,
  useAssetReceiverEvent: () => useAssetReceiverEvent,
  useAssetReceiverOwner: () => useAssetReceiverOwner,
  useAssetReceiverOwnerUpdatedEvent: () => useAssetReceiverOwnerUpdatedEvent,
  useAssetReceiverRead: () => useAssetReceiverRead,
  useAssetReceiverReceivedEthEvent: () => useAssetReceiverReceivedEthEvent,
  useAssetReceiverSetOwner: () => useAssetReceiverSetOwner,
  useAssetReceiverWithdrawErc20: () => useAssetReceiverWithdrawErc20,
  useAssetReceiverWithdrawErc721: () => useAssetReceiverWithdrawErc721,
  useAssetReceiverWithdrawEth: () => useAssetReceiverWithdrawEth,
  useAssetReceiverWithdrewErc20Event: () => useAssetReceiverWithdrewErc20Event,
  useAssetReceiverWithdrewErc721Event: () => useAssetReceiverWithdrewErc721Event,
  useAssetReceiverWithdrewEthEvent: () => useAssetReceiverWithdrewEthEvent,
  useAssetReceiverWrite: () => useAssetReceiverWrite,
  useAttestationStationAttest: () => useAttestationStationAttest,
  useAttestationStationAttestationCreatedEvent: () => useAttestationStationAttestationCreatedEvent,
  useAttestationStationAttestations: () => useAttestationStationAttestations,
  useAttestationStationEvent: () => useAttestationStationEvent,
  useAttestationStationRead: () => useAttestationStationRead,
  useAttestationStationVersion: () => useAttestationStationVersion,
  useAttestationStationWrite: () => useAttestationStationWrite,
  useBaseFeeVaultEvent: () => useBaseFeeVaultEvent,
  useBaseFeeVaultMinWithdrawalAmount: () => useBaseFeeVaultMinWithdrawalAmount,
  useBaseFeeVaultRead: () => useBaseFeeVaultRead,
  useBaseFeeVaultRecipient: () => useBaseFeeVaultRecipient,
  useBaseFeeVaultTotalProcessed: () => useBaseFeeVaultTotalProcessed,
  useBaseFeeVaultVersion: () => useBaseFeeVaultVersion,
  useBaseFeeVaultWithdraw: () => useBaseFeeVaultWithdraw,
  useBaseFeeVaultWithdrawalEvent: () => useBaseFeeVaultWithdrawalEvent,
  useBaseFeeVaultWrite: () => useBaseFeeVaultWrite,
  useCheckBalanceHighCheck: () => useCheckBalanceHighCheck,
  useCheckBalanceHighEvent: () => useCheckBalanceHighEvent,
  useCheckBalanceHighEventToExposeStructInAbiParamsEvent: () => useCheckBalanceHighEventToExposeStructInAbiParamsEvent,
  useCheckBalanceHighRead: () => useCheckBalanceHighRead,
  useCheckBalanceLowCheck: () => useCheckBalanceLowCheck,
  useCheckBalanceLowEvent: () => useCheckBalanceLowEvent,
  useCheckBalanceLowEventToExposeStructInAbiParamsEvent: () => useCheckBalanceLowEventToExposeStructInAbiParamsEvent,
  useCheckBalanceLowRead: () => useCheckBalanceLowRead,
  useCheckGelatoLowCheck: () => useCheckGelatoLowCheck,
  useCheckGelatoLowEvent: () => useCheckGelatoLowEvent,
  useCheckGelatoLowEventToExposeStructInAbiParamsEvent: () => useCheckGelatoLowEventToExposeStructInAbiParamsEvent,
  useCheckGelatoLowRead: () => useCheckGelatoLowRead,
  useCheckTrueCheck: () => useCheckTrueCheck,
  useCheckTrueRead: () => useCheckTrueRead,
  useDrippieCall: () => useDrippieCall,
  useDrippieCreate: () => useDrippieCreate,
  useDrippieDelegatecall: () => useDrippieDelegatecall,
  useDrippieDrip: () => useDrippieDrip,
  useDrippieDripCreatedEvent: () => useDrippieDripCreatedEvent,
  useDrippieDripExecutedEvent: () => useDrippieDripExecutedEvent,
  useDrippieDripStatusUpdatedEvent: () => useDrippieDripStatusUpdatedEvent,
  useDrippieDrips: () => useDrippieDrips,
  useDrippieEvent: () => useDrippieEvent,
  useDrippieExecutable: () => useDrippieExecutable,
  useDrippieGoerliCall: () => useDrippieGoerliCall,
  useDrippieGoerliCreate: () => useDrippieGoerliCreate,
  useDrippieGoerliDelegatecall: () => useDrippieGoerliDelegatecall,
  useDrippieGoerliDrip: () => useDrippieGoerliDrip,
  useDrippieGoerliDripCreatedEvent: () => useDrippieGoerliDripCreatedEvent,
  useDrippieGoerliDripExecutedEvent: () => useDrippieGoerliDripExecutedEvent,
  useDrippieGoerliDripStatusUpdatedEvent: () => useDrippieGoerliDripStatusUpdatedEvent,
  useDrippieGoerliDrips: () => useDrippieGoerliDrips,
  useDrippieGoerliEvent: () => useDrippieGoerliEvent,
  useDrippieGoerliExecutable: () => useDrippieGoerliExecutable,
  useDrippieGoerliOwner: () => useDrippieGoerliOwner,
  useDrippieGoerliOwnerUpdatedEvent: () => useDrippieGoerliOwnerUpdatedEvent,
  useDrippieGoerliRead: () => useDrippieGoerliRead,
  useDrippieGoerliReceivedEthEvent: () => useDrippieGoerliReceivedEthEvent,
  useDrippieGoerliSetOwner: () => useDrippieGoerliSetOwner,
  useDrippieGoerliStatus: () => useDrippieGoerliStatus,
  useDrippieGoerliWithdrawErc20: () => useDrippieGoerliWithdrawErc20,
  useDrippieGoerliWithdrawErc721: () => useDrippieGoerliWithdrawErc721,
  useDrippieGoerliWithdrawEth: () => useDrippieGoerliWithdrawEth,
  useDrippieGoerliWithdrewErc20Event: () => useDrippieGoerliWithdrewErc20Event,
  useDrippieGoerliWithdrewErc721Event: () => useDrippieGoerliWithdrewErc721Event,
  useDrippieGoerliWithdrewEthEvent: () => useDrippieGoerliWithdrewEthEvent,
  useDrippieGoerliWrite: () => useDrippieGoerliWrite,
  useDrippieOptimismGoerliCall: () => useDrippieOptimismGoerliCall,
  useDrippieOptimismGoerliCreate: () => useDrippieOptimismGoerliCreate,
  useDrippieOptimismGoerliDelegatecall: () => useDrippieOptimismGoerliDelegatecall,
  useDrippieOptimismGoerliDrip: () => useDrippieOptimismGoerliDrip,
  useDrippieOptimismGoerliDripCreatedEvent: () => useDrippieOptimismGoerliDripCreatedEvent,
  useDrippieOptimismGoerliDripExecutedEvent: () => useDrippieOptimismGoerliDripExecutedEvent,
  useDrippieOptimismGoerliDripStatusUpdatedEvent: () => useDrippieOptimismGoerliDripStatusUpdatedEvent,
  useDrippieOptimismGoerliDrips: () => useDrippieOptimismGoerliDrips,
  useDrippieOptimismGoerliEvent: () => useDrippieOptimismGoerliEvent,
  useDrippieOptimismGoerliExecutable: () => useDrippieOptimismGoerliExecutable,
  useDrippieOptimismGoerliOwner: () => useDrippieOptimismGoerliOwner,
  useDrippieOptimismGoerliOwnerUpdatedEvent: () => useDrippieOptimismGoerliOwnerUpdatedEvent,
  useDrippieOptimismGoerliRead: () => useDrippieOptimismGoerliRead,
  useDrippieOptimismGoerliReceivedEthEvent: () => useDrippieOptimismGoerliReceivedEthEvent,
  useDrippieOptimismGoerliSetOwner: () => useDrippieOptimismGoerliSetOwner,
  useDrippieOptimismGoerliStatus: () => useDrippieOptimismGoerliStatus,
  useDrippieOptimismGoerliWithdrawErc20: () => useDrippieOptimismGoerliWithdrawErc20,
  useDrippieOptimismGoerliWithdrawErc721: () => useDrippieOptimismGoerliWithdrawErc721,
  useDrippieOptimismGoerliWithdrawEth: () => useDrippieOptimismGoerliWithdrawEth,
  useDrippieOptimismGoerliWithdrewErc20Event: () => useDrippieOptimismGoerliWithdrewErc20Event,
  useDrippieOptimismGoerliWithdrewErc721Event: () => useDrippieOptimismGoerliWithdrewErc721Event,
  useDrippieOptimismGoerliWithdrewEthEvent: () => useDrippieOptimismGoerliWithdrewEthEvent,
  useDrippieOptimismGoerliWrite: () => useDrippieOptimismGoerliWrite,
  useDrippieOwner: () => useDrippieOwner,
  useDrippieOwnerUpdatedEvent: () => useDrippieOwnerUpdatedEvent,
  useDrippieRead: () => useDrippieRead,
  useDrippieReceivedEthEvent: () => useDrippieReceivedEthEvent,
  useDrippieSetOwner: () => useDrippieSetOwner,
  useDrippieStatus: () => useDrippieStatus,
  useDrippieWithdrawErc20: () => useDrippieWithdrawErc20,
  useDrippieWithdrawErc721: () => useDrippieWithdrawErc721,
  useDrippieWithdrawEth: () => useDrippieWithdrawEth,
  useDrippieWithdrewErc20Event: () => useDrippieWithdrewErc20Event,
  useDrippieWithdrewErc721Event: () => useDrippieWithdrewErc721Event,
  useDrippieWithdrewEthEvent: () => useDrippieWithdrewEthEvent,
  useDrippieWrite: () => useDrippieWrite,
  useGasPriceOracleBaseFee: () => useGasPriceOracleBaseFee,
  useGasPriceOracleDecimals: () => useGasPriceOracleDecimals,
  useGasPriceOracleGasPrice: () => useGasPriceOracleGasPrice,
  useGasPriceOracleGetL1Fee: () => useGasPriceOracleGetL1Fee,
  useGasPriceOracleGetL1GasUsed: () => useGasPriceOracleGetL1GasUsed,
  useGasPriceOracleL1BaseFee: () => useGasPriceOracleL1BaseFee,
  useGasPriceOracleOverhead: () => useGasPriceOracleOverhead,
  useGasPriceOracleRead: () => useGasPriceOracleRead,
  useGasPriceOracleScalar: () => useGasPriceOracleScalar,
  useGasPriceOracleVersion: () => useGasPriceOracleVersion,
  useL1BlockBasefee: () => useL1BlockBasefee,
  useL1BlockBatcherHash: () => useL1BlockBatcherHash,
  useL1BlockDepositorAccount: () => useL1BlockDepositorAccount,
  useL1BlockHash: () => useL1BlockHash,
  useL1BlockL1FeeOverhead: () => useL1BlockL1FeeOverhead,
  useL1BlockL1FeeScalar: () => useL1BlockL1FeeScalar,
  useL1BlockNumber: () => useL1BlockNumber,
  useL1BlockRead: () => useL1BlockRead,
  useL1BlockSequenceNumber: () => useL1BlockSequenceNumber,
  useL1BlockSetL1BlockValues: () => useL1BlockSetL1BlockValues,
  useL1BlockTimestamp: () => useL1BlockTimestamp,
  useL1BlockVersion: () => useL1BlockVersion,
  useL1BlockWrite: () => useL1BlockWrite,
  useL1CrossDomainMessengerBaseGas: () => useL1CrossDomainMessengerBaseGas,
  useL1CrossDomainMessengerEvent: () => useL1CrossDomainMessengerEvent,
  useL1CrossDomainMessengerFailedMessages: () => useL1CrossDomainMessengerFailedMessages,
  useL1CrossDomainMessengerFailedRelayedMessageEvent: () => useL1CrossDomainMessengerFailedRelayedMessageEvent,
  useL1CrossDomainMessengerInitialize: () => useL1CrossDomainMessengerInitialize,
  useL1CrossDomainMessengerInitializedEvent: () => useL1CrossDomainMessengerInitializedEvent,
  useL1CrossDomainMessengerMessageNonce: () => useL1CrossDomainMessengerMessageNonce,
  useL1CrossDomainMessengerMessageVersion: () => useL1CrossDomainMessengerMessageVersion,
  useL1CrossDomainMessengerMinGasCalldataOverhead: () => useL1CrossDomainMessengerMinGasCalldataOverhead,
  useL1CrossDomainMessengerMinGasDynamicOverheadDenominator: () => useL1CrossDomainMessengerMinGasDynamicOverheadDenominator,
  useL1CrossDomainMessengerMinGasDynamicOverheadNumerator: () => useL1CrossDomainMessengerMinGasDynamicOverheadNumerator,
  useL1CrossDomainMessengerOtherMessenger: () => useL1CrossDomainMessengerOtherMessenger,
  useL1CrossDomainMessengerPortal: () => useL1CrossDomainMessengerPortal,
  useL1CrossDomainMessengerRead: () => useL1CrossDomainMessengerRead,
  useL1CrossDomainMessengerRelayCallOverhead: () => useL1CrossDomainMessengerRelayCallOverhead,
  useL1CrossDomainMessengerRelayConstantOverhead: () => useL1CrossDomainMessengerRelayConstantOverhead,
  useL1CrossDomainMessengerRelayGasCheckBuffer: () => useL1CrossDomainMessengerRelayGasCheckBuffer,
  useL1CrossDomainMessengerRelayMessage: () => useL1CrossDomainMessengerRelayMessage,
  useL1CrossDomainMessengerRelayReservedGas: () => useL1CrossDomainMessengerRelayReservedGas,
  useL1CrossDomainMessengerRelayedMessageEvent: () => useL1CrossDomainMessengerRelayedMessageEvent,
  useL1CrossDomainMessengerSendMessage: () => useL1CrossDomainMessengerSendMessage,
  useL1CrossDomainMessengerSentMessageEvent: () => useL1CrossDomainMessengerSentMessageEvent,
  useL1CrossDomainMessengerSentMessageExtension1Event: () => useL1CrossDomainMessengerSentMessageExtension1Event,
  useL1CrossDomainMessengerSuccessfulMessages: () => useL1CrossDomainMessengerSuccessfulMessages,
  useL1CrossDomainMessengerVersion: () => useL1CrossDomainMessengerVersion,
  useL1CrossDomainMessengerWrite: () => useL1CrossDomainMessengerWrite,
  useL1CrossDomainMessengerXDomainMessageSender: () => useL1CrossDomainMessengerXDomainMessageSender,
  useL1Erc721BridgeBridgeErc721: () => useL1Erc721BridgeBridgeErc721,
  useL1Erc721BridgeBridgeErc721To: () => useL1Erc721BridgeBridgeErc721To,
  useL1Erc721BridgeDeposits: () => useL1Erc721BridgeDeposits,
  useL1Erc721BridgeErc721BridgeFinalizedEvent: () => useL1Erc721BridgeErc721BridgeFinalizedEvent,
  useL1Erc721BridgeErc721BridgeInitiatedEvent: () => useL1Erc721BridgeErc721BridgeInitiatedEvent,
  useL1Erc721BridgeEvent: () => useL1Erc721BridgeEvent,
  useL1Erc721BridgeFinalizeBridgeErc721: () => useL1Erc721BridgeFinalizeBridgeErc721,
  useL1Erc721BridgeMessenger: () => useL1Erc721BridgeMessenger,
  useL1Erc721BridgeOtherBridge: () => useL1Erc721BridgeOtherBridge,
  useL1Erc721BridgeRead: () => useL1Erc721BridgeRead,
  useL1Erc721BridgeVersion: () => useL1Erc721BridgeVersion,
  useL1Erc721BridgeWrite: () => useL1Erc721BridgeWrite,
  useL1FeeVaultEvent: () => useL1FeeVaultEvent,
  useL1FeeVaultMinWithdrawalAmount: () => useL1FeeVaultMinWithdrawalAmount,
  useL1FeeVaultRead: () => useL1FeeVaultRead,
  useL1FeeVaultRecipient: () => useL1FeeVaultRecipient,
  useL1FeeVaultTotalProcessed: () => useL1FeeVaultTotalProcessed,
  useL1FeeVaultVersion: () => useL1FeeVaultVersion,
  useL1FeeVaultWithdraw: () => useL1FeeVaultWithdraw,
  useL1FeeVaultWithdrawalEvent: () => useL1FeeVaultWithdrawalEvent,
  useL1FeeVaultWrite: () => useL1FeeVaultWrite,
  useL1StandardBridgeBridgeErc20: () => useL1StandardBridgeBridgeErc20,
  useL1StandardBridgeBridgeErc20To: () => useL1StandardBridgeBridgeErc20To,
  useL1StandardBridgeBridgeEth: () => useL1StandardBridgeBridgeEth,
  useL1StandardBridgeBridgeEthTo: () => useL1StandardBridgeBridgeEthTo,
  useL1StandardBridgeDepositErc20: () => useL1StandardBridgeDepositErc20,
  useL1StandardBridgeDepositErc20To: () => useL1StandardBridgeDepositErc20To,
  useL1StandardBridgeDepositEth: () => useL1StandardBridgeDepositEth,
  useL1StandardBridgeDepositEthTo: () => useL1StandardBridgeDepositEthTo,
  useL1StandardBridgeDeposits: () => useL1StandardBridgeDeposits,
  useL1StandardBridgeErc20BridgeFinalizedEvent: () => useL1StandardBridgeErc20BridgeFinalizedEvent,
  useL1StandardBridgeErc20BridgeInitiatedEvent: () => useL1StandardBridgeErc20BridgeInitiatedEvent,
  useL1StandardBridgeErc20DepositInitiatedEvent: () => useL1StandardBridgeErc20DepositInitiatedEvent,
  useL1StandardBridgeErc20WithdrawalFinalizedEvent: () => useL1StandardBridgeErc20WithdrawalFinalizedEvent,
  useL1StandardBridgeEthBridgeFinalizedEvent: () => useL1StandardBridgeEthBridgeFinalizedEvent,
  useL1StandardBridgeEthBridgeInitiatedEvent: () => useL1StandardBridgeEthBridgeInitiatedEvent,
  useL1StandardBridgeEthDepositInitiatedEvent: () => useL1StandardBridgeEthDepositInitiatedEvent,
  useL1StandardBridgeEthWithdrawalFinalizedEvent: () => useL1StandardBridgeEthWithdrawalFinalizedEvent,
  useL1StandardBridgeEvent: () => useL1StandardBridgeEvent,
  useL1StandardBridgeFinalizeBridgeErc20: () => useL1StandardBridgeFinalizeBridgeErc20,
  useL1StandardBridgeFinalizeBridgeEth: () => useL1StandardBridgeFinalizeBridgeEth,
  useL1StandardBridgeFinalizeErc20Withdrawal: () => useL1StandardBridgeFinalizeErc20Withdrawal,
  useL1StandardBridgeFinalizeEthWithdrawal: () => useL1StandardBridgeFinalizeEthWithdrawal,
  useL1StandardBridgeL2TokenBridge: () => useL1StandardBridgeL2TokenBridge,
  useL1StandardBridgeMessenger: () => useL1StandardBridgeMessenger,
  useL1StandardBridgeRead: () => useL1StandardBridgeRead,
  useL1StandardBridgeVersion: () => useL1StandardBridgeVersion,
  useL1StandardBridgeWrite: () => useL1StandardBridgeWrite,
  useL2CrossDomainMessengerBaseGas: () => useL2CrossDomainMessengerBaseGas,
  useL2CrossDomainMessengerEvent: () => useL2CrossDomainMessengerEvent,
  useL2CrossDomainMessengerFailedMessages: () => useL2CrossDomainMessengerFailedMessages,
  useL2CrossDomainMessengerFailedRelayedMessageEvent: () => useL2CrossDomainMessengerFailedRelayedMessageEvent,
  useL2CrossDomainMessengerInitialize: () => useL2CrossDomainMessengerInitialize,
  useL2CrossDomainMessengerInitializedEvent: () => useL2CrossDomainMessengerInitializedEvent,
  useL2CrossDomainMessengerL1CrossDomainMessenger: () => useL2CrossDomainMessengerL1CrossDomainMessenger,
  useL2CrossDomainMessengerMessageNonce: () => useL2CrossDomainMessengerMessageNonce,
  useL2CrossDomainMessengerMessageVersion: () => useL2CrossDomainMessengerMessageVersion,
  useL2CrossDomainMessengerMinGasCalldataOverhead: () => useL2CrossDomainMessengerMinGasCalldataOverhead,
  useL2CrossDomainMessengerMinGasDynamicOverheadDenominator: () => useL2CrossDomainMessengerMinGasDynamicOverheadDenominator,
  useL2CrossDomainMessengerMinGasDynamicOverheadNumerator: () => useL2CrossDomainMessengerMinGasDynamicOverheadNumerator,
  useL2CrossDomainMessengerOtherMessenger: () => useL2CrossDomainMessengerOtherMessenger,
  useL2CrossDomainMessengerRead: () => useL2CrossDomainMessengerRead,
  useL2CrossDomainMessengerRelayCallOverhead: () => useL2CrossDomainMessengerRelayCallOverhead,
  useL2CrossDomainMessengerRelayConstantOverhead: () => useL2CrossDomainMessengerRelayConstantOverhead,
  useL2CrossDomainMessengerRelayGasCheckBuffer: () => useL2CrossDomainMessengerRelayGasCheckBuffer,
  useL2CrossDomainMessengerRelayMessage: () => useL2CrossDomainMessengerRelayMessage,
  useL2CrossDomainMessengerRelayReservedGas: () => useL2CrossDomainMessengerRelayReservedGas,
  useL2CrossDomainMessengerRelayedMessageEvent: () => useL2CrossDomainMessengerRelayedMessageEvent,
  useL2CrossDomainMessengerSendMessage: () => useL2CrossDomainMessengerSendMessage,
  useL2CrossDomainMessengerSentMessageEvent: () => useL2CrossDomainMessengerSentMessageEvent,
  useL2CrossDomainMessengerSentMessageExtension1Event: () => useL2CrossDomainMessengerSentMessageExtension1Event,
  useL2CrossDomainMessengerSuccessfulMessages: () => useL2CrossDomainMessengerSuccessfulMessages,
  useL2CrossDomainMessengerVersion: () => useL2CrossDomainMessengerVersion,
  useL2CrossDomainMessengerWrite: () => useL2CrossDomainMessengerWrite,
  useL2CrossDomainMessengerXDomainMessageSender: () => useL2CrossDomainMessengerXDomainMessageSender,
  useL2Erc721BridgeBridgeErc721: () => useL2Erc721BridgeBridgeErc721,
  useL2Erc721BridgeBridgeErc721To: () => useL2Erc721BridgeBridgeErc721To,
  useL2Erc721BridgeErc721BridgeFinalizedEvent: () => useL2Erc721BridgeErc721BridgeFinalizedEvent,
  useL2Erc721BridgeErc721BridgeInitiatedEvent: () => useL2Erc721BridgeErc721BridgeInitiatedEvent,
  useL2Erc721BridgeEvent: () => useL2Erc721BridgeEvent,
  useL2Erc721BridgeFinalizeBridgeErc721: () => useL2Erc721BridgeFinalizeBridgeErc721,
  useL2Erc721BridgeMessenger: () => useL2Erc721BridgeMessenger,
  useL2Erc721BridgeOtherBridge: () => useL2Erc721BridgeOtherBridge,
  useL2Erc721BridgeRead: () => useL2Erc721BridgeRead,
  useL2Erc721BridgeVersion: () => useL2Erc721BridgeVersion,
  useL2Erc721BridgeWrite: () => useL2Erc721BridgeWrite,
  useL2OutputOracleChallenger: () => useL2OutputOracleChallenger,
  useL2OutputOracleComputeL2Timestamp: () => useL2OutputOracleComputeL2Timestamp,
  useL2OutputOracleDeleteL2Outputs: () => useL2OutputOracleDeleteL2Outputs,
  useL2OutputOracleEvent: () => useL2OutputOracleEvent,
  useL2OutputOracleFinalizationPeriodSeconds: () => useL2OutputOracleFinalizationPeriodSeconds,
  useL2OutputOracleGetL2Output: () => useL2OutputOracleGetL2Output,
  useL2OutputOracleGetL2OutputAfter: () => useL2OutputOracleGetL2OutputAfter,
  useL2OutputOracleGetL2OutputIndexAfter: () => useL2OutputOracleGetL2OutputIndexAfter,
  useL2OutputOracleInitialize: () => useL2OutputOracleInitialize,
  useL2OutputOracleInitializedEvent: () => useL2OutputOracleInitializedEvent,
  useL2OutputOracleL2BlockTime: () => useL2OutputOracleL2BlockTime,
  useL2OutputOracleLatestBlockNumber: () => useL2OutputOracleLatestBlockNumber,
  useL2OutputOracleLatestOutputIndex: () => useL2OutputOracleLatestOutputIndex,
  useL2OutputOracleNextBlockNumber: () => useL2OutputOracleNextBlockNumber,
  useL2OutputOracleNextOutputIndex: () => useL2OutputOracleNextOutputIndex,
  useL2OutputOracleOutputProposedEvent: () => useL2OutputOracleOutputProposedEvent,
  useL2OutputOracleOutputsDeletedEvent: () => useL2OutputOracleOutputsDeletedEvent,
  useL2OutputOracleProposeL2Output: () => useL2OutputOracleProposeL2Output,
  useL2OutputOracleProposer: () => useL2OutputOracleProposer,
  useL2OutputOracleRead: () => useL2OutputOracleRead,
  useL2OutputOracleStartingBlockNumber: () => useL2OutputOracleStartingBlockNumber,
  useL2OutputOracleStartingTimestamp: () => useL2OutputOracleStartingTimestamp,
  useL2OutputOracleSubmissionInterval: () => useL2OutputOracleSubmissionInterval,
  useL2OutputOracleVersion: () => useL2OutputOracleVersion,
  useL2OutputOracleWrite: () => useL2OutputOracleWrite,
  useL2StandardBridgeBridgeErc20: () => useL2StandardBridgeBridgeErc20,
  useL2StandardBridgeBridgeErc20To: () => useL2StandardBridgeBridgeErc20To,
  useL2StandardBridgeBridgeEth: () => useL2StandardBridgeBridgeEth,
  useL2StandardBridgeBridgeEthTo: () => useL2StandardBridgeBridgeEthTo,
  useL2StandardBridgeDepositFinalizedEvent: () => useL2StandardBridgeDepositFinalizedEvent,
  useL2StandardBridgeDeposits: () => useL2StandardBridgeDeposits,
  useL2StandardBridgeErc20BridgeFinalizedEvent: () => useL2StandardBridgeErc20BridgeFinalizedEvent,
  useL2StandardBridgeErc20BridgeInitiatedEvent: () => useL2StandardBridgeErc20BridgeInitiatedEvent,
  useL2StandardBridgeEthBridgeFinalizedEvent: () => useL2StandardBridgeEthBridgeFinalizedEvent,
  useL2StandardBridgeEthBridgeInitiatedEvent: () => useL2StandardBridgeEthBridgeInitiatedEvent,
  useL2StandardBridgeEvent: () => useL2StandardBridgeEvent,
  useL2StandardBridgeFinalizeBridgeErc20: () => useL2StandardBridgeFinalizeBridgeErc20,
  useL2StandardBridgeFinalizeBridgeEth: () => useL2StandardBridgeFinalizeBridgeEth,
  useL2StandardBridgeFinalizeDeposit: () => useL2StandardBridgeFinalizeDeposit,
  useL2StandardBridgeL1TokenBridge: () => useL2StandardBridgeL1TokenBridge,
  useL2StandardBridgeMessenger: () => useL2StandardBridgeMessenger,
  useL2StandardBridgeRead: () => useL2StandardBridgeRead,
  useL2StandardBridgeVersion: () => useL2StandardBridgeVersion,
  useL2StandardBridgeWithdraw: () => useL2StandardBridgeWithdraw,
  useL2StandardBridgeWithdrawTo: () => useL2StandardBridgeWithdrawTo,
  useL2StandardBridgeWithdrawalInitiatedEvent: () => useL2StandardBridgeWithdrawalInitiatedEvent,
  useL2StandardBridgeWrite: () => useL2StandardBridgeWrite,
  useL2ToL1MessagePasserBurn: () => useL2ToL1MessagePasserBurn,
  useL2ToL1MessagePasserEvent: () => useL2ToL1MessagePasserEvent,
  useL2ToL1MessagePasserInitiateWithdrawal: () => useL2ToL1MessagePasserInitiateWithdrawal,
  useL2ToL1MessagePasserMessageNonce: () => useL2ToL1MessagePasserMessageNonce,
  useL2ToL1MessagePasserMessagePassedEvent: () => useL2ToL1MessagePasserMessagePassedEvent,
  useL2ToL1MessagePasserMessageVersion: () => useL2ToL1MessagePasserMessageVersion,
  useL2ToL1MessagePasserRead: () => useL2ToL1MessagePasserRead,
  useL2ToL1MessagePasserSentMessages: () => useL2ToL1MessagePasserSentMessages,
  useL2ToL1MessagePasserVersion: () => useL2ToL1MessagePasserVersion,
  useL2ToL1MessagePasserWithdrawerBalanceBurntEvent: () => useL2ToL1MessagePasserWithdrawerBalanceBurntEvent,
  useL2ToL1MessagePasserWrite: () => useL2ToL1MessagePasserWrite,
  useMintManagerDenominator: () => useMintManagerDenominator,
  useMintManagerEvent: () => useMintManagerEvent,
  useMintManagerGovernanceToken: () => useMintManagerGovernanceToken,
  useMintManagerMint: () => useMintManagerMint,
  useMintManagerMintCap: () => useMintManagerMintCap,
  useMintManagerMintPeriod: () => useMintManagerMintPeriod,
  useMintManagerMintPermittedAfter: () => useMintManagerMintPermittedAfter,
  useMintManagerOwner: () => useMintManagerOwner,
  useMintManagerOwnershipTransferredEvent: () => useMintManagerOwnershipTransferredEvent,
  useMintManagerRead: () => useMintManagerRead,
  useMintManagerRenounceOwnership: () => useMintManagerRenounceOwnership,
  useMintManagerTransferOwnership: () => useMintManagerTransferOwnership,
  useMintManagerUpgrade: () => useMintManagerUpgrade,
  useMintManagerWrite: () => useMintManagerWrite,
  useOptimismMintableErc20FactoryBridge: () => useOptimismMintableErc20FactoryBridge,
  useOptimismMintableErc20FactoryCreateOptimismMintableErc20: () => useOptimismMintableErc20FactoryCreateOptimismMintableErc20,
  useOptimismMintableErc20FactoryCreateStandardL2Token: () => useOptimismMintableErc20FactoryCreateStandardL2Token,
  useOptimismMintableErc20FactoryEvent: () => useOptimismMintableErc20FactoryEvent,
  useOptimismMintableErc20FactoryOptimismMintableErc20CreatedEvent: () => useOptimismMintableErc20FactoryOptimismMintableErc20CreatedEvent,
  useOptimismMintableErc20FactoryRead: () => useOptimismMintableErc20FactoryRead,
  useOptimismMintableErc20FactoryStandardL2TokenCreatedEvent: () => useOptimismMintableErc20FactoryStandardL2TokenCreatedEvent,
  useOptimismMintableErc20FactoryVersion: () => useOptimismMintableErc20FactoryVersion,
  useOptimismMintableErc20FactoryWrite: () => useOptimismMintableErc20FactoryWrite,
  useOptimismMintableErc721FactoryBridge: () => useOptimismMintableErc721FactoryBridge,
  useOptimismMintableErc721FactoryCreateOptimismMintableErc721: () => useOptimismMintableErc721FactoryCreateOptimismMintableErc721,
  useOptimismMintableErc721FactoryEvent: () => useOptimismMintableErc721FactoryEvent,
  useOptimismMintableErc721FactoryIsOptimismMintableErc721: () => useOptimismMintableErc721FactoryIsOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliBridge: () => useOptimismMintableErc721FactoryOptimismGoerliBridge,
  useOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721: () => useOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliEvent: () => useOptimismMintableErc721FactoryOptimismGoerliEvent,
  useOptimismMintableErc721FactoryOptimismGoerliIsOptimismMintableErc721: () => useOptimismMintableErc721FactoryOptimismGoerliIsOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliOptimismMintableErc721CreatedEvent: () => useOptimismMintableErc721FactoryOptimismGoerliOptimismMintableErc721CreatedEvent,
  useOptimismMintableErc721FactoryOptimismGoerliRead: () => useOptimismMintableErc721FactoryOptimismGoerliRead,
  useOptimismMintableErc721FactoryOptimismGoerliRemoteChainId: () => useOptimismMintableErc721FactoryOptimismGoerliRemoteChainId,
  useOptimismMintableErc721FactoryOptimismGoerliVersion: () => useOptimismMintableErc721FactoryOptimismGoerliVersion,
  useOptimismMintableErc721FactoryOptimismGoerliWrite: () => useOptimismMintableErc721FactoryOptimismGoerliWrite,
  useOptimismMintableErc721FactoryOptimismMintableErc721CreatedEvent: () => useOptimismMintableErc721FactoryOptimismMintableErc721CreatedEvent,
  useOptimismMintableErc721FactoryRead: () => useOptimismMintableErc721FactoryRead,
  useOptimismMintableErc721FactoryRemoteChainId: () => useOptimismMintableErc721FactoryRemoteChainId,
  useOptimismMintableErc721FactoryVersion: () => useOptimismMintableErc721FactoryVersion,
  useOptimismMintableErc721FactoryWrite: () => useOptimismMintableErc721FactoryWrite,
  useOptimismPortalDepositTransaction: () => useOptimismPortalDepositTransaction,
  useOptimismPortalDonateEth: () => useOptimismPortalDonateEth,
  useOptimismPortalEvent: () => useOptimismPortalEvent,
  useOptimismPortalFinalizeWithdrawalTransaction: () => useOptimismPortalFinalizeWithdrawalTransaction,
  useOptimismPortalFinalizedWithdrawals: () => useOptimismPortalFinalizedWithdrawals,
  useOptimismPortalGuardian: () => useOptimismPortalGuardian,
  useOptimismPortalInitialize: () => useOptimismPortalInitialize,
  useOptimismPortalInitializedEvent: () => useOptimismPortalInitializedEvent,
  useOptimismPortalIsOutputFinalized: () => useOptimismPortalIsOutputFinalized,
  useOptimismPortalL2Oracle: () => useOptimismPortalL2Oracle,
  useOptimismPortalL2Sender: () => useOptimismPortalL2Sender,
  useOptimismPortalMinimumGasLimit: () => useOptimismPortalMinimumGasLimit,
  useOptimismPortalParams: () => useOptimismPortalParams,
  useOptimismPortalPause: () => useOptimismPortalPause,
  useOptimismPortalPaused: () => useOptimismPortalPaused,
  useOptimismPortalPausedEvent: () => useOptimismPortalPausedEvent,
  useOptimismPortalProveWithdrawalTransaction: () => useOptimismPortalProveWithdrawalTransaction,
  useOptimismPortalProvenWithdrawals: () => useOptimismPortalProvenWithdrawals,
  useOptimismPortalRead: () => useOptimismPortalRead,
  useOptimismPortalSystemConfig: () => useOptimismPortalSystemConfig,
  useOptimismPortalTransactionDepositedEvent: () => useOptimismPortalTransactionDepositedEvent,
  useOptimismPortalUnpause: () => useOptimismPortalUnpause,
  useOptimismPortalUnpausedEvent: () => useOptimismPortalUnpausedEvent,
  useOptimismPortalVersion: () => useOptimismPortalVersion,
  useOptimismPortalWithdrawalFinalizedEvent: () => useOptimismPortalWithdrawalFinalizedEvent,
  useOptimismPortalWithdrawalProvenEvent: () => useOptimismPortalWithdrawalProvenEvent,
  useOptimismPortalWrite: () => useOptimismPortalWrite,
  useOptimistAllowlistAllowlistAttestor: () => useOptimistAllowlistAllowlistAttestor,
  useOptimistAllowlistAttestationStation: () => useOptimistAllowlistAttestationStation,
  useOptimistAllowlistCoinbaseQuestAttestor: () => useOptimistAllowlistCoinbaseQuestAttestor,
  useOptimistAllowlistCoinbaseQuestEligibleAttestationKey: () => useOptimistAllowlistCoinbaseQuestEligibleAttestationKey,
  useOptimistAllowlistIsAllowedToMint: () => useOptimistAllowlistIsAllowedToMint,
  useOptimistAllowlistOptimistCanMintAttestationKey: () => useOptimistAllowlistOptimistCanMintAttestationKey,
  useOptimistAllowlistOptimistInviter: () => useOptimistAllowlistOptimistInviter,
  useOptimistAllowlistRead: () => useOptimistAllowlistRead,
  useOptimistAllowlistVersion: () => useOptimistAllowlistVersion,
  useOptimistApprovalEvent: () => useOptimistApprovalEvent,
  useOptimistApprovalForAllEvent: () => useOptimistApprovalForAllEvent,
  useOptimistApprove: () => useOptimistApprove,
  useOptimistAttestationStation: () => useOptimistAttestationStation,
  useOptimistBalanceOf: () => useOptimistBalanceOf,
  useOptimistBaseUri: () => useOptimistBaseUri,
  useOptimistBaseUriAttestationKey: () => useOptimistBaseUriAttestationKey,
  useOptimistBaseUriAttestor: () => useOptimistBaseUriAttestor,
  useOptimistBurn: () => useOptimistBurn,
  useOptimistEvent: () => useOptimistEvent,
  useOptimistGetApproved: () => useOptimistGetApproved,
  useOptimistInitialize: () => useOptimistInitialize,
  useOptimistInitializedEvent: () => useOptimistInitializedEvent,
  useOptimistInviterAttestationStation: () => useOptimistInviterAttestationStation,
  useOptimistInviterCanInviteAttestationKey: () => useOptimistInviterCanInviteAttestationKey,
  useOptimistInviterClaimInvite: () => useOptimistInviterClaimInvite,
  useOptimistInviterClaimableInviteTypehash: () => useOptimistInviterClaimableInviteTypehash,
  useOptimistInviterCommitInvite: () => useOptimistInviterCommitInvite,
  useOptimistInviterCommitmentTimestamps: () => useOptimistInviterCommitmentTimestamps,
  useOptimistInviterEip712Version: () => useOptimistInviterEip712Version,
  useOptimistInviterEvent: () => useOptimistInviterEvent,
  useOptimistInviterInitialize: () => useOptimistInviterInitialize,
  useOptimistInviterInitializedEvent: () => useOptimistInviterInitializedEvent,
  useOptimistInviterInviteClaimedEvent: () => useOptimistInviterInviteClaimedEvent,
  useOptimistInviterInviteCounts: () => useOptimistInviterInviteCounts,
  useOptimistInviterInviteGranter: () => useOptimistInviterInviteGranter,
  useOptimistInviterMinCommitmentPeriod: () => useOptimistInviterMinCommitmentPeriod,
  useOptimistInviterRead: () => useOptimistInviterRead,
  useOptimistInviterSetInviteCounts: () => useOptimistInviterSetInviteCounts,
  useOptimistInviterUsedNonces: () => useOptimistInviterUsedNonces,
  useOptimistInviterVersion: () => useOptimistInviterVersion,
  useOptimistInviterWrite: () => useOptimistInviterWrite,
  useOptimistIsApprovedForAll: () => useOptimistIsApprovedForAll,
  useOptimistIsOnAllowList: () => useOptimistIsOnAllowList,
  useOptimistMint: () => useOptimistMint,
  useOptimistName: () => useOptimistName,
  useOptimistOptimistAllowlist: () => useOptimistOptimistAllowlist,
  useOptimistOwnerOf: () => useOptimistOwnerOf,
  useOptimistRead: () => useOptimistRead,
  useOptimistSafeTransferFrom: () => useOptimistSafeTransferFrom,
  useOptimistSetApprovalForAll: () => useOptimistSetApprovalForAll,
  useOptimistSupportsInterface: () => useOptimistSupportsInterface,
  useOptimistSymbol: () => useOptimistSymbol,
  useOptimistTokenIdOfAddress: () => useOptimistTokenIdOfAddress,
  useOptimistTokenUri: () => useOptimistTokenUri,
  useOptimistTransferEvent: () => useOptimistTransferEvent,
  useOptimistTransferFrom: () => useOptimistTransferFrom,
  useOptimistVersion: () => useOptimistVersion,
  useOptimistWrite: () => useOptimistWrite,
  usePortalSenderDonate: () => usePortalSenderDonate,
  usePortalSenderPortal: () => usePortalSenderPortal,
  usePortalSenderRead: () => usePortalSenderRead,
  usePortalSenderWrite: () => usePortalSenderWrite,
  usePrepareAddressManagerRenounceOwnership: () => usePrepareAddressManagerRenounceOwnership,
  usePrepareAddressManagerSetAddress: () => usePrepareAddressManagerSetAddress,
  usePrepareAddressManagerTransferOwnership: () => usePrepareAddressManagerTransferOwnership,
  usePrepareAddressManagerWrite: () => usePrepareAddressManagerWrite,
  usePrepareAssetReceiverCall: () => usePrepareAssetReceiverCall,
  usePrepareAssetReceiverDelegatecall: () => usePrepareAssetReceiverDelegatecall,
  usePrepareAssetReceiverSetOwner: () => usePrepareAssetReceiverSetOwner,
  usePrepareAssetReceiverWithdrawErc20: () => usePrepareAssetReceiverWithdrawErc20,
  usePrepareAssetReceiverWithdrawErc721: () => usePrepareAssetReceiverWithdrawErc721,
  usePrepareAssetReceiverWithdrawEth: () => usePrepareAssetReceiverWithdrawEth,
  usePrepareAssetReceiverWrite: () => usePrepareAssetReceiverWrite,
  usePrepareAttestationStationAttest: () => usePrepareAttestationStationAttest,
  usePrepareAttestationStationWrite: () => usePrepareAttestationStationWrite,
  usePrepareBaseFeeVaultWithdraw: () => usePrepareBaseFeeVaultWithdraw,
  usePrepareBaseFeeVaultWrite: () => usePrepareBaseFeeVaultWrite,
  usePrepareDrippieCall: () => usePrepareDrippieCall,
  usePrepareDrippieCreate: () => usePrepareDrippieCreate,
  usePrepareDrippieDelegatecall: () => usePrepareDrippieDelegatecall,
  usePrepareDrippieDrip: () => usePrepareDrippieDrip,
  usePrepareDrippieGoerliCall: () => usePrepareDrippieGoerliCall,
  usePrepareDrippieGoerliCreate: () => usePrepareDrippieGoerliCreate,
  usePrepareDrippieGoerliDelegatecall: () => usePrepareDrippieGoerliDelegatecall,
  usePrepareDrippieGoerliDrip: () => usePrepareDrippieGoerliDrip,
  usePrepareDrippieGoerliSetOwner: () => usePrepareDrippieGoerliSetOwner,
  usePrepareDrippieGoerliStatus: () => usePrepareDrippieGoerliStatus,
  usePrepareDrippieGoerliWithdrawErc20: () => usePrepareDrippieGoerliWithdrawErc20,
  usePrepareDrippieGoerliWithdrawErc721: () => usePrepareDrippieGoerliWithdrawErc721,
  usePrepareDrippieGoerliWithdrawEth: () => usePrepareDrippieGoerliWithdrawEth,
  usePrepareDrippieGoerliWrite: () => usePrepareDrippieGoerliWrite,
  usePrepareDrippieOptimismGoerliCall: () => usePrepareDrippieOptimismGoerliCall,
  usePrepareDrippieOptimismGoerliCreate: () => usePrepareDrippieOptimismGoerliCreate,
  usePrepareDrippieOptimismGoerliDelegatecall: () => usePrepareDrippieOptimismGoerliDelegatecall,
  usePrepareDrippieOptimismGoerliDrip: () => usePrepareDrippieOptimismGoerliDrip,
  usePrepareDrippieOptimismGoerliSetOwner: () => usePrepareDrippieOptimismGoerliSetOwner,
  usePrepareDrippieOptimismGoerliStatus: () => usePrepareDrippieOptimismGoerliStatus,
  usePrepareDrippieOptimismGoerliWithdrawErc20: () => usePrepareDrippieOptimismGoerliWithdrawErc20,
  usePrepareDrippieOptimismGoerliWithdrawErc721: () => usePrepareDrippieOptimismGoerliWithdrawErc721,
  usePrepareDrippieOptimismGoerliWithdrawEth: () => usePrepareDrippieOptimismGoerliWithdrawEth,
  usePrepareDrippieOptimismGoerliWrite: () => usePrepareDrippieOptimismGoerliWrite,
  usePrepareDrippieSetOwner: () => usePrepareDrippieSetOwner,
  usePrepareDrippieStatus: () => usePrepareDrippieStatus,
  usePrepareDrippieWithdrawErc20: () => usePrepareDrippieWithdrawErc20,
  usePrepareDrippieWithdrawErc721: () => usePrepareDrippieWithdrawErc721,
  usePrepareDrippieWithdrawEth: () => usePrepareDrippieWithdrawEth,
  usePrepareDrippieWrite: () => usePrepareDrippieWrite,
  usePrepareL1BlockSetL1BlockValues: () => usePrepareL1BlockSetL1BlockValues,
  usePrepareL1BlockWrite: () => usePrepareL1BlockWrite,
  usePrepareL1CrossDomainMessengerInitialize: () => usePrepareL1CrossDomainMessengerInitialize,
  usePrepareL1CrossDomainMessengerRelayMessage: () => usePrepareL1CrossDomainMessengerRelayMessage,
  usePrepareL1CrossDomainMessengerSendMessage: () => usePrepareL1CrossDomainMessengerSendMessage,
  usePrepareL1CrossDomainMessengerWrite: () => usePrepareL1CrossDomainMessengerWrite,
  usePrepareL1Erc721BridgeBridgeErc721: () => usePrepareL1Erc721BridgeBridgeErc721,
  usePrepareL1Erc721BridgeBridgeErc721To: () => usePrepareL1Erc721BridgeBridgeErc721To,
  usePrepareL1Erc721BridgeFinalizeBridgeErc721: () => usePrepareL1Erc721BridgeFinalizeBridgeErc721,
  usePrepareL1Erc721BridgeWrite: () => usePrepareL1Erc721BridgeWrite,
  usePrepareL1FeeVaultWithdraw: () => usePrepareL1FeeVaultWithdraw,
  usePrepareL1FeeVaultWrite: () => usePrepareL1FeeVaultWrite,
  usePrepareL1StandardBridgeBridgeErc20: () => usePrepareL1StandardBridgeBridgeErc20,
  usePrepareL1StandardBridgeBridgeErc20To: () => usePrepareL1StandardBridgeBridgeErc20To,
  usePrepareL1StandardBridgeBridgeEth: () => usePrepareL1StandardBridgeBridgeEth,
  usePrepareL1StandardBridgeBridgeEthTo: () => usePrepareL1StandardBridgeBridgeEthTo,
  usePrepareL1StandardBridgeDepositErc20: () => usePrepareL1StandardBridgeDepositErc20,
  usePrepareL1StandardBridgeDepositErc20To: () => usePrepareL1StandardBridgeDepositErc20To,
  usePrepareL1StandardBridgeDepositEth: () => usePrepareL1StandardBridgeDepositEth,
  usePrepareL1StandardBridgeDepositEthTo: () => usePrepareL1StandardBridgeDepositEthTo,
  usePrepareL1StandardBridgeFinalizeBridgeErc20: () => usePrepareL1StandardBridgeFinalizeBridgeErc20,
  usePrepareL1StandardBridgeFinalizeBridgeEth: () => usePrepareL1StandardBridgeFinalizeBridgeEth,
  usePrepareL1StandardBridgeFinalizeErc20Withdrawal: () => usePrepareL1StandardBridgeFinalizeErc20Withdrawal,
  usePrepareL1StandardBridgeFinalizeEthWithdrawal: () => usePrepareL1StandardBridgeFinalizeEthWithdrawal,
  usePrepareL1StandardBridgeWrite: () => usePrepareL1StandardBridgeWrite,
  usePrepareL2CrossDomainMessengerInitialize: () => usePrepareL2CrossDomainMessengerInitialize,
  usePrepareL2CrossDomainMessengerRelayMessage: () => usePrepareL2CrossDomainMessengerRelayMessage,
  usePrepareL2CrossDomainMessengerSendMessage: () => usePrepareL2CrossDomainMessengerSendMessage,
  usePrepareL2CrossDomainMessengerWrite: () => usePrepareL2CrossDomainMessengerWrite,
  usePrepareL2Erc721BridgeBridgeErc721: () => usePrepareL2Erc721BridgeBridgeErc721,
  usePrepareL2Erc721BridgeBridgeErc721To: () => usePrepareL2Erc721BridgeBridgeErc721To,
  usePrepareL2Erc721BridgeFinalizeBridgeErc721: () => usePrepareL2Erc721BridgeFinalizeBridgeErc721,
  usePrepareL2Erc721BridgeWrite: () => usePrepareL2Erc721BridgeWrite,
  usePrepareL2OutputOracleDeleteL2Outputs: () => usePrepareL2OutputOracleDeleteL2Outputs,
  usePrepareL2OutputOracleInitialize: () => usePrepareL2OutputOracleInitialize,
  usePrepareL2OutputOracleProposeL2Output: () => usePrepareL2OutputOracleProposeL2Output,
  usePrepareL2OutputOracleWrite: () => usePrepareL2OutputOracleWrite,
  usePrepareL2StandardBridgeBridgeErc20: () => usePrepareL2StandardBridgeBridgeErc20,
  usePrepareL2StandardBridgeBridgeErc20To: () => usePrepareL2StandardBridgeBridgeErc20To,
  usePrepareL2StandardBridgeBridgeEth: () => usePrepareL2StandardBridgeBridgeEth,
  usePrepareL2StandardBridgeBridgeEthTo: () => usePrepareL2StandardBridgeBridgeEthTo,
  usePrepareL2StandardBridgeFinalizeBridgeErc20: () => usePrepareL2StandardBridgeFinalizeBridgeErc20,
  usePrepareL2StandardBridgeFinalizeBridgeEth: () => usePrepareL2StandardBridgeFinalizeBridgeEth,
  usePrepareL2StandardBridgeFinalizeDeposit: () => usePrepareL2StandardBridgeFinalizeDeposit,
  usePrepareL2StandardBridgeWithdraw: () => usePrepareL2StandardBridgeWithdraw,
  usePrepareL2StandardBridgeWithdrawTo: () => usePrepareL2StandardBridgeWithdrawTo,
  usePrepareL2StandardBridgeWrite: () => usePrepareL2StandardBridgeWrite,
  usePrepareL2ToL1MessagePasserBurn: () => usePrepareL2ToL1MessagePasserBurn,
  usePrepareL2ToL1MessagePasserInitiateWithdrawal: () => usePrepareL2ToL1MessagePasserInitiateWithdrawal,
  usePrepareL2ToL1MessagePasserWrite: () => usePrepareL2ToL1MessagePasserWrite,
  usePrepareMintManagerMint: () => usePrepareMintManagerMint,
  usePrepareMintManagerRenounceOwnership: () => usePrepareMintManagerRenounceOwnership,
  usePrepareMintManagerTransferOwnership: () => usePrepareMintManagerTransferOwnership,
  usePrepareMintManagerUpgrade: () => usePrepareMintManagerUpgrade,
  usePrepareMintManagerWrite: () => usePrepareMintManagerWrite,
  usePrepareOptimismMintableErc20FactoryCreateOptimismMintableErc20: () => usePrepareOptimismMintableErc20FactoryCreateOptimismMintableErc20,
  usePrepareOptimismMintableErc20FactoryCreateStandardL2Token: () => usePrepareOptimismMintableErc20FactoryCreateStandardL2Token,
  usePrepareOptimismMintableErc20FactoryWrite: () => usePrepareOptimismMintableErc20FactoryWrite,
  usePrepareOptimismMintableErc721FactoryCreateOptimismMintableErc721: () => usePrepareOptimismMintableErc721FactoryCreateOptimismMintableErc721,
  usePrepareOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721: () => usePrepareOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721,
  usePrepareOptimismMintableErc721FactoryOptimismGoerliWrite: () => usePrepareOptimismMintableErc721FactoryOptimismGoerliWrite,
  usePrepareOptimismMintableErc721FactoryWrite: () => usePrepareOptimismMintableErc721FactoryWrite,
  usePrepareOptimismPortalDepositTransaction: () => usePrepareOptimismPortalDepositTransaction,
  usePrepareOptimismPortalDonateEth: () => usePrepareOptimismPortalDonateEth,
  usePrepareOptimismPortalFinalizeWithdrawalTransaction: () => usePrepareOptimismPortalFinalizeWithdrawalTransaction,
  usePrepareOptimismPortalInitialize: () => usePrepareOptimismPortalInitialize,
  usePrepareOptimismPortalPause: () => usePrepareOptimismPortalPause,
  usePrepareOptimismPortalProveWithdrawalTransaction: () => usePrepareOptimismPortalProveWithdrawalTransaction,
  usePrepareOptimismPortalUnpause: () => usePrepareOptimismPortalUnpause,
  usePrepareOptimismPortalWrite: () => usePrepareOptimismPortalWrite,
  usePrepareOptimistBurn: () => usePrepareOptimistBurn,
  usePrepareOptimistInitialize: () => usePrepareOptimistInitialize,
  usePrepareOptimistInviterClaimInvite: () => usePrepareOptimistInviterClaimInvite,
  usePrepareOptimistInviterCommitInvite: () => usePrepareOptimistInviterCommitInvite,
  usePrepareOptimistInviterInitialize: () => usePrepareOptimistInviterInitialize,
  usePrepareOptimistInviterSetInviteCounts: () => usePrepareOptimistInviterSetInviteCounts,
  usePrepareOptimistInviterWrite: () => usePrepareOptimistInviterWrite,
  usePrepareOptimistMint: () => usePrepareOptimistMint,
  usePrepareOptimistSafeTransferFrom: () => usePrepareOptimistSafeTransferFrom,
  usePrepareOptimistSetApprovalForAll: () => usePrepareOptimistSetApprovalForAll,
  usePrepareOptimistTransferFrom: () => usePrepareOptimistTransferFrom,
  usePrepareOptimistWrite: () => usePrepareOptimistWrite,
  usePreparePortalSenderDonate: () => usePreparePortalSenderDonate,
  usePreparePortalSenderWrite: () => usePreparePortalSenderWrite,
  usePrepareProxyAdminChangeProxyAdmin: () => usePrepareProxyAdminChangeProxyAdmin,
  usePrepareProxyAdminRenounceOwnership: () => usePrepareProxyAdminRenounceOwnership,
  usePrepareProxyAdminSetAddress: () => usePrepareProxyAdminSetAddress,
  usePrepareProxyAdminSetAddressManager: () => usePrepareProxyAdminSetAddressManager,
  usePrepareProxyAdminSetImplementationName: () => usePrepareProxyAdminSetImplementationName,
  usePrepareProxyAdminSetProxyType: () => usePrepareProxyAdminSetProxyType,
  usePrepareProxyAdminSetUpgrading: () => usePrepareProxyAdminSetUpgrading,
  usePrepareProxyAdminTransferOwnership: () => usePrepareProxyAdminTransferOwnership,
  usePrepareProxyAdminUpgrade: () => usePrepareProxyAdminUpgrade,
  usePrepareProxyAdminUpgradeAndCall: () => usePrepareProxyAdminUpgradeAndCall,
  usePrepareProxyAdminWrite: () => usePrepareProxyAdminWrite,
  usePrepareSequencerFeeVaultWithdraw: () => usePrepareSequencerFeeVaultWithdraw,
  usePrepareSequencerFeeVaultWrite: () => usePrepareSequencerFeeVaultWrite,
  usePrepareSystemConfigInitialize: () => usePrepareSystemConfigInitialize,
  usePrepareSystemConfigRenounceOwnership: () => usePrepareSystemConfigRenounceOwnership,
  usePrepareSystemConfigSetBatcherHash: () => usePrepareSystemConfigSetBatcherHash,
  usePrepareSystemConfigSetGasConfig: () => usePrepareSystemConfigSetGasConfig,
  usePrepareSystemConfigSetGasLimit: () => usePrepareSystemConfigSetGasLimit,
  usePrepareSystemConfigSetResourceConfig: () => usePrepareSystemConfigSetResourceConfig,
  usePrepareSystemConfigSetUnsafeBlockSigner: () => usePrepareSystemConfigSetUnsafeBlockSigner,
  usePrepareSystemConfigTransferOwnership: () => usePrepareSystemConfigTransferOwnership,
  usePrepareSystemConfigWrite: () => usePrepareSystemConfigWrite,
  usePrepareSystemDictatorExit1: () => usePrepareSystemDictatorExit1,
  usePrepareSystemDictatorFinalize: () => usePrepareSystemDictatorFinalize,
  usePrepareSystemDictatorGoerliExit1: () => usePrepareSystemDictatorGoerliExit1,
  usePrepareSystemDictatorGoerliFinalize: () => usePrepareSystemDictatorGoerliFinalize,
  usePrepareSystemDictatorGoerliInitialize: () => usePrepareSystemDictatorGoerliInitialize,
  usePrepareSystemDictatorGoerliRenounceOwnership: () => usePrepareSystemDictatorGoerliRenounceOwnership,
  usePrepareSystemDictatorGoerliStep1: () => usePrepareSystemDictatorGoerliStep1,
  usePrepareSystemDictatorGoerliStep2: () => usePrepareSystemDictatorGoerliStep2,
  usePrepareSystemDictatorGoerliStep3: () => usePrepareSystemDictatorGoerliStep3,
  usePrepareSystemDictatorGoerliStep4: () => usePrepareSystemDictatorGoerliStep4,
  usePrepareSystemDictatorGoerliStep5: () => usePrepareSystemDictatorGoerliStep5,
  usePrepareSystemDictatorGoerliStep6: () => usePrepareSystemDictatorGoerliStep6,
  usePrepareSystemDictatorGoerliTransferOwnership: () => usePrepareSystemDictatorGoerliTransferOwnership,
  usePrepareSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig: () => usePrepareSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig,
  usePrepareSystemDictatorGoerliWrite: () => usePrepareSystemDictatorGoerliWrite,
  usePrepareSystemDictatorInitialize: () => usePrepareSystemDictatorInitialize,
  usePrepareSystemDictatorPhase1: () => usePrepareSystemDictatorPhase1,
  usePrepareSystemDictatorPhase2: () => usePrepareSystemDictatorPhase2,
  usePrepareSystemDictatorRenounceOwnership: () => usePrepareSystemDictatorRenounceOwnership,
  usePrepareSystemDictatorStep1: () => usePrepareSystemDictatorStep1,
  usePrepareSystemDictatorStep2: () => usePrepareSystemDictatorStep2,
  usePrepareSystemDictatorStep3: () => usePrepareSystemDictatorStep3,
  usePrepareSystemDictatorStep4: () => usePrepareSystemDictatorStep4,
  usePrepareSystemDictatorStep5: () => usePrepareSystemDictatorStep5,
  usePrepareSystemDictatorTransferOwnership: () => usePrepareSystemDictatorTransferOwnership,
  usePrepareSystemDictatorUpdateDynamicConfig: () => usePrepareSystemDictatorUpdateDynamicConfig,
  usePrepareSystemDictatorWrite: () => usePrepareSystemDictatorWrite,
  usePrepareTeleportrWithdrawerCall: () => usePrepareTeleportrWithdrawerCall,
  usePrepareTeleportrWithdrawerDelegatecall: () => usePrepareTeleportrWithdrawerDelegatecall,
  usePrepareTeleportrWithdrawerSetData: () => usePrepareTeleportrWithdrawerSetData,
  usePrepareTeleportrWithdrawerSetOwner: () => usePrepareTeleportrWithdrawerSetOwner,
  usePrepareTeleportrWithdrawerSetRecipient: () => usePrepareTeleportrWithdrawerSetRecipient,
  usePrepareTeleportrWithdrawerSetTeleportr: () => usePrepareTeleportrWithdrawerSetTeleportr,
  usePrepareTeleportrWithdrawerWithdrawErc20: () => usePrepareTeleportrWithdrawerWithdrawErc20,
  usePrepareTeleportrWithdrawerWithdrawErc721: () => usePrepareTeleportrWithdrawerWithdrawErc721,
  usePrepareTeleportrWithdrawerWithdrawEth: () => usePrepareTeleportrWithdrawerWithdrawEth,
  usePrepareTeleportrWithdrawerWithdrawFromTeleportr: () => usePrepareTeleportrWithdrawerWithdrawFromTeleportr,
  usePrepareTeleportrWithdrawerWrite: () => usePrepareTeleportrWithdrawerWrite,
  useProxyAdminAddressManager: () => useProxyAdminAddressManager,
  useProxyAdminChangeProxyAdmin: () => useProxyAdminChangeProxyAdmin,
  useProxyAdminEvent: () => useProxyAdminEvent,
  useProxyAdminGetProxyAdmin: () => useProxyAdminGetProxyAdmin,
  useProxyAdminGetProxyImplementation: () => useProxyAdminGetProxyImplementation,
  useProxyAdminImplementationName: () => useProxyAdminImplementationName,
  useProxyAdminIsUpgrading: () => useProxyAdminIsUpgrading,
  useProxyAdminOwner: () => useProxyAdminOwner,
  useProxyAdminOwnershipTransferredEvent: () => useProxyAdminOwnershipTransferredEvent,
  useProxyAdminProxyType: () => useProxyAdminProxyType,
  useProxyAdminRead: () => useProxyAdminRead,
  useProxyAdminRenounceOwnership: () => useProxyAdminRenounceOwnership,
  useProxyAdminSetAddress: () => useProxyAdminSetAddress,
  useProxyAdminSetAddressManager: () => useProxyAdminSetAddressManager,
  useProxyAdminSetImplementationName: () => useProxyAdminSetImplementationName,
  useProxyAdminSetProxyType: () => useProxyAdminSetProxyType,
  useProxyAdminSetUpgrading: () => useProxyAdminSetUpgrading,
  useProxyAdminTransferOwnership: () => useProxyAdminTransferOwnership,
  useProxyAdminUpgrade: () => useProxyAdminUpgrade,
  useProxyAdminUpgradeAndCall: () => useProxyAdminUpgradeAndCall,
  useProxyAdminWrite: () => useProxyAdminWrite,
  useSequencerFeeVaultEvent: () => useSequencerFeeVaultEvent,
  useSequencerFeeVaultL1FeeWallet: () => useSequencerFeeVaultL1FeeWallet,
  useSequencerFeeVaultMinWithdrawalAmount: () => useSequencerFeeVaultMinWithdrawalAmount,
  useSequencerFeeVaultRead: () => useSequencerFeeVaultRead,
  useSequencerFeeVaultRecipient: () => useSequencerFeeVaultRecipient,
  useSequencerFeeVaultTotalProcessed: () => useSequencerFeeVaultTotalProcessed,
  useSequencerFeeVaultVersion: () => useSequencerFeeVaultVersion,
  useSequencerFeeVaultWithdraw: () => useSequencerFeeVaultWithdraw,
  useSequencerFeeVaultWithdrawalEvent: () => useSequencerFeeVaultWithdrawalEvent,
  useSequencerFeeVaultWrite: () => useSequencerFeeVaultWrite,
  useSystemConfigBatcherHash: () => useSystemConfigBatcherHash,
  useSystemConfigConfigUpdateEvent: () => useSystemConfigConfigUpdateEvent,
  useSystemConfigEvent: () => useSystemConfigEvent,
  useSystemConfigGasLimit: () => useSystemConfigGasLimit,
  useSystemConfigInitialize: () => useSystemConfigInitialize,
  useSystemConfigInitializedEvent: () => useSystemConfigInitializedEvent,
  useSystemConfigMinimumGasLimit: () => useSystemConfigMinimumGasLimit,
  useSystemConfigOverhead: () => useSystemConfigOverhead,
  useSystemConfigOwner: () => useSystemConfigOwner,
  useSystemConfigOwnershipTransferredEvent: () => useSystemConfigOwnershipTransferredEvent,
  useSystemConfigRead: () => useSystemConfigRead,
  useSystemConfigRenounceOwnership: () => useSystemConfigRenounceOwnership,
  useSystemConfigResourceConfig: () => useSystemConfigResourceConfig,
  useSystemConfigScalar: () => useSystemConfigScalar,
  useSystemConfigSetBatcherHash: () => useSystemConfigSetBatcherHash,
  useSystemConfigSetGasConfig: () => useSystemConfigSetGasConfig,
  useSystemConfigSetGasLimit: () => useSystemConfigSetGasLimit,
  useSystemConfigSetResourceConfig: () => useSystemConfigSetResourceConfig,
  useSystemConfigSetUnsafeBlockSigner: () => useSystemConfigSetUnsafeBlockSigner,
  useSystemConfigTransferOwnership: () => useSystemConfigTransferOwnership,
  useSystemConfigUnsafeBlockSigner: () => useSystemConfigUnsafeBlockSigner,
  useSystemConfigUnsafeBlockSignerSlot: () => useSystemConfigUnsafeBlockSignerSlot,
  useSystemConfigVersion: () => useSystemConfigVersion,
  useSystemConfigWrite: () => useSystemConfigWrite,
  useSystemDictatorConfig: () => useSystemDictatorConfig,
  useSystemDictatorCurrentStep: () => useSystemDictatorCurrentStep,
  useSystemDictatorDynamicConfigSet: () => useSystemDictatorDynamicConfigSet,
  useSystemDictatorEvent: () => useSystemDictatorEvent,
  useSystemDictatorExit1: () => useSystemDictatorExit1,
  useSystemDictatorExit_1NoReturnStep: () => useSystemDictatorExit_1NoReturnStep,
  useSystemDictatorExited: () => useSystemDictatorExited,
  useSystemDictatorFinalize: () => useSystemDictatorFinalize,
  useSystemDictatorFinalized: () => useSystemDictatorFinalized,
  useSystemDictatorGoerliConfig: () => useSystemDictatorGoerliConfig,
  useSystemDictatorGoerliCurrentStep: () => useSystemDictatorGoerliCurrentStep,
  useSystemDictatorGoerliDynamicConfigSet: () => useSystemDictatorGoerliDynamicConfigSet,
  useSystemDictatorGoerliEvent: () => useSystemDictatorGoerliEvent,
  useSystemDictatorGoerliExit1: () => useSystemDictatorGoerliExit1,
  useSystemDictatorGoerliExit_1NoReturnStep: () => useSystemDictatorGoerliExit_1NoReturnStep,
  useSystemDictatorGoerliFinalize: () => useSystemDictatorGoerliFinalize,
  useSystemDictatorGoerliFinalized: () => useSystemDictatorGoerliFinalized,
  useSystemDictatorGoerliInitialize: () => useSystemDictatorGoerliInitialize,
  useSystemDictatorGoerliInitializedEvent: () => useSystemDictatorGoerliInitializedEvent,
  useSystemDictatorGoerliL2OutputOracleDynamicConfig: () => useSystemDictatorGoerliL2OutputOracleDynamicConfig,
  useSystemDictatorGoerliOldL1CrossDomainMessenger: () => useSystemDictatorGoerliOldL1CrossDomainMessenger,
  useSystemDictatorGoerliOwner: () => useSystemDictatorGoerliOwner,
  useSystemDictatorGoerliOwnershipTransferredEvent: () => useSystemDictatorGoerliOwnershipTransferredEvent,
  useSystemDictatorGoerliProxyTransferStep: () => useSystemDictatorGoerliProxyTransferStep,
  useSystemDictatorGoerliRead: () => useSystemDictatorGoerliRead,
  useSystemDictatorGoerliRenounceOwnership: () => useSystemDictatorGoerliRenounceOwnership,
  useSystemDictatorGoerliStep1: () => useSystemDictatorGoerliStep1,
  useSystemDictatorGoerliStep2: () => useSystemDictatorGoerliStep2,
  useSystemDictatorGoerliStep3: () => useSystemDictatorGoerliStep3,
  useSystemDictatorGoerliStep4: () => useSystemDictatorGoerliStep4,
  useSystemDictatorGoerliStep5: () => useSystemDictatorGoerliStep5,
  useSystemDictatorGoerliStep6: () => useSystemDictatorGoerliStep6,
  useSystemDictatorGoerliTransferOwnership: () => useSystemDictatorGoerliTransferOwnership,
  useSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig: () => useSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig,
  useSystemDictatorGoerliWrite: () => useSystemDictatorGoerliWrite,
  useSystemDictatorInitialize: () => useSystemDictatorInitialize,
  useSystemDictatorInitializedEvent: () => useSystemDictatorInitializedEvent,
  useSystemDictatorL2OutputOracleDynamicConfig: () => useSystemDictatorL2OutputOracleDynamicConfig,
  useSystemDictatorOldL1CrossDomainMessenger: () => useSystemDictatorOldL1CrossDomainMessenger,
  useSystemDictatorOptimismPortalDynamicConfig: () => useSystemDictatorOptimismPortalDynamicConfig,
  useSystemDictatorOwner: () => useSystemDictatorOwner,
  useSystemDictatorOwnershipTransferredEvent: () => useSystemDictatorOwnershipTransferredEvent,
  useSystemDictatorPhase1: () => useSystemDictatorPhase1,
  useSystemDictatorPhase2: () => useSystemDictatorPhase2,
  useSystemDictatorProxyTransferStep: () => useSystemDictatorProxyTransferStep,
  useSystemDictatorRead: () => useSystemDictatorRead,
  useSystemDictatorRenounceOwnership: () => useSystemDictatorRenounceOwnership,
  useSystemDictatorStep1: () => useSystemDictatorStep1,
  useSystemDictatorStep2: () => useSystemDictatorStep2,
  useSystemDictatorStep3: () => useSystemDictatorStep3,
  useSystemDictatorStep4: () => useSystemDictatorStep4,
  useSystemDictatorStep5: () => useSystemDictatorStep5,
  useSystemDictatorTransferOwnership: () => useSystemDictatorTransferOwnership,
  useSystemDictatorUpdateDynamicConfig: () => useSystemDictatorUpdateDynamicConfig,
  useSystemDictatorWrite: () => useSystemDictatorWrite,
  useTeleportrWithdrawerCall: () => useTeleportrWithdrawerCall,
  useTeleportrWithdrawerData: () => useTeleportrWithdrawerData,
  useTeleportrWithdrawerDelegatecall: () => useTeleportrWithdrawerDelegatecall,
  useTeleportrWithdrawerEvent: () => useTeleportrWithdrawerEvent,
  useTeleportrWithdrawerOwner: () => useTeleportrWithdrawerOwner,
  useTeleportrWithdrawerOwnerUpdatedEvent: () => useTeleportrWithdrawerOwnerUpdatedEvent,
  useTeleportrWithdrawerRead: () => useTeleportrWithdrawerRead,
  useTeleportrWithdrawerReceivedEthEvent: () => useTeleportrWithdrawerReceivedEthEvent,
  useTeleportrWithdrawerRecipient: () => useTeleportrWithdrawerRecipient,
  useTeleportrWithdrawerSetData: () => useTeleportrWithdrawerSetData,
  useTeleportrWithdrawerSetOwner: () => useTeleportrWithdrawerSetOwner,
  useTeleportrWithdrawerSetRecipient: () => useTeleportrWithdrawerSetRecipient,
  useTeleportrWithdrawerSetTeleportr: () => useTeleportrWithdrawerSetTeleportr,
  useTeleportrWithdrawerTeleportr: () => useTeleportrWithdrawerTeleportr,
  useTeleportrWithdrawerWithdrawErc20: () => useTeleportrWithdrawerWithdrawErc20,
  useTeleportrWithdrawerWithdrawErc721: () => useTeleportrWithdrawerWithdrawErc721,
  useTeleportrWithdrawerWithdrawEth: () => useTeleportrWithdrawerWithdrawEth,
  useTeleportrWithdrawerWithdrawFromTeleportr: () => useTeleportrWithdrawerWithdrawFromTeleportr,
  useTeleportrWithdrawerWithdrewErc20Event: () => useTeleportrWithdrawerWithdrewErc20Event,
  useTeleportrWithdrawerWithdrewErc721Event: () => useTeleportrWithdrawerWithdrewErc721Event,
  useTeleportrWithdrawerWithdrewEthEvent: () => useTeleportrWithdrawerWithdrewEthEvent,
  useTeleportrWithdrawerWrite: () => useTeleportrWithdrawerWrite
});
module.exports = __toCommonJS(react_exports);
var import_wagmi = require("wagmi");
var addressManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_name", internalType: "string", type: "string", indexed: true },
      {
        name: "_newAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "_oldAddress",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AddressSet"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "getAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_address", internalType: "address", type: "address" }
    ],
    name: "setAddress",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  }
];
var addressManagerAddress = {
  1: "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
  5: "0xa6f73589243a6A7a9023b1Fa0651b1d89c177111"
};
var addressManagerConfig = {
  address: addressManagerAddress,
  abi: addressManagerABI
};
var assetReceiverABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var assetReceiverAddress = {
  1: "0x15DdA60616Ffca20371ED1659dBB78E888f65556",
  10: "0x15DdA60616Ffca20371ED1659dBB78E888f65556"
};
var assetReceiverConfig = {
  address: assetReceiverAddress,
  abi: assetReceiverABI
};
var checkBalanceHighABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckBalanceHigh.Params",
        type: "tuple",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkBalanceHighAddress = {
  1: "0x7eC64a8a591bFf829ff6C8be76074D540ACb813F",
  5: "0x7eC64a8a591bFf829ff6C8be76074D540ACb813F",
  420: "0x5d7103853f12109A7d27F118e54BbC654ad847E9"
};
var checkBalanceHighConfig = {
  address: checkBalanceHighAddress,
  abi: checkBalanceHighABI
};
var checkBalanceLowABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckBalanceLow.Params",
        type: "tuple",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkBalanceLowAddress = {
  1: "0x381a4eFC2A2C914eA1889722bB4B44Fa6BD5b640",
  5: "0x381a4eFC2A2C914eA1889722bB4B44Fa6BD5b640",
  420: "0x7Ce13D154FAEE5C8B3E6b19d4Add16f21d884474"
};
var checkBalanceLowConfig = {
  address: checkBalanceLowAddress,
  abi: checkBalanceLowABI
};
var checkGelatoLowABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "params",
        internalType: "struct CheckGelatoLow.Params",
        type: "tuple",
        components: [
          { name: "treasury", internalType: "address", type: "address" },
          { name: "threshold", internalType: "uint256", type: "uint256" },
          { name: "recipient", internalType: "address", type: "address" }
        ],
        indexed: false
      }
    ],
    name: "_EventToExposeStructInABI__Params"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_params", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkGelatoLowAddress = {
  1: "0x4f7CFc43f6D262a085F3b946cAC69E7a8E39BBAa",
  5: "0x4f7CFc43f6D262a085F3b946cAC69E7a8E39BBAa",
  420: "0xF9c8a4Cb4021f57F9f6d69799cA9BefF64524862"
};
var checkGelatoLowConfig = {
  address: checkGelatoLowAddress,
  abi: checkGelatoLowABI
};
var checkTrueABI = [
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    name: "check",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  }
];
var checkTrueAddress = {
  1: "0x5c741a38cb11424711231777D71689C458eE835D",
  5: "0x5c741a38cb11424711231777D71689C458eE835D",
  420: "0x47443D0C184e022F19BD1578F5bca6B8a9F58E32"
};
var checkTrueConfig = {
  address: checkTrueAddress,
  abi: checkTrueABI
};
var drippieABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieAddress = {
  1: "0x44b3A2a040057eBafC601A78647e805fd58B1f50"
};
var drippieConfig = {
  address: drippieAddress,
  abi: drippieABI
};
var drippieGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "reentrant", internalType: "bool", type: "bool" },
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieGoerliAddress = {
  5: "0x44b3A2a040057eBafC601A78647e805fd58B1f50"
};
var drippieGoerliConfig = {
  address: drippieGoerliAddress,
  abi: drippieGoerliABI
};
var drippieOptimismGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: "DripCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "executor",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DripExecuted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nameref",
        internalType: "string",
        type: "string",
        indexed: true
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8",
        indexed: false
      }
    ],
    name: "DripStatusUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      }
    ],
    name: "create",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "drip",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "string", type: "string" }],
    name: "drips",
    outputs: [
      {
        name: "status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      },
      {
        name: "config",
        internalType: "struct Drippie.DripConfig",
        type: "tuple",
        components: [
          { name: "interval", internalType: "uint256", type: "uint256" },
          {
            name: "dripcheck",
            internalType: "contract IDripCheck",
            type: "address"
          },
          { name: "checkparams", internalType: "bytes", type: "bytes" },
          {
            name: "actions",
            internalType: "struct Drippie.DripAction[]",
            type: "tuple[]",
            components: [
              {
                name: "target",
                internalType: "address payable",
                type: "address"
              },
              { name: "data", internalType: "bytes", type: "bytes" },
              { name: "value", internalType: "uint256", type: "uint256" }
            ]
          }
        ]
      },
      { name: "last", internalType: "uint256", type: "uint256" },
      { name: "count", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "executable",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      {
        name: "_status",
        internalType: "enum Drippie.DripStatus",
        type: "uint8"
      }
    ],
    name: "status",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var drippieOptimismGoerliAddress = {
  420: "0x8D8d533C16D23847EB04EEB0925be8900Dd3af86"
};
var drippieOptimismGoerliConfig = {
  address: drippieOptimismGoerliAddress,
  abi: drippieOptimismGoerliABI
};
var l1CrossDomainMessengerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_portal",
        internalType: "contract OptimismPortal",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "FailedRelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "message", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "messageNonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessageExtension1"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_CALLDATA_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OTHER_MESSENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PORTAL",
    outputs: [
      { name: "", internalType: "contract OptimismPortal", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CALL_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CONSTANT_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_GAS_CHECK_BUFFER",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_RESERVED_GAS",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "baseGas",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "failedMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_nonce", internalType: "uint256", type: "uint256" },
      { name: "_sender", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint256", type: "uint256" },
      { name: "_message", internalType: "bytes", type: "bytes" }
    ],
    name: "relayMessage",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "sendMessage",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "successfulMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  }
];
var l1CrossDomainMessengerAddress = {
  1: "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
  5: "0x5086d1eEF304eb5284A0f6720f79403b4e9bE294"
};
var l1CrossDomainMessengerConfig = {
  address: l1CrossDomainMessengerAddress,
  abi: l1CrossDomainMessengerABI
};
var l1Erc721BridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address", type: "address" },
      { name: "_otherBridge", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721To",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC721",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "otherBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l1Erc721BridgeAddress = {
  1: "0x5a7749f83b81B301cAb5f48EB8516B986DAef23D",
  5: "0x8DD330DdE8D9898d43b4dc840Da27A07dF91b3c9"
};
var l1Erc721BridgeConfig = {
  address: l1Erc721BridgeAddress,
  abi: l1Erc721BridgeABI
};
var l1StandardBridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address payable", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20DepositInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20WithdrawalFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHDepositInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHWithdrawalFinalized"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETHTo",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "depositETHTo",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC20",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeERC20Withdrawal",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeETHWithdrawal",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2TokenBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var l1StandardBridgeAddress = {
  1: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
  5: "0x636Af16bf2f682dD3109e60102b8E1A089FedAa8"
};
var l1StandardBridgeConfig = {
  address: l1StandardBridgeAddress,
  abi: l1StandardBridgeABI
};
var l2OutputOracleABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_submissionInterval", internalType: "uint256", type: "uint256" },
      { name: "_l2BlockTime", internalType: "uint256", type: "uint256" },
      {
        name: "_startingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "_startingTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_proposer", internalType: "address", type: "address" },
      { name: "_challenger", internalType: "address", type: "address" },
      {
        name: "_finalizationPeriodSeconds",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "outputRoot",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "l2OutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "l2BlockNumber",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "l1Timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "OutputProposed"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevNextOutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "newNextOutputIndex",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "OutputsDeleted"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CHALLENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "FINALIZATION_PERIOD_SECONDS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "L2_BLOCK_TIME",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROPOSER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "SUBMISSION_INTERVAL",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "computeL2Timestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "deleteL2Outputs",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2Output",
    outputs: [
      {
        name: "",
        internalType: "struct Types.OutputProposal",
        type: "tuple",
        components: [
          { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
          { name: "timestamp", internalType: "uint128", type: "uint128" },
          { name: "l2BlockNumber", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2OutputAfter",
    outputs: [
      {
        name: "",
        internalType: "struct Types.OutputProposal",
        type: "tuple",
        components: [
          { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
          { name: "timestamp", internalType: "uint128", type: "uint128" },
          { name: "l2BlockNumber", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "getL2OutputIndexAfter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_startingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "_startingTimestamp", internalType: "uint256", type: "uint256" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "latestBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "latestOutputIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextOutputIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_outputRoot", internalType: "bytes32", type: "bytes32" },
      { name: "_l2BlockNumber", internalType: "uint256", type: "uint256" },
      { name: "_l1BlockHash", internalType: "bytes32", type: "bytes32" },
      { name: "_l1BlockNumber", internalType: "uint256", type: "uint256" }
    ],
    name: "proposeL2Output",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "startingBlockNumber",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "startingTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l2OutputOracleAddress = {
  1: "0xdfe97868233d1aa22e815a266982f2cf17685a27",
  5: "0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0"
};
var l2OutputOracleConfig = {
  address: l2OutputOracleAddress,
  abi: l2OutputOracleABI
};
var optimismMintableErc20FactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_bridge", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC20Created"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "StandardL2TokenCreated"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BRIDGE",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC20",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createStandardL2Token",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc20FactoryAddress = {
  1: "0x4200000000000000000000000000000000000012",
  5: "0x4200000000000000000000000000000000000012",
  420: "0x4200000000000000000000000000000000000012"
};
var optimismMintableErc20FactoryConfig = {
  address: optimismMintableErc20FactoryAddress,
  abi: optimismMintableErc20FactoryABI
};
var optimismPortalABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_l2Oracle",
        internalType: "contract L2OutputOracle",
        type: "address"
      },
      { name: "_guardian", internalType: "address", type: "address" },
      { name: "_paused", internalType: "bool", type: "bool" },
      {
        name: "_config",
        internalType: "contract SystemConfig",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Paused"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "version",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "opaqueData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "TransactionDeposited"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Unpaused"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      { name: "success", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "WithdrawalFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true }
    ],
    name: "WithdrawalProven"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "GUARDIAN",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "L2_ORACLE",
    outputs: [
      { name: "", internalType: "contract L2OutputOracle", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "SYSTEM_CONFIG",
    outputs: [
      { name: "", internalType: "contract SystemConfig", type: "address" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_isCreation", internalType: "bool", type: "bool" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "depositTransaction",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "donateETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_tx",
        internalType: "struct Types.WithdrawalTransaction",
        type: "tuple",
        components: [
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "sender", internalType: "address", type: "address" },
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "gasLimit", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "finalizeWithdrawalTransaction",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "finalizedWithdrawals",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_paused", internalType: "bool", type: "bool" }],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" }
    ],
    name: "isOutputFinalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2Sender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_byteCount", internalType: "uint64", type: "uint64" }],
    name: "minimumGasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "params",
    outputs: [
      { name: "prevBaseFee", internalType: "uint128", type: "uint128" },
      { name: "prevBoughtGas", internalType: "uint64", type: "uint64" },
      { name: "prevBlockNum", internalType: "uint64", type: "uint64" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "pause",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_tx",
        internalType: "struct Types.WithdrawalTransaction",
        type: "tuple",
        components: [
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "sender", internalType: "address", type: "address" },
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "gasLimit", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" }
        ]
      },
      { name: "_l2OutputIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_outputRootProof",
        internalType: "struct Types.OutputRootProof",
        type: "tuple",
        components: [
          { name: "version", internalType: "bytes32", type: "bytes32" },
          { name: "stateRoot", internalType: "bytes32", type: "bytes32" },
          {
            name: "messagePasserStorageRoot",
            internalType: "bytes32",
            type: "bytes32"
          },
          { name: "latestBlockhash", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "_withdrawalProof", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "proveWithdrawalTransaction",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "provenWithdrawals",
    outputs: [
      { name: "outputRoot", internalType: "bytes32", type: "bytes32" },
      { name: "timestamp", internalType: "uint128", type: "uint128" },
      { name: "l2OutputIndex", internalType: "uint128", type: "uint128" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "unpause",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var optimismPortalAddress = {
  1: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
  5: "0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383"
};
var optimismPortalConfig = {
  address: optimismPortalAddress,
  abi: optimismPortalABI
};
var portalSenderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_portal",
        internalType: "contract OptimismPortal",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PORTAL",
    outputs: [
      { name: "", internalType: "contract OptimismPortal", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "donate",
    outputs: []
  }
];
var portalSenderAddress = {
  1: "0x0A893d9576b9cFD9EF78595963dc973238E78210",
  5: "0xe7FACd39531ee3C313330E93B4d7a8B8A3c84Aa4"
};
var portalSenderConfig = {
  address: portalSenderAddress,
  abi: portalSenderABI
};
var proxyAdminABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "addressManager",
    outputs: [
      { name: "", internalType: "contract AddressManager", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_newAdmin", internalType: "address", type: "address" }
    ],
    name: "changeProxyAdmin",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" }
    ],
    name: "getProxyAdmin",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_proxy", internalType: "address", type: "address" }],
    name: "getProxyImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "implementationName",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isUpgrading",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "proxyType",
    outputs: [
      { name: "", internalType: "enum ProxyAdmin.ProxyType", type: "uint8" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_address", internalType: "address", type: "address" }
    ],
    name: "setAddress",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_address",
        internalType: "contract AddressManager",
        type: "address"
      }
    ],
    name: "setAddressManager",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_address", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" }
    ],
    name: "setImplementationName",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_address", internalType: "address", type: "address" },
      {
        name: "_type",
        internalType: "enum ProxyAdmin.ProxyType",
        type: "uint8"
      }
    ],
    name: "setProxyType",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_upgrading", internalType: "bool", type: "bool" }],
    name: "setUpgrading",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_implementation", internalType: "address", type: "address" }
    ],
    name: "upgrade",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_proxy", internalType: "address payable", type: "address" },
      { name: "_implementation", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeAndCall",
    outputs: []
  }
];
var proxyAdminAddress = {
  1: "0x4200000000000000000000000000000000000018",
  5: "0x4200000000000000000000000000000000000018"
};
var proxyAdminConfig = {
  address: proxyAdminAddress,
  abi: proxyAdminABI
};
var systemConfigABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "updateType",
        internalType: "enum SystemConfig.UpdateType",
        type: "uint8",
        indexed: true
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "ConfigUpdate"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "UNSAFE_BLOCK_SIGNER_SLOT",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "batcherHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_gasLimit", internalType: "uint64", type: "uint64" },
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minimumGasLimit",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "overhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "resourceConfig",
    outputs: [
      {
        name: "",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "scalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" }
    ],
    name: "setBatcherHash",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_overhead", internalType: "uint256", type: "uint256" },
      { name: "_scalar", internalType: "uint256", type: "uint256" }
    ],
    name: "setGasConfig",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_gasLimit", internalType: "uint64", type: "uint64" }],
    name: "setGasLimit",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct ResourceMetering.ResourceConfig",
        type: "tuple",
        components: [
          { name: "maxResourceLimit", internalType: "uint32", type: "uint32" },
          {
            name: "elasticityMultiplier",
            internalType: "uint8",
            type: "uint8"
          },
          {
            name: "baseFeeMaxChangeDenominator",
            internalType: "uint8",
            type: "uint8"
          },
          { name: "minimumBaseFee", internalType: "uint32", type: "uint32" },
          { name: "systemTxMaxGas", internalType: "uint32", type: "uint32" },
          { name: "maximumBaseFee", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    name: "setResourceConfig",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_unsafeBlockSigner", internalType: "address", type: "address" }
    ],
    name: "setUnsafeBlockSigner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "unsafeBlockSigner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var systemConfigAddress = {
  1: "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290",
  5: "0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60"
};
var systemConfigConfig = {
  address: systemConfigAddress,
  abi: systemConfigABI
};
var systemDictatorABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EXIT_1_NO_RETURN_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROXY_TRANSFER_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      {
        name: "globalConfig",
        internalType: "struct SystemDictator.GlobalConfig",
        type: "tuple",
        components: [
          {
            name: "addressManager",
            internalType: "contract AddressManager",
            type: "address"
          },
          {
            name: "proxyAdmin",
            internalType: "contract ProxyAdmin",
            type: "address"
          },
          { name: "controller", internalType: "address", type: "address" },
          { name: "finalOwner", internalType: "address", type: "address" }
        ]
      },
      {
        name: "proxyAddressConfig",
        internalType: "struct SystemDictator.ProxyAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismPortalProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1StandardBridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1ERC721BridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "systemConfigProxy",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "implementationAddressConfig",
        internalType: "struct SystemDictator.ImplementationAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleImpl",
            internalType: "contract L2OutputOracle",
            type: "address"
          },
          {
            name: "optimismPortalImpl",
            internalType: "contract OptimismPortal",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerImpl",
            internalType: "contract L1CrossDomainMessenger",
            type: "address"
          },
          {
            name: "l1StandardBridgeImpl",
            internalType: "contract L1StandardBridge",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryImpl",
            internalType: "contract OptimismMintableERC20Factory",
            type: "address"
          },
          {
            name: "l1ERC721BridgeImpl",
            internalType: "contract L1ERC721Bridge",
            type: "address"
          },
          {
            name: "portalSenderImpl",
            internalType: "contract PortalSender",
            type: "address"
          },
          {
            name: "systemConfigImpl",
            internalType: "contract SystemConfig",
            type: "address"
          }
        ]
      },
      {
        name: "systemConfigConfig",
        internalType: "struct SystemDictator.SystemConfigConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "overhead", internalType: "uint256", type: "uint256" },
          { name: "scalar", internalType: "uint256", type: "uint256" },
          { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
          { name: "gasLimit", internalType: "uint64", type: "uint64" },
          {
            name: "unsafeBlockSigner",
            internalType: "address",
            type: "address"
          },
          {
            name: "resourceConfig",
            internalType: "struct ResourceMetering.ResourceConfig",
            type: "tuple",
            components: [
              {
                name: "maxResourceLimit",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "elasticityMultiplier",
                internalType: "uint8",
                type: "uint8"
              },
              {
                name: "baseFeeMaxChangeDenominator",
                internalType: "uint8",
                type: "uint8"
              },
              {
                name: "minimumBaseFee",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "systemTxMaxGas",
                internalType: "uint32",
                type: "uint32"
              },
              {
                name: "maximumBaseFee",
                internalType: "uint128",
                type: "uint128"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "currentStep",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "dynamicConfigSet",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "exit1",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "exited",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "finalize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "finalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct SystemDictator.DeployConfig",
        type: "tuple",
        components: [
          {
            name: "globalConfig",
            internalType: "struct SystemDictator.GlobalConfig",
            type: "tuple",
            components: [
              {
                name: "addressManager",
                internalType: "contract AddressManager",
                type: "address"
              },
              {
                name: "proxyAdmin",
                internalType: "contract ProxyAdmin",
                type: "address"
              },
              { name: "controller", internalType: "address", type: "address" },
              { name: "finalOwner", internalType: "address", type: "address" }
            ]
          },
          {
            name: "proxyAddressConfig",
            internalType: "struct SystemDictator.ProxyAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismPortalProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1StandardBridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1ERC721BridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "systemConfigProxy",
                internalType: "address",
                type: "address"
              }
            ]
          },
          {
            name: "implementationAddressConfig",
            internalType: "struct SystemDictator.ImplementationAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleImpl",
                internalType: "contract L2OutputOracle",
                type: "address"
              },
              {
                name: "optimismPortalImpl",
                internalType: "contract OptimismPortal",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerImpl",
                internalType: "contract L1CrossDomainMessenger",
                type: "address"
              },
              {
                name: "l1StandardBridgeImpl",
                internalType: "contract L1StandardBridge",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryImpl",
                internalType: "contract OptimismMintableERC20Factory",
                type: "address"
              },
              {
                name: "l1ERC721BridgeImpl",
                internalType: "contract L1ERC721Bridge",
                type: "address"
              },
              {
                name: "portalSenderImpl",
                internalType: "contract PortalSender",
                type: "address"
              },
              {
                name: "systemConfigImpl",
                internalType: "contract SystemConfig",
                type: "address"
              }
            ]
          },
          {
            name: "systemConfigConfig",
            internalType: "struct SystemDictator.SystemConfigConfig",
            type: "tuple",
            components: [
              { name: "owner", internalType: "address", type: "address" },
              { name: "overhead", internalType: "uint256", type: "uint256" },
              { name: "scalar", internalType: "uint256", type: "uint256" },
              { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
              { name: "gasLimit", internalType: "uint64", type: "uint64" },
              {
                name: "unsafeBlockSigner",
                internalType: "address",
                type: "address"
              },
              {
                name: "resourceConfig",
                internalType: "struct ResourceMetering.ResourceConfig",
                type: "tuple",
                components: [
                  {
                    name: "maxResourceLimit",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "elasticityMultiplier",
                    internalType: "uint8",
                    type: "uint8"
                  },
                  {
                    name: "baseFeeMaxChangeDenominator",
                    internalType: "uint8",
                    type: "uint8"
                  },
                  {
                    name: "minimumBaseFee",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "systemTxMaxGas",
                    internalType: "uint32",
                    type: "uint32"
                  },
                  {
                    name: "maximumBaseFee",
                    internalType: "uint128",
                    type: "uint128"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2OutputOracleDynamicConfig",
    outputs: [
      {
        name: "l2OutputOracleStartingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "l2OutputOracleStartingTimestamp",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oldL1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "optimismPortalDynamicConfig",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "phase1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "phase2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step3",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step4",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step5",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_l2OutputOracleDynamicConfig",
        internalType: "struct SystemDictator.L2OutputOracleDynamicConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleStartingBlockNumber",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "l2OutputOracleStartingTimestamp",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      },
      {
        name: "_optimismPortalDynamicConfig",
        internalType: "bool",
        type: "bool"
      }
    ],
    name: "updateDynamicConfig",
    outputs: []
  }
];
var systemDictatorAddress = {
  1: "0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB"
};
var systemDictatorConfig = {
  address: systemDictatorAddress,
  abi: systemDictatorABI
};
var systemDictatorGoerliABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EXIT_1_NO_RETURN_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PROXY_TRANSFER_STEP",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      {
        name: "globalConfig",
        internalType: "struct SystemDictator.GlobalConfig",
        type: "tuple",
        components: [
          {
            name: "addressManager",
            internalType: "contract AddressManager",
            type: "address"
          },
          {
            name: "proxyAdmin",
            internalType: "contract ProxyAdmin",
            type: "address"
          },
          { name: "controller", internalType: "address", type: "address" },
          { name: "finalOwner", internalType: "address", type: "address" }
        ]
      },
      {
        name: "proxyAddressConfig",
        internalType: "struct SystemDictator.ProxyAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismPortalProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1StandardBridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "l1ERC721BridgeProxy",
            internalType: "address",
            type: "address"
          },
          {
            name: "systemConfigProxy",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "implementationAddressConfig",
        internalType: "struct SystemDictator.ImplementationAddressConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleImpl",
            internalType: "contract L2OutputOracle",
            type: "address"
          },
          {
            name: "optimismPortalImpl",
            internalType: "contract OptimismPortal",
            type: "address"
          },
          {
            name: "l1CrossDomainMessengerImpl",
            internalType: "contract L1CrossDomainMessenger",
            type: "address"
          },
          {
            name: "l1StandardBridgeImpl",
            internalType: "contract L1StandardBridge",
            type: "address"
          },
          {
            name: "optimismMintableERC20FactoryImpl",
            internalType: "contract OptimismMintableERC20Factory",
            type: "address"
          },
          {
            name: "l1ERC721BridgeImpl",
            internalType: "contract L1ERC721Bridge",
            type: "address"
          },
          {
            name: "portalSenderImpl",
            internalType: "contract PortalSender",
            type: "address"
          },
          {
            name: "systemConfigImpl",
            internalType: "contract SystemConfig",
            type: "address"
          }
        ]
      },
      {
        name: "systemConfigConfig",
        internalType: "struct SystemDictator.SystemConfigConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "overhead", internalType: "uint256", type: "uint256" },
          { name: "scalar", internalType: "uint256", type: "uint256" },
          { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
          { name: "gasLimit", internalType: "uint64", type: "uint64" },
          {
            name: "unsafeBlockSigner",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "currentStep",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "dynamicConfigSet",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "exit1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "finalize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "finalized",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_config",
        internalType: "struct SystemDictator.DeployConfig",
        type: "tuple",
        components: [
          {
            name: "globalConfig",
            internalType: "struct SystemDictator.GlobalConfig",
            type: "tuple",
            components: [
              {
                name: "addressManager",
                internalType: "contract AddressManager",
                type: "address"
              },
              {
                name: "proxyAdmin",
                internalType: "contract ProxyAdmin",
                type: "address"
              },
              { name: "controller", internalType: "address", type: "address" },
              { name: "finalOwner", internalType: "address", type: "address" }
            ]
          },
          {
            name: "proxyAddressConfig",
            internalType: "struct SystemDictator.ProxyAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismPortalProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1StandardBridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "l1ERC721BridgeProxy",
                internalType: "address",
                type: "address"
              },
              {
                name: "systemConfigProxy",
                internalType: "address",
                type: "address"
              }
            ]
          },
          {
            name: "implementationAddressConfig",
            internalType: "struct SystemDictator.ImplementationAddressConfig",
            type: "tuple",
            components: [
              {
                name: "l2OutputOracleImpl",
                internalType: "contract L2OutputOracle",
                type: "address"
              },
              {
                name: "optimismPortalImpl",
                internalType: "contract OptimismPortal",
                type: "address"
              },
              {
                name: "l1CrossDomainMessengerImpl",
                internalType: "contract L1CrossDomainMessenger",
                type: "address"
              },
              {
                name: "l1StandardBridgeImpl",
                internalType: "contract L1StandardBridge",
                type: "address"
              },
              {
                name: "optimismMintableERC20FactoryImpl",
                internalType: "contract OptimismMintableERC20Factory",
                type: "address"
              },
              {
                name: "l1ERC721BridgeImpl",
                internalType: "contract L1ERC721Bridge",
                type: "address"
              },
              {
                name: "portalSenderImpl",
                internalType: "contract PortalSender",
                type: "address"
              },
              {
                name: "systemConfigImpl",
                internalType: "contract SystemConfig",
                type: "address"
              }
            ]
          },
          {
            name: "systemConfigConfig",
            internalType: "struct SystemDictator.SystemConfigConfig",
            type: "tuple",
            components: [
              { name: "owner", internalType: "address", type: "address" },
              { name: "overhead", internalType: "uint256", type: "uint256" },
              { name: "scalar", internalType: "uint256", type: "uint256" },
              { name: "batcherHash", internalType: "bytes32", type: "bytes32" },
              { name: "gasLimit", internalType: "uint64", type: "uint64" },
              {
                name: "unsafeBlockSigner",
                internalType: "address",
                type: "address"
              }
            ]
          }
        ]
      }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l2OutputOracleDynamicConfig",
    outputs: [
      {
        name: "l2OutputOracleStartingBlockNumber",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "l2OutputOracleStartingTimestamp",
        internalType: "uint256",
        type: "uint256"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oldL1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step1",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step2",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step3",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step4",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step5",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "step6",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_l2OutputOracleDynamicConfig",
        internalType: "struct SystemDictator.L2OutputOracleDynamicConfig",
        type: "tuple",
        components: [
          {
            name: "l2OutputOracleStartingBlockNumber",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "l2OutputOracleStartingTimestamp",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      }
    ],
    name: "updateL2OutputOracleDynamicConfig",
    outputs: []
  }
];
var systemDictatorGoerliAddress = {
  5: "0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971"
};
var systemDictatorGoerliConfig = {
  address: systemDictatorGoerliAddress,
  abi: systemDictatorGoerliABI
};
var teleportrWithdrawerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedETH"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewERC20"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false }
    ],
    name: "WithdrewERC721"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "withdrawer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "WithdrewETH"
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" },
      { name: "_value", internalType: "uint256", type: "uint256" }
    ],
    name: "CALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_data", internalType: "bytes", type: "bytes" },
      { name: "_gas", internalType: "uint256", type: "uint256" }
    ],
    name: "DELEGATECALL",
    outputs: [
      { name: "", internalType: "bool", type: "bool" },
      { name: "", internalType: "bytes", type: "bytes" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "data",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "recipient",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "setData",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "setRecipient",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_teleportr", internalType: "address", type: "address" }],
    name: "setTeleportr",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "teleportr",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC20", type: "address" },
      { name: "_to", internalType: "address", type: "address" }
    ],
    name: "withdrawERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_asset", internalType: "contract ERC721", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_id", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address payable", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_to", internalType: "address payable", type: "address" }],
    name: "withdrawETH",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdrawFromTeleportr",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var teleportrWithdrawerAddress = {
  1: "0x78A25524D90E3D0596558fb43789bD800a5c3007"
};
var teleportrWithdrawerConfig = {
  address: teleportrWithdrawerAddress,
  abi: teleportrWithdrawerABI
};
var attestationStationABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "about",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "key", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "AttestationCreated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_attestations",
        internalType: "struct AttestationStation.AttestationData[]",
        type: "tuple[]",
        components: [
          { name: "about", internalType: "address", type: "address" },
          { name: "key", internalType: "bytes32", type: "bytes32" },
          { name: "val", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_about", internalType: "address", type: "address" },
      { name: "_key", internalType: "bytes32", type: "bytes32" },
      { name: "_val", internalType: "bytes", type: "bytes" }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" }
    ],
    name: "attestations",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var attestationStationAddress = {
  10: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  420: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77"
};
var attestationStationConfig = {
  address: attestationStationAddress,
  abi: attestationStationABI
};
var l2Erc721BridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_messenger", internalType: "address", type: "address" },
      { name: "_otherBridge", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC721BridgeInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC721To",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_tokenId", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC721",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "otherBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l2Erc721BridgeAddress = {
  10: "0x4200000000000000000000000000000000000014",
  420: "0x4200000000000000000000000000000000000014"
};
var l2Erc721BridgeConfig = {
  address: l2Erc721BridgeAddress,
  abi: l2Erc721BridgeABI
};
var mintManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_upgrader", internalType: "address", type: "address" },
      { name: "_governanceToken", internalType: "address", type: "address" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DENOMINATOR",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINT_CAP",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINT_PERIOD",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "governanceToken",
    outputs: [
      { name: "", internalType: "contract GovernanceToken", type: "address" }
    ]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" }
    ],
    name: "mint",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "mintPermittedAfter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newMintManager", internalType: "address", type: "address" }
    ],
    name: "upgrade",
    outputs: []
  }
];
var mintManagerAddress = {
  10: "0x5C4e7Ba1E219E47948e6e3F55019A647bA501005",
  420: "0x038a8825A3C3B0c08d52Cc76E5E361953Cf6Dc76"
};
var mintManagerConfig = {
  address: mintManagerAddress,
  abi: mintManagerABI
};
var optimismMintableErc721FactoryABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_bridge", internalType: "address", type: "address" },
      { name: "_remoteChainId", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC721Created"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "bridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC721",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isOptimismMintableERC721",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "remoteChainId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc721FactoryAddress = {
  10: "0x4200000000000000000000000000000000000017"
};
var optimismMintableErc721FactoryConfig = {
  address: optimismMintableErc721FactoryAddress,
  abi: optimismMintableErc721FactoryABI
};
var optimismMintableErc721FactoryOptimismGoerliABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_bridge", internalType: "address", type: "address" },
      { name: "_remoteChainId", internalType: "uint256", type: "uint256" }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "deployer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OptimismMintableERC721Created"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BRIDGE",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "REMOTE_CHAIN_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "createOptimismMintableERC721",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isOptimismMintableERC721",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimismMintableErc721FactoryOptimismGoerliAddress = {
  420: "0x4200000000000000000000000000000000000017"
};
var optimismMintableErc721FactoryOptimismGoerliConfig = {
  address: optimismMintableErc721FactoryOptimismGoerliAddress,
  abi: optimismMintableErc721FactoryOptimismGoerliABI
};
var optimistABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_baseURIAttestor", internalType: "address", type: "address" },
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      },
      {
        name: "_optimistAllowlist",
        internalType: "contract OptimistAllowlist",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "approved",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "Transfer"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BASE_URI_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BASE_URI_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_ALLOWLIST",
    outputs: [
      { name: "", internalType: "contract OptimistAllowlist", type: "address" }
    ]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" }
    ],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "isOnAllowList",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }],
    name: "mint",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "safeTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_owner", internalType: "address", type: "address" }],
    name: "tokenIdOfAddress",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistAddress = {
  10: "0x2335022c740d17c2837f9C884Bfe4fFdbf0A95D5",
  420: "0x2335022c740d17c2837f9C884Bfe4fFdbf0A95D5"
};
var optimistConfig = {
  address: optimistAddress,
  abi: optimistABI
};
var optimistAllowlistABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      },
      { name: "_allowlistAttestor", internalType: "address", type: "address" },
      {
        name: "_coinbaseQuestAttestor",
        internalType: "address",
        type: "address"
      },
      { name: "_optimistInviter", internalType: "address", type: "address" }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ALLOWLIST_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "COINBASE_QUEST_ATTESTOR",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OPTIMIST_INVITER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_claimer", internalType: "address", type: "address" }],
    name: "isAllowedToMint",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistAllowlistAddress = {
  10: "0x482b1945D58f2E9Db0CEbe13c7fcFc6876b41180",
  420: "0x482b1945D58f2E9Db0CEbe13c7fcFc6876b41180"
};
var optimistAllowlistConfig = {
  address: optimistAllowlistAddress,
  abi: optimistAllowlistABI
};
var optimistInviterABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_inviteGranter", internalType: "address", type: "address" },
      {
        name: "_attestationStation",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "issuer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "claimer",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "InviteClaimed"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ATTESTATION_STATION",
    outputs: [
      {
        name: "",
        internalType: "contract AttestationStation",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CAN_INVITE_ATTESTATION_KEY",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "CLAIMABLE_INVITE_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "EIP712_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "INVITE_GRANTER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_COMMITMENT_PERIOD",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_claimer", internalType: "address", type: "address" },
      {
        name: "_claimableInvite",
        internalType: "struct OptimistInviter.ClaimableInvite",
        type: "tuple",
        components: [
          { name: "issuer", internalType: "address", type: "address" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "_signature", internalType: "bytes", type: "bytes" }
    ],
    name: "claimInvite",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_commitment", internalType: "bytes32", type: "bytes32" }],
    name: "commitInvite",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "commitmentTimestamps",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_name", internalType: "string", type: "string" }],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "inviteCounts",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_accounts", internalType: "address[]", type: "address[]" },
      { name: "_inviteCount", internalType: "uint256", type: "uint256" }
    ],
    name: "setInviteCounts",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" }
    ],
    name: "usedNonces",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var optimistInviterAddress = {
  10: "0x073031A1E1b8F5458Ed41Ce56331F5fd7e1de929",
  420: "0x073031A1E1b8F5458Ed41Ce56331F5fd7e1de929"
};
var optimistInviterConfig = {
  address: optimistInviterAddress,
  abi: optimistInviterABI
};
var baseFeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var baseFeeVaultAddress = {
  420: "0x4200000000000000000000000000000000000019"
};
var baseFeeVaultConfig = {
  address: baseFeeVaultAddress,
  abi: baseFeeVaultABI
};
var gasPriceOracleABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gasPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "getL1Fee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_data", internalType: "bytes", type: "bytes" }],
    name: "getL1GasUsed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1BaseFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "overhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "scalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var gasPriceOracleAddress = {
  420: "0x420000000000000000000000000000000000000F"
};
var gasPriceOracleConfig = {
  address: gasPriceOracleAddress,
  abi: gasPriceOracleABI
};
var l1BlockABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEPOSITOR_ACCOUNT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "basefee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "batcherHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeOverhead",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeScalar",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "number",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sequenceNumber",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_number", internalType: "uint64", type: "uint64" },
      { name: "_timestamp", internalType: "uint64", type: "uint64" },
      { name: "_basefee", internalType: "uint256", type: "uint256" },
      { name: "_hash", internalType: "bytes32", type: "bytes32" },
      { name: "_sequenceNumber", internalType: "uint64", type: "uint64" },
      { name: "_batcherHash", internalType: "bytes32", type: "bytes32" },
      { name: "_l1FeeOverhead", internalType: "uint256", type: "uint256" },
      { name: "_l1FeeScalar", internalType: "uint256", type: "uint256" }
    ],
    name: "setL1BlockValues",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "timestamp",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var l1BlockAddress = {
  420: "0x4200000000000000000000000000000000000015"
};
var l1BlockConfig = {
  address: l1BlockAddress,
  abi: l1BlockABI
};
var l1FeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var l1FeeVaultAddress = {
  420: "0x420000000000000000000000000000000000001A"
};
var l1FeeVaultConfig = {
  address: l1FeeVaultAddress,
  abi: l1FeeVaultABI
};
var l2CrossDomainMessengerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_l1CrossDomainMessenger",
        internalType: "address",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "FailedRelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RelayedMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "message", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "messageNonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessage"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentMessageExtension1"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_CALLDATA_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "OTHER_MESSENGER",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CALL_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_CONSTANT_OVERHEAD",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_GAS_CHECK_BUFFER",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RELAY_RESERVED_GAS",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "baseGas",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "failedMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "initialize",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1CrossDomainMessenger",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_nonce", internalType: "uint256", type: "uint256" },
      { name: "_sender", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_value", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint256", type: "uint256" },
      { name: "_message", internalType: "bytes", type: "bytes" }
    ],
    name: "relayMessage",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_message", internalType: "bytes", type: "bytes" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" }
    ],
    name: "sendMessage",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "successfulMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  }
];
var l2CrossDomainMessengerAddress = {
  420: "0x4200000000000000000000000000000000000007"
};
var l2CrossDomainMessengerConfig = {
  address: l2CrossDomainMessengerAddress,
  abi: l2CrossDomainMessengerABI
};
var l2StandardBridgeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_otherBridge",
        internalType: "address payable",
        type: "address"
      }
    ]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "DepositFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "localToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "remoteToken",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ERC20BridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeFinalized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "ETHBridgeInitiated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "l1Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "l2Token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "extraData",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "WithdrawalInitiated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeERC20To",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "bridgeETHTo",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "deposits",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_localToken", internalType: "address", type: "address" },
      { name: "_remoteToken", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeERC20",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeBridgeETH",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l1Token", internalType: "address", type: "address" },
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "finalizeDeposit",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1TokenBridge",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messenger",
    outputs: [
      {
        name: "",
        internalType: "contract CrossDomainMessenger",
        type: "address"
      }
    ]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "withdraw",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_l2Token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minGasLimit", internalType: "uint32", type: "uint32" },
      { name: "_extraData", internalType: "bytes", type: "bytes" }
    ],
    name: "withdrawTo",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var l2StandardBridgeAddress = {
  420: "0x4200000000000000000000000000000000000010"
};
var l2StandardBridgeConfig = {
  address: l2StandardBridgeAddress,
  abi: l2StandardBridgeABI
};
var l2ToL1MessagePasserABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "target",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "gasLimit",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false },
      {
        name: "withdrawalHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      }
    ],
    name: "MessagePassed"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "WithdrawerBalanceBurnt"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MESSAGE_VERSION",
    outputs: [{ name: "", internalType: "uint16", type: "uint16" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "burn",
    outputs: []
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_target", internalType: "address", type: "address" },
      { name: "_gasLimit", internalType: "uint256", type: "uint256" },
      { name: "_data", internalType: "bytes", type: "bytes" }
    ],
    name: "initiateWithdrawal",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "messageNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "sentMessages",
    outputs: [{ name: "", internalType: "bool", type: "bool" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  { stateMutability: "payable", type: "receive" }
];
var l2ToL1MessagePasserAddress = {
  420: "0x4200000000000000000000000000000000000016"
};
var l2ToL1MessagePasserConfig = {
  address: l2ToL1MessagePasserAddress,
  abi: l2ToL1MessagePasserABI
};
var sequencerFeeVaultABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_recipient", internalType: "address", type: "address" }]
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Withdrawal"
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_WITHDRAWAL_AMOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "RECIPIENT",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "l1FeeWallet",
    outputs: [{ name: "", internalType: "address", type: "address" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalProcessed",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: []
  },
  { stateMutability: "payable", type: "receive" }
];
var sequencerFeeVaultAddress = {
  420: "0x4200000000000000000000000000000000000011"
};
var sequencerFeeVaultConfig = {
  address: sequencerFeeVaultAddress,
  abi: sequencerFeeVaultABI
};
function useAddressManagerRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    ...config
  });
}
function useAddressManagerGetAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "getAddress",
    ...config
  });
}
function useAddressManagerOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "owner",
    ...config
  });
}
function useAddressManagerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    ...config
  });
}
function useAddressManagerRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)(
    {
      abi: addressManagerABI,
      address: addressManagerAddress[chainId],
      functionName: "renounceOwnership",
      ...config
    }
  );
}
function useAddressManagerSetAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "setAddress",
    ...config
  });
}
function useAddressManagerTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)(
    {
      abi: addressManagerABI,
      address: addressManagerAddress[chainId],
      functionName: "transferOwnership",
      ...config
    }
  );
}
function usePrepareAddressManagerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    ...config
  });
}
function usePrepareAddressManagerRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareAddressManagerSetAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "setAddress",
    ...config
  });
}
function usePrepareAddressManagerTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function useAddressManagerEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    ...config
  });
}
function useAddressManagerAddressSetEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    eventName: "AddressSet",
    ...config
  });
}
function useAddressManagerOwnershipTransferredEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: addressManagerABI,
    address: addressManagerAddress[chainId],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useAssetReceiverRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    ...config
  });
}
function useAssetReceiverOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "owner",
    ...config
  });
}
function useAssetReceiverWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    ...config
  });
}
function useAssetReceiverCall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "CALL",
    ...config
  });
}
function useAssetReceiverDelegatecall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "DELEGATECALL",
    ...config
  });
}
function useAssetReceiverSetOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "setOwner",
    ...config
  });
}
function useAssetReceiverWithdrawErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawERC20",
    ...config
  });
}
function useAssetReceiverWithdrawErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawERC721",
    ...config
  });
}
function useAssetReceiverWithdrawEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawETH",
    ...config
  });
}
function usePrepareAssetReceiverWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    ...config
  });
}
function usePrepareAssetReceiverCall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "CALL",
    ...config
  });
}
function usePrepareAssetReceiverDelegatecall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "DELEGATECALL",
    ...config
  });
}
function usePrepareAssetReceiverSetOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "setOwner",
    ...config
  });
}
function usePrepareAssetReceiverWithdrawErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawERC20",
    ...config
  });
}
function usePrepareAssetReceiverWithdrawErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawERC721",
    ...config
  });
}
function usePrepareAssetReceiverWithdrawEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    functionName: "withdrawETH",
    ...config
  });
}
function useAssetReceiverEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    ...config
  });
}
function useAssetReceiverOwnerUpdatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    eventName: "OwnerUpdated",
    ...config
  });
}
function useAssetReceiverReceivedEthEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    eventName: "ReceivedETH",
    ...config
  });
}
function useAssetReceiverWithdrewErc20Event(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    eventName: "WithdrewERC20",
    ...config
  });
}
function useAssetReceiverWithdrewErc721Event(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    eventName: "WithdrewERC721",
    ...config
  });
}
function useAssetReceiverWithdrewEthEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: assetReceiverABI,
    address: assetReceiverAddress[chainId],
    eventName: "WithdrewETH",
    ...config
  });
}
function useCheckBalanceHighRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[chainId],
    ...config
  });
}
function useCheckBalanceHighCheck(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[chainId],
    functionName: "check",
    ...config
  });
}
function useCheckBalanceHighEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[chainId],
    ...config
  });
}
function useCheckBalanceHighEventToExposeStructInAbiParamsEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkBalanceHighABI,
    address: checkBalanceHighAddress[chainId],
    eventName: "_EventToExposeStructInABI__Params",
    ...config
  });
}
function useCheckBalanceLowRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[chainId],
    ...config
  });
}
function useCheckBalanceLowCheck(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[chainId],
    functionName: "check",
    ...config
  });
}
function useCheckBalanceLowEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[chainId],
    ...config
  });
}
function useCheckBalanceLowEventToExposeStructInAbiParamsEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkBalanceLowABI,
    address: checkBalanceLowAddress[chainId],
    eventName: "_EventToExposeStructInABI__Params",
    ...config
  });
}
function useCheckGelatoLowRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[chainId],
    ...config
  });
}
function useCheckGelatoLowCheck(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[chainId],
    functionName: "check",
    ...config
  });
}
function useCheckGelatoLowEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[chainId],
    ...config
  });
}
function useCheckGelatoLowEventToExposeStructInAbiParamsEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: checkGelatoLowABI,
    address: checkGelatoLowAddress[chainId],
    eventName: "_EventToExposeStructInABI__Params",
    ...config
  });
}
function useCheckTrueRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkTrueABI,
    address: checkTrueAddress[chainId],
    ...config
  });
}
function useCheckTrueCheck(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: checkTrueABI,
    address: checkTrueAddress[chainId],
    functionName: "check",
    ...config
  });
}
function useDrippieRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function useDrippieDrips(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "drips",
    ...config
  });
}
function useDrippieExecutable(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "executable",
    ...config
  });
}
function useDrippieOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "owner",
    ...config
  });
}
function useDrippieWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function useDrippieCall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "CALL",
    ...config
  });
}
function useDrippieDelegatecall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "DELEGATECALL",
    ...config
  });
}
function useDrippieCreate(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "create",
    ...config
  });
}
function useDrippieDrip(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "drip",
    ...config
  });
}
function useDrippieSetOwner(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "setOwner",
    ...config
  });
}
function useDrippieStatus(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "status",
    ...config
  });
}
function useDrippieWithdrawErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawERC20",
    ...config
  });
}
function useDrippieWithdrawErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawERC721",
    ...config
  });
}
function useDrippieWithdrawEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawETH",
    ...config
  });
}
function usePrepareDrippieWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function usePrepareDrippieCall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "CALL",
    ...config
  });
}
function usePrepareDrippieDelegatecall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "DELEGATECALL",
    ...config
  });
}
function usePrepareDrippieCreate(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "create",
    ...config
  });
}
function usePrepareDrippieDrip(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "drip",
    ...config
  });
}
function usePrepareDrippieSetOwner(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "setOwner",
    ...config
  });
}
function usePrepareDrippieStatus(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "status",
    ...config
  });
}
function usePrepareDrippieWithdrawErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawERC20",
    ...config
  });
}
function usePrepareDrippieWithdrawErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawERC721",
    ...config
  });
}
function usePrepareDrippieWithdrawEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieABI,
    address: drippieAddress[1],
    functionName: "withdrawETH",
    ...config
  });
}
function useDrippieEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    ...config
  });
}
function useDrippieDripCreatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "DripCreated",
    ...config
  });
}
function useDrippieDripExecutedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "DripExecuted",
    ...config
  });
}
function useDrippieDripStatusUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "DripStatusUpdated",
    ...config
  });
}
function useDrippieOwnerUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "OwnerUpdated",
    ...config
  });
}
function useDrippieReceivedEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "ReceivedETH",
    ...config
  });
}
function useDrippieWithdrewErc20Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "WithdrewERC20",
    ...config
  });
}
function useDrippieWithdrewErc721Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "WithdrewERC721",
    ...config
  });
}
function useDrippieWithdrewEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieABI,
    address: drippieAddress[1],
    eventName: "WithdrewETH",
    ...config
  });
}
function useDrippieGoerliRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function useDrippieGoerliDrips(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "drips",
    ...config
  });
}
function useDrippieGoerliExecutable(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "executable",
    ...config
  });
}
function useDrippieGoerliOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "owner",
    ...config
  });
}
function useDrippieGoerliWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function useDrippieGoerliCall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "CALL",
    ...config
  });
}
function useDrippieGoerliDelegatecall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "DELEGATECALL",
    ...config
  });
}
function useDrippieGoerliCreate(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "create",
    ...config
  });
}
function useDrippieGoerliDrip(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "drip",
    ...config
  });
}
function useDrippieGoerliSetOwner(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "setOwner",
    ...config
  });
}
function useDrippieGoerliStatus(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "status",
    ...config
  });
}
function useDrippieGoerliWithdrawErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawERC20",
    ...config
  });
}
function useDrippieGoerliWithdrawErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawERC721",
    ...config
  });
}
function useDrippieGoerliWithdrawEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawETH",
    ...config
  });
}
function usePrepareDrippieGoerliWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function usePrepareDrippieGoerliCall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "CALL",
    ...config
  });
}
function usePrepareDrippieGoerliDelegatecall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "DELEGATECALL",
    ...config
  });
}
function usePrepareDrippieGoerliCreate(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "create",
    ...config
  });
}
function usePrepareDrippieGoerliDrip(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "drip",
    ...config
  });
}
function usePrepareDrippieGoerliSetOwner(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "setOwner",
    ...config
  });
}
function usePrepareDrippieGoerliStatus(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "status",
    ...config
  });
}
function usePrepareDrippieGoerliWithdrawErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawERC20",
    ...config
  });
}
function usePrepareDrippieGoerliWithdrawErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawERC721",
    ...config
  });
}
function usePrepareDrippieGoerliWithdrawEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    functionName: "withdrawETH",
    ...config
  });
}
function useDrippieGoerliEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    ...config
  });
}
function useDrippieGoerliDripCreatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "DripCreated",
    ...config
  });
}
function useDrippieGoerliDripExecutedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "DripExecuted",
    ...config
  });
}
function useDrippieGoerliDripStatusUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "DripStatusUpdated",
    ...config
  });
}
function useDrippieGoerliOwnerUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "OwnerUpdated",
    ...config
  });
}
function useDrippieGoerliReceivedEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "ReceivedETH",
    ...config
  });
}
function useDrippieGoerliWithdrewErc20Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "WithdrewERC20",
    ...config
  });
}
function useDrippieGoerliWithdrewErc721Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "WithdrewERC721",
    ...config
  });
}
function useDrippieGoerliWithdrewEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieGoerliABI,
    address: drippieGoerliAddress[5],
    eventName: "WithdrewETH",
    ...config
  });
}
function useDrippieOptimismGoerliRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function useDrippieOptimismGoerliDrips(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "drips",
    ...config
  });
}
function useDrippieOptimismGoerliExecutable(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "executable",
    ...config
  });
}
function useDrippieOptimismGoerliOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "owner",
    ...config
  });
}
function useDrippieOptimismGoerliWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function useDrippieOptimismGoerliCall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "CALL",
    ...config
  });
}
function useDrippieOptimismGoerliDelegatecall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "DELEGATECALL",
    ...config
  });
}
function useDrippieOptimismGoerliCreate(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "create",
    ...config
  });
}
function useDrippieOptimismGoerliDrip(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "drip",
    ...config
  });
}
function useDrippieOptimismGoerliSetOwner(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "setOwner",
    ...config
  });
}
function useDrippieOptimismGoerliStatus(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "status",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrawErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawERC20",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrawErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawERC721",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrawEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawETH",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function usePrepareDrippieOptimismGoerliCall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "CALL",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliDelegatecall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "DELEGATECALL",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliCreate(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "create",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliDrip(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "drip",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliSetOwner(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "setOwner",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliStatus(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "status",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliWithdrawErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawERC20",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliWithdrawErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawERC721",
    ...config
  });
}
function usePrepareDrippieOptimismGoerliWithdrawEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    functionName: "withdrawETH",
    ...config
  });
}
function useDrippieOptimismGoerliEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    ...config
  });
}
function useDrippieOptimismGoerliDripCreatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "DripCreated",
    ...config
  });
}
function useDrippieOptimismGoerliDripExecutedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "DripExecuted",
    ...config
  });
}
function useDrippieOptimismGoerliDripStatusUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "DripStatusUpdated",
    ...config
  });
}
function useDrippieOptimismGoerliOwnerUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "OwnerUpdated",
    ...config
  });
}
function useDrippieOptimismGoerliReceivedEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "ReceivedETH",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrewErc20Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "WithdrewERC20",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrewErc721Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "WithdrewERC721",
    ...config
  });
}
function useDrippieOptimismGoerliWithdrewEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: drippieOptimismGoerliABI,
    address: drippieOptimismGoerliAddress[420],
    eventName: "WithdrewETH",
    ...config
  });
}
function useL1CrossDomainMessengerRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    ...config
  });
}
function useL1CrossDomainMessengerMessageVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "MESSAGE_VERSION",
    ...config
  });
}
function useL1CrossDomainMessengerMinGasCalldataOverhead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "MIN_GAS_CALLDATA_OVERHEAD",
    ...config
  });
}
function useL1CrossDomainMessengerMinGasDynamicOverheadDenominator(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    ...config
  });
}
function useL1CrossDomainMessengerMinGasDynamicOverheadNumerator(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    ...config
  });
}
function useL1CrossDomainMessengerOtherMessenger(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "OTHER_MESSENGER",
    ...config
  });
}
function useL1CrossDomainMessengerPortal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "PORTAL",
    ...config
  });
}
function useL1CrossDomainMessengerRelayCallOverhead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "RELAY_CALL_OVERHEAD",
    ...config
  });
}
function useL1CrossDomainMessengerRelayConstantOverhead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "RELAY_CONSTANT_OVERHEAD",
    ...config
  });
}
function useL1CrossDomainMessengerRelayGasCheckBuffer(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "RELAY_GAS_CHECK_BUFFER",
    ...config
  });
}
function useL1CrossDomainMessengerRelayReservedGas(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "RELAY_RESERVED_GAS",
    ...config
  });
}
function useL1CrossDomainMessengerBaseGas(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "baseGas",
    ...config
  });
}
function useL1CrossDomainMessengerFailedMessages(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "failedMessages",
    ...config
  });
}
function useL1CrossDomainMessengerMessageNonce(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "messageNonce",
    ...config
  });
}
function useL1CrossDomainMessengerSuccessfulMessages(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "successfulMessages",
    ...config
  });
}
function useL1CrossDomainMessengerVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useL1CrossDomainMessengerXDomainMessageSender(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "xDomainMessageSender",
    ...config
  });
}
function useL1CrossDomainMessengerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    ...config
  });
}
function useL1CrossDomainMessengerInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useL1CrossDomainMessengerRelayMessage(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "relayMessage",
    ...config
  });
}
function useL1CrossDomainMessengerSendMessage(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "sendMessage",
    ...config
  });
}
function usePrepareL1CrossDomainMessengerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    ...config
  });
}
function usePrepareL1CrossDomainMessengerInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareL1CrossDomainMessengerRelayMessage(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "relayMessage",
    ...config
  });
}
function usePrepareL1CrossDomainMessengerSendMessage(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    functionName: "sendMessage",
    ...config
  });
}
function useL1CrossDomainMessengerEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    ...config
  });
}
function useL1CrossDomainMessengerFailedRelayedMessageEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    eventName: "FailedRelayedMessage",
    ...config
  });
}
function useL1CrossDomainMessengerInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useL1CrossDomainMessengerRelayedMessageEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    eventName: "RelayedMessage",
    ...config
  });
}
function useL1CrossDomainMessengerSentMessageEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    eventName: "SentMessage",
    ...config
  });
}
function useL1CrossDomainMessengerSentMessageExtension1Event(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1CrossDomainMessengerABI,
    address: l1CrossDomainMessengerAddress[chainId],
    eventName: "SentMessageExtension1",
    ...config
  });
}
function useL1Erc721BridgeRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL1Erc721BridgeDeposits(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "deposits",
    ...config
  });
}
function useL1Erc721BridgeMessenger(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "messenger",
    ...config
  });
}
function useL1Erc721BridgeOtherBridge(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "otherBridge",
    ...config
  });
}
function useL1Erc721BridgeVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useL1Erc721BridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL1Erc721BridgeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721",
    ...config
  });
}
function useL1Erc721BridgeBridgeErc721To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721To",
    ...config
  });
}
function useL1Erc721BridgeFinalizeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "finalizeBridgeERC721",
    ...config
  });
}
function usePrepareL1Erc721BridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    ...config
  });
}
function usePrepareL1Erc721BridgeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721",
    ...config
  });
}
function usePrepareL1Erc721BridgeBridgeErc721To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721To",
    ...config
  });
}
function usePrepareL1Erc721BridgeFinalizeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    functionName: "finalizeBridgeERC721",
    ...config
  });
}
function useL1Erc721BridgeEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL1Erc721BridgeErc721BridgeFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    eventName: "ERC721BridgeFinalized",
    ...config
  });
}
function useL1Erc721BridgeErc721BridgeInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1Erc721BridgeABI,
    address: l1Erc721BridgeAddress[chainId],
    eventName: "ERC721BridgeInitiated",
    ...config
  });
}
function useL1StandardBridgeRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    ...config
  });
}
function useL1StandardBridgeDeposits(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "deposits",
    ...config
  });
}
function useL1StandardBridgeL2TokenBridge(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "l2TokenBridge",
    ...config
  });
}
function useL1StandardBridgeMessenger(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "messenger",
    ...config
  });
}
function useL1StandardBridgeVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useL1StandardBridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    ...config
  });
}
function useL1StandardBridgeBridgeErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeERC20",
    ...config
  });
}
function useL1StandardBridgeBridgeErc20To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeERC20To",
    ...config
  });
}
function useL1StandardBridgeBridgeEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeETH",
    ...config
  });
}
function useL1StandardBridgeBridgeEthTo(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeETHTo",
    ...config
  });
}
function useL1StandardBridgeDepositErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositERC20",
    ...config
  });
}
function useL1StandardBridgeDepositErc20To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositERC20To",
    ...config
  });
}
function useL1StandardBridgeDepositEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositETH",
    ...config
  });
}
function useL1StandardBridgeDepositEthTo(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositETHTo",
    ...config
  });
}
function useL1StandardBridgeFinalizeBridgeErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeBridgeERC20",
    ...config
  });
}
function useL1StandardBridgeFinalizeBridgeEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeBridgeETH",
    ...config
  });
}
function useL1StandardBridgeFinalizeErc20Withdrawal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeERC20Withdrawal",
    ...config
  });
}
function useL1StandardBridgeFinalizeEthWithdrawal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeETHWithdrawal",
    ...config
  });
}
function usePrepareL1StandardBridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    ...config
  });
}
function usePrepareL1StandardBridgeBridgeErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeERC20",
    ...config
  });
}
function usePrepareL1StandardBridgeBridgeErc20To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeERC20To",
    ...config
  });
}
function usePrepareL1StandardBridgeBridgeEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeETH",
    ...config
  });
}
function usePrepareL1StandardBridgeBridgeEthTo(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "bridgeETHTo",
    ...config
  });
}
function usePrepareL1StandardBridgeDepositErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositERC20",
    ...config
  });
}
function usePrepareL1StandardBridgeDepositErc20To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositERC20To",
    ...config
  });
}
function usePrepareL1StandardBridgeDepositEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositETH",
    ...config
  });
}
function usePrepareL1StandardBridgeDepositEthTo(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "depositETHTo",
    ...config
  });
}
function usePrepareL1StandardBridgeFinalizeBridgeErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeBridgeERC20",
    ...config
  });
}
function usePrepareL1StandardBridgeFinalizeBridgeEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeBridgeETH",
    ...config
  });
}
function usePrepareL1StandardBridgeFinalizeErc20Withdrawal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeERC20Withdrawal",
    ...config
  });
}
function usePrepareL1StandardBridgeFinalizeEthWithdrawal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    functionName: "finalizeETHWithdrawal",
    ...config
  });
}
function useL1StandardBridgeEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    ...config
  });
}
function useL1StandardBridgeErc20BridgeFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ERC20BridgeFinalized",
    ...config
  });
}
function useL1StandardBridgeErc20BridgeInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ERC20BridgeInitiated",
    ...config
  });
}
function useL1StandardBridgeErc20DepositInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ERC20DepositInitiated",
    ...config
  });
}
function useL1StandardBridgeErc20WithdrawalFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ERC20WithdrawalFinalized",
    ...config
  });
}
function useL1StandardBridgeEthBridgeFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ETHBridgeFinalized",
    ...config
  });
}
function useL1StandardBridgeEthBridgeInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ETHBridgeInitiated",
    ...config
  });
}
function useL1StandardBridgeEthDepositInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ETHDepositInitiated",
    ...config
  });
}
function useL1StandardBridgeEthWithdrawalFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l1StandardBridgeABI,
    address: l1StandardBridgeAddress[chainId],
    eventName: "ETHWithdrawalFinalized",
    ...config
  });
}
function useL2OutputOracleRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    ...config
  });
}
function useL2OutputOracleChallenger(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "CHALLENGER",
    ...config
  });
}
function useL2OutputOracleFinalizationPeriodSeconds(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "FINALIZATION_PERIOD_SECONDS",
    ...config
  });
}
function useL2OutputOracleL2BlockTime(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "L2_BLOCK_TIME",
    ...config
  });
}
function useL2OutputOracleProposer(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "PROPOSER",
    ...config
  });
}
function useL2OutputOracleSubmissionInterval(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "SUBMISSION_INTERVAL",
    ...config
  });
}
function useL2OutputOracleComputeL2Timestamp(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "computeL2Timestamp",
    ...config
  });
}
function useL2OutputOracleGetL2Output(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "getL2Output",
    ...config
  });
}
function useL2OutputOracleGetL2OutputAfter(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "getL2OutputAfter",
    ...config
  });
}
function useL2OutputOracleGetL2OutputIndexAfter(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "getL2OutputIndexAfter",
    ...config
  });
}
function useL2OutputOracleLatestBlockNumber(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "latestBlockNumber",
    ...config
  });
}
function useL2OutputOracleLatestOutputIndex(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "latestOutputIndex",
    ...config
  });
}
function useL2OutputOracleNextBlockNumber(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "nextBlockNumber",
    ...config
  });
}
function useL2OutputOracleNextOutputIndex(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "nextOutputIndex",
    ...config
  });
}
function useL2OutputOracleStartingBlockNumber(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "startingBlockNumber",
    ...config
  });
}
function useL2OutputOracleStartingTimestamp(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "startingTimestamp",
    ...config
  });
}
function useL2OutputOracleVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useL2OutputOracleWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    ...config
  });
}
function useL2OutputOracleDeleteL2Outputs(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "deleteL2Outputs",
    ...config
  });
}
function useL2OutputOracleInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useL2OutputOracleProposeL2Output(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "proposeL2Output",
    ...config
  });
}
function usePrepareL2OutputOracleWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    ...config
  });
}
function usePrepareL2OutputOracleDeleteL2Outputs(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "deleteL2Outputs",
    ...config
  });
}
function usePrepareL2OutputOracleInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareL2OutputOracleProposeL2Output(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    functionName: "proposeL2Output",
    ...config
  });
}
function useL2OutputOracleEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    ...config
  });
}
function useL2OutputOracleInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useL2OutputOracleOutputProposedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    eventName: "OutputProposed",
    ...config
  });
}
function useL2OutputOracleOutputsDeletedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2OutputOracleABI,
    address: l2OutputOracleAddress[chainId],
    eventName: "OutputsDeleted",
    ...config
  });
}
function useOptimismMintableErc20FactoryRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    ...config
  });
}
function useOptimismMintableErc20FactoryBridge(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "BRIDGE",
    ...config
  });
}
function useOptimismMintableErc20FactoryVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useOptimismMintableErc20FactoryWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    ...config
  });
}
function useOptimismMintableErc20FactoryCreateOptimismMintableErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "createOptimismMintableERC20",
    ...config
  });
}
function useOptimismMintableErc20FactoryCreateStandardL2Token(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "createStandardL2Token",
    ...config
  });
}
function usePrepareOptimismMintableErc20FactoryWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    ...config
  });
}
function usePrepareOptimismMintableErc20FactoryCreateOptimismMintableErc20(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "createOptimismMintableERC20",
    ...config
  });
}
function usePrepareOptimismMintableErc20FactoryCreateStandardL2Token(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    functionName: "createStandardL2Token",
    ...config
  });
}
function useOptimismMintableErc20FactoryEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    ...config
  });
}
function useOptimismMintableErc20FactoryOptimismMintableErc20CreatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    eventName: "OptimismMintableERC20Created",
    ...config
  });
}
function useOptimismMintableErc20FactoryStandardL2TokenCreatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc20FactoryABI,
    address: optimismMintableErc20FactoryAddress[chainId],
    eventName: "StandardL2TokenCreated",
    ...config
  });
}
function useOptimismPortalRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    ...config
  });
}
function useOptimismPortalGuardian(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "GUARDIAN",
    ...config
  });
}
function useOptimismPortalL2Oracle(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "L2_ORACLE",
    ...config
  });
}
function useOptimismPortalSystemConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "SYSTEM_CONFIG",
    ...config
  });
}
function useOptimismPortalFinalizedWithdrawals(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "finalizedWithdrawals",
    ...config
  });
}
function useOptimismPortalIsOutputFinalized(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "isOutputFinalized",
    ...config
  });
}
function useOptimismPortalL2Sender(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "l2Sender",
    ...config
  });
}
function useOptimismPortalMinimumGasLimit(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "minimumGasLimit",
    ...config
  });
}
function useOptimismPortalParams(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "params",
    ...config
  });
}
function useOptimismPortalPaused(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "paused",
    ...config
  });
}
function useOptimismPortalProvenWithdrawals(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "provenWithdrawals",
    ...config
  });
}
function useOptimismPortalVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useOptimismPortalWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    ...config
  });
}
function useOptimismPortalDepositTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "depositTransaction",
    ...config
  });
}
function useOptimismPortalDonateEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "donateETH",
    ...config
  });
}
function useOptimismPortalFinalizeWithdrawalTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "finalizeWithdrawalTransaction",
    ...config
  });
}
function useOptimismPortalInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useOptimismPortalPause(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "pause",
    ...config
  });
}
function useOptimismPortalProveWithdrawalTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "proveWithdrawalTransaction",
    ...config
  });
}
function useOptimismPortalUnpause(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "unpause",
    ...config
  });
}
function usePrepareOptimismPortalWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    ...config
  });
}
function usePrepareOptimismPortalDepositTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "depositTransaction",
    ...config
  });
}
function usePrepareOptimismPortalDonateEth(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "donateETH",
    ...config
  });
}
function usePrepareOptimismPortalFinalizeWithdrawalTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "finalizeWithdrawalTransaction",
    ...config
  });
}
function usePrepareOptimismPortalInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareOptimismPortalPause(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "pause",
    ...config
  });
}
function usePrepareOptimismPortalProveWithdrawalTransaction(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "proveWithdrawalTransaction",
    ...config
  });
}
function usePrepareOptimismPortalUnpause(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    functionName: "unpause",
    ...config
  });
}
function useOptimismPortalEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    ...config
  });
}
function useOptimismPortalInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useOptimismPortalPausedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "Paused",
    ...config
  });
}
function useOptimismPortalTransactionDepositedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "TransactionDeposited",
    ...config
  });
}
function useOptimismPortalUnpausedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "Unpaused",
    ...config
  });
}
function useOptimismPortalWithdrawalFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "WithdrawalFinalized",
    ...config
  });
}
function useOptimismPortalWithdrawalProvenEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimismPortalABI,
    address: optimismPortalAddress[chainId],
    eventName: "WithdrawalProven",
    ...config
  });
}
function usePortalSenderRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    ...config
  });
}
function usePortalSenderPortal(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    functionName: "PORTAL",
    ...config
  });
}
function usePortalSenderWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    ...config
  });
}
function usePortalSenderDonate(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    functionName: "donate",
    ...config
  });
}
function usePreparePortalSenderWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    ...config
  });
}
function usePreparePortalSenderDonate(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: portalSenderABI,
    address: portalSenderAddress[chainId],
    functionName: "donate",
    ...config
  });
}
function useProxyAdminRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    ...config
  });
}
function useProxyAdminAddressManager(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "addressManager",
    ...config
  });
}
function useProxyAdminGetProxyAdmin(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "getProxyAdmin",
    ...config
  });
}
function useProxyAdminGetProxyImplementation(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "getProxyImplementation",
    ...config
  });
}
function useProxyAdminImplementationName(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "implementationName",
    ...config
  });
}
function useProxyAdminIsUpgrading(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "isUpgrading",
    ...config
  });
}
function useProxyAdminOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "owner",
    ...config
  });
}
function useProxyAdminProxyType(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "proxyType",
    ...config
  });
}
function useProxyAdminWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    ...config
  });
}
function useProxyAdminChangeProxyAdmin(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "changeProxyAdmin",
    ...config
  });
}
function useProxyAdminRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function useProxyAdminSetAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setAddress",
    ...config
  });
}
function useProxyAdminSetAddressManager(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setAddressManager",
    ...config
  });
}
function useProxyAdminSetImplementationName(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)(
    {
      abi: proxyAdminABI,
      address: proxyAdminAddress[chainId],
      functionName: "setImplementationName",
      ...config
    }
  );
}
function useProxyAdminSetProxyType(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setProxyType",
    ...config
  });
}
function useProxyAdminSetUpgrading(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setUpgrading",
    ...config
  });
}
function useProxyAdminTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function useProxyAdminUpgrade(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "upgrade",
    ...config
  });
}
function useProxyAdminUpgradeAndCall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "upgradeAndCall",
    ...config
  });
}
function usePrepareProxyAdminWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    ...config
  });
}
function usePrepareProxyAdminChangeProxyAdmin(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "changeProxyAdmin",
    ...config
  });
}
function usePrepareProxyAdminRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareProxyAdminSetAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setAddress",
    ...config
  });
}
function usePrepareProxyAdminSetAddressManager(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setAddressManager",
    ...config
  });
}
function usePrepareProxyAdminSetImplementationName(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setImplementationName",
    ...config
  });
}
function usePrepareProxyAdminSetProxyType(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setProxyType",
    ...config
  });
}
function usePrepareProxyAdminSetUpgrading(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "setUpgrading",
    ...config
  });
}
function usePrepareProxyAdminTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function usePrepareProxyAdminUpgrade(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "upgrade",
    ...config
  });
}
function usePrepareProxyAdminUpgradeAndCall(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    functionName: "upgradeAndCall",
    ...config
  });
}
function useProxyAdminEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    ...config
  });
}
function useProxyAdminOwnershipTransferredEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: proxyAdminABI,
    address: proxyAdminAddress[chainId],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useSystemConfigRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    ...config
  });
}
function useSystemConfigUnsafeBlockSignerSlot(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "UNSAFE_BLOCK_SIGNER_SLOT",
    ...config
  });
}
function useSystemConfigBatcherHash(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "batcherHash",
    ...config
  });
}
function useSystemConfigGasLimit(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "gasLimit",
    ...config
  });
}
function useSystemConfigMinimumGasLimit(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "minimumGasLimit",
    ...config
  });
}
function useSystemConfigOverhead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "overhead",
    ...config
  });
}
function useSystemConfigOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "owner",
    ...config
  });
}
function useSystemConfigResourceConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "resourceConfig",
    ...config
  });
}
function useSystemConfigScalar(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "scalar",
    ...config
  });
}
function useSystemConfigUnsafeBlockSigner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "unsafeBlockSigner",
    ...config
  });
}
function useSystemConfigVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useSystemConfigWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    ...config
  });
}
function useSystemConfigInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useSystemConfigRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function useSystemConfigSetBatcherHash(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setBatcherHash",
    ...config
  });
}
function useSystemConfigSetGasConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setGasConfig",
    ...config
  });
}
function useSystemConfigSetGasLimit(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setGasLimit",
    ...config
  });
}
function useSystemConfigSetResourceConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setResourceConfig",
    ...config
  });
}
function useSystemConfigSetUnsafeBlockSigner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setUnsafeBlockSigner",
    ...config
  });
}
function useSystemConfigTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function usePrepareSystemConfigWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    ...config
  });
}
function usePrepareSystemConfigInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareSystemConfigRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareSystemConfigSetBatcherHash(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setBatcherHash",
    ...config
  });
}
function usePrepareSystemConfigSetGasConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setGasConfig",
    ...config
  });
}
function usePrepareSystemConfigSetGasLimit(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setGasLimit",
    ...config
  });
}
function usePrepareSystemConfigSetResourceConfig(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setResourceConfig",
    ...config
  });
}
function usePrepareSystemConfigSetUnsafeBlockSigner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "setUnsafeBlockSigner",
    ...config
  });
}
function usePrepareSystemConfigTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function useSystemConfigEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    ...config
  });
}
function useSystemConfigConfigUpdateEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    eventName: "ConfigUpdate",
    ...config
  });
}
function useSystemConfigInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useSystemConfigOwnershipTransferredEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: systemConfigABI,
    address: systemConfigAddress[chainId],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useSystemDictatorRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function useSystemDictatorExit_1NoReturnStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "EXIT_1_NO_RETURN_STEP",
    ...config
  });
}
function useSystemDictatorProxyTransferStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "PROXY_TRANSFER_STEP",
    ...config
  });
}
function useSystemDictatorConfig(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "config",
    ...config
  });
}
function useSystemDictatorCurrentStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "currentStep",
    ...config
  });
}
function useSystemDictatorDynamicConfigSet(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "dynamicConfigSet",
    ...config
  });
}
function useSystemDictatorExited(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "exited",
    ...config
  });
}
function useSystemDictatorFinalized(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "finalized",
    ...config
  });
}
function useSystemDictatorL2OutputOracleDynamicConfig(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "l2OutputOracleDynamicConfig",
    ...config
  });
}
function useSystemDictatorOldL1CrossDomainMessenger(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "oldL1CrossDomainMessenger",
    ...config
  });
}
function useSystemDictatorOptimismPortalDynamicConfig(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "optimismPortalDynamicConfig",
    ...config
  });
}
function useSystemDictatorOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "owner",
    ...config
  });
}
function useSystemDictatorWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function useSystemDictatorExit1(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "exit1",
    ...config
  });
}
function useSystemDictatorFinalize(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "finalize",
    ...config
  });
}
function useSystemDictatorInitialize(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "initialize",
    ...config
  });
}
function useSystemDictatorPhase1(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "phase1",
    ...config
  });
}
function useSystemDictatorPhase2(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "phase2",
    ...config
  });
}
function useSystemDictatorRenounceOwnership(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: systemDictatorABI,
      address: systemDictatorAddress[1],
      functionName: "renounceOwnership",
      ...config
    }
  );
}
function useSystemDictatorStep1(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step1",
    ...config
  });
}
function useSystemDictatorStep2(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step2",
    ...config
  });
}
function useSystemDictatorStep3(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step3",
    ...config
  });
}
function useSystemDictatorStep4(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step4",
    ...config
  });
}
function useSystemDictatorStep5(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step5",
    ...config
  });
}
function useSystemDictatorTransferOwnership(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: systemDictatorABI,
      address: systemDictatorAddress[1],
      functionName: "transferOwnership",
      ...config
    }
  );
}
function useSystemDictatorUpdateDynamicConfig(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "updateDynamicConfig",
    ...config
  });
}
function usePrepareSystemDictatorWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function usePrepareSystemDictatorExit1(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "exit1",
    ...config
  });
}
function usePrepareSystemDictatorFinalize(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "finalize",
    ...config
  });
}
function usePrepareSystemDictatorInitialize(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "initialize",
    ...config
  });
}
function usePrepareSystemDictatorPhase1(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "phase1",
    ...config
  });
}
function usePrepareSystemDictatorPhase2(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "phase2",
    ...config
  });
}
function usePrepareSystemDictatorRenounceOwnership(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareSystemDictatorStep1(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step1",
    ...config
  });
}
function usePrepareSystemDictatorStep2(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step2",
    ...config
  });
}
function usePrepareSystemDictatorStep3(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step3",
    ...config
  });
}
function usePrepareSystemDictatorStep4(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step4",
    ...config
  });
}
function usePrepareSystemDictatorStep5(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "step5",
    ...config
  });
}
function usePrepareSystemDictatorTransferOwnership(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "transferOwnership",
    ...config
  });
}
function usePrepareSystemDictatorUpdateDynamicConfig(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    functionName: "updateDynamicConfig",
    ...config
  });
}
function useSystemDictatorEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    ...config
  });
}
function useSystemDictatorInitializedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    eventName: "Initialized",
    ...config
  });
}
function useSystemDictatorOwnershipTransferredEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorABI,
    address: systemDictatorAddress[1],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useSystemDictatorGoerliRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function useSystemDictatorGoerliExit_1NoReturnStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "EXIT_1_NO_RETURN_STEP",
    ...config
  });
}
function useSystemDictatorGoerliProxyTransferStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "PROXY_TRANSFER_STEP",
    ...config
  });
}
function useSystemDictatorGoerliConfig(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "config",
    ...config
  });
}
function useSystemDictatorGoerliCurrentStep(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "currentStep",
    ...config
  });
}
function useSystemDictatorGoerliDynamicConfigSet(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "dynamicConfigSet",
    ...config
  });
}
function useSystemDictatorGoerliFinalized(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "finalized",
    ...config
  });
}
function useSystemDictatorGoerliL2OutputOracleDynamicConfig(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "l2OutputOracleDynamicConfig",
    ...config
  });
}
function useSystemDictatorGoerliOldL1CrossDomainMessenger(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "oldL1CrossDomainMessenger",
    ...config
  });
}
function useSystemDictatorGoerliOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "owner",
    ...config
  });
}
function useSystemDictatorGoerliWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: systemDictatorGoerliABI,
      address: systemDictatorGoerliAddress[5],
      ...config
    }
  );
}
function useSystemDictatorGoerliExit1(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "exit1",
    ...config
  });
}
function useSystemDictatorGoerliFinalize(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "finalize",
    ...config
  });
}
function useSystemDictatorGoerliInitialize(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "initialize",
    ...config
  });
}
function useSystemDictatorGoerliRenounceOwnership(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "renounceOwnership",
    ...config
  });
}
function useSystemDictatorGoerliStep1(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step1",
    ...config
  });
}
function useSystemDictatorGoerliStep2(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step2",
    ...config
  });
}
function useSystemDictatorGoerliStep3(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step3",
    ...config
  });
}
function useSystemDictatorGoerliStep4(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step4",
    ...config
  });
}
function useSystemDictatorGoerliStep5(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step5",
    ...config
  });
}
function useSystemDictatorGoerliStep6(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step6",
    ...config
  });
}
function useSystemDictatorGoerliTransferOwnership(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "transferOwnership",
    ...config
  });
}
function useSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "updateL2OutputOracleDynamicConfig",
    ...config
  });
}
function usePrepareSystemDictatorGoerliWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function usePrepareSystemDictatorGoerliExit1(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "exit1",
    ...config
  });
}
function usePrepareSystemDictatorGoerliFinalize(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "finalize",
    ...config
  });
}
function usePrepareSystemDictatorGoerliInitialize(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "initialize",
    ...config
  });
}
function usePrepareSystemDictatorGoerliRenounceOwnership(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep1(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step1",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep2(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step2",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep3(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step3",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep4(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step4",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep5(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step5",
    ...config
  });
}
function usePrepareSystemDictatorGoerliStep6(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "step6",
    ...config
  });
}
function usePrepareSystemDictatorGoerliTransferOwnership(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "transferOwnership",
    ...config
  });
}
function usePrepareSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    functionName: "updateL2OutputOracleDynamicConfig",
    ...config
  });
}
function useSystemDictatorGoerliEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    ...config
  });
}
function useSystemDictatorGoerliInitializedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    eventName: "Initialized",
    ...config
  });
}
function useSystemDictatorGoerliOwnershipTransferredEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: systemDictatorGoerliABI,
    address: systemDictatorGoerliAddress[5],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useTeleportrWithdrawerRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function useTeleportrWithdrawerData(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "data",
    ...config
  });
}
function useTeleportrWithdrawerOwner(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "owner",
    ...config
  });
}
function useTeleportrWithdrawerRecipient(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "recipient",
    ...config
  });
}
function useTeleportrWithdrawerTeleportr(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "teleportr",
    ...config
  });
}
function useTeleportrWithdrawerWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function useTeleportrWithdrawerCall(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "CALL",
    ...config
  });
}
function useTeleportrWithdrawerDelegatecall(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: teleportrWithdrawerABI,
      address: teleportrWithdrawerAddress[1],
      functionName: "DELEGATECALL",
      ...config
    }
  );
}
function useTeleportrWithdrawerSetData(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setData",
    ...config
  });
}
function useTeleportrWithdrawerSetOwner(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setOwner",
    ...config
  });
}
function useTeleportrWithdrawerSetRecipient(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: teleportrWithdrawerABI,
      address: teleportrWithdrawerAddress[1],
      functionName: "setRecipient",
      ...config
    }
  );
}
function useTeleportrWithdrawerSetTeleportr(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: teleportrWithdrawerABI,
      address: teleportrWithdrawerAddress[1],
      functionName: "setTeleportr",
      ...config
    }
  );
}
function useTeleportrWithdrawerWithdrawErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawERC20",
    ...config
  });
}
function useTeleportrWithdrawerWithdrawErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawERC721",
    ...config
  });
}
function useTeleportrWithdrawerWithdrawEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawETH",
    ...config
  });
}
function useTeleportrWithdrawerWithdrawFromTeleportr(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawFromTeleportr",
    ...config
  });
}
function usePrepareTeleportrWithdrawerWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function usePrepareTeleportrWithdrawerCall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "CALL",
    ...config
  });
}
function usePrepareTeleportrWithdrawerDelegatecall(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "DELEGATECALL",
    ...config
  });
}
function usePrepareTeleportrWithdrawerSetData(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setData",
    ...config
  });
}
function usePrepareTeleportrWithdrawerSetOwner(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setOwner",
    ...config
  });
}
function usePrepareTeleportrWithdrawerSetRecipient(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setRecipient",
    ...config
  });
}
function usePrepareTeleportrWithdrawerSetTeleportr(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "setTeleportr",
    ...config
  });
}
function usePrepareTeleportrWithdrawerWithdrawErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawERC20",
    ...config
  });
}
function usePrepareTeleportrWithdrawerWithdrawErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawERC721",
    ...config
  });
}
function usePrepareTeleportrWithdrawerWithdrawEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawETH",
    ...config
  });
}
function usePrepareTeleportrWithdrawerWithdrawFromTeleportr(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    functionName: "withdrawFromTeleportr",
    ...config
  });
}
function useTeleportrWithdrawerEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    ...config
  });
}
function useTeleportrWithdrawerOwnerUpdatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    eventName: "OwnerUpdated",
    ...config
  });
}
function useTeleportrWithdrawerReceivedEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    eventName: "ReceivedETH",
    ...config
  });
}
function useTeleportrWithdrawerWithdrewErc20Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    eventName: "WithdrewERC20",
    ...config
  });
}
function useTeleportrWithdrawerWithdrewErc721Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    eventName: "WithdrewERC721",
    ...config
  });
}
function useTeleportrWithdrawerWithdrewEthEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: teleportrWithdrawerABI,
    address: teleportrWithdrawerAddress[1],
    eventName: "WithdrewETH",
    ...config
  });
}
function useAttestationStationRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttestations(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attestations",
    ...config
  });
}
function useAttestationStationVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useAttestationStationWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttest(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attest",
    ...config
  });
}
function usePrepareAttestationStationWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function usePrepareAttestationStationAttest(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attest",
    ...config
  });
}
function useAttestationStationEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttestationCreatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    eventName: "AttestationCreated",
    ...config
  });
}
function useL2Erc721BridgeRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL2Erc721BridgeMessenger(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "messenger",
    ...config
  });
}
function useL2Erc721BridgeOtherBridge(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "otherBridge",
    ...config
  });
}
function useL2Erc721BridgeVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useL2Erc721BridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL2Erc721BridgeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721",
    ...config
  });
}
function useL2Erc721BridgeBridgeErc721To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721To",
    ...config
  });
}
function useL2Erc721BridgeFinalizeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "finalizeBridgeERC721",
    ...config
  });
}
function usePrepareL2Erc721BridgeWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    ...config
  });
}
function usePrepareL2Erc721BridgeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721",
    ...config
  });
}
function usePrepareL2Erc721BridgeBridgeErc721To(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "bridgeERC721To",
    ...config
  });
}
function usePrepareL2Erc721BridgeFinalizeBridgeErc721(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    functionName: "finalizeBridgeERC721",
    ...config
  });
}
function useL2Erc721BridgeEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    ...config
  });
}
function useL2Erc721BridgeErc721BridgeFinalizedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    eventName: "ERC721BridgeFinalized",
    ...config
  });
}
function useL2Erc721BridgeErc721BridgeInitiatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: l2Erc721BridgeABI,
    address: l2Erc721BridgeAddress[chainId],
    eventName: "ERC721BridgeInitiated",
    ...config
  });
}
function useMintManagerRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    ...config
  });
}
function useMintManagerDenominator(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "DENOMINATOR",
    ...config
  });
}
function useMintManagerMintCap(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "MINT_CAP",
    ...config
  });
}
function useMintManagerMintPeriod(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "MINT_PERIOD",
    ...config
  });
}
function useMintManagerGovernanceToken(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "governanceToken",
    ...config
  });
}
function useMintManagerMintPermittedAfter(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "mintPermittedAfter",
    ...config
  });
}
function useMintManagerOwner(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "owner",
    ...config
  });
}
function useMintManagerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    ...config
  });
}
function useMintManagerMint(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "mint",
    ...config
  });
}
function useMintManagerRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function useMintManagerTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function useMintManagerUpgrade(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "upgrade",
    ...config
  });
}
function usePrepareMintManagerWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    ...config
  });
}
function usePrepareMintManagerMint(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "mint",
    ...config
  });
}
function usePrepareMintManagerRenounceOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "renounceOwnership",
    ...config
  });
}
function usePrepareMintManagerTransferOwnership(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "transferOwnership",
    ...config
  });
}
function usePrepareMintManagerUpgrade(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    functionName: "upgrade",
    ...config
  });
}
function useMintManagerEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    ...config
  });
}
function useMintManagerOwnershipTransferredEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: mintManagerABI,
    address: mintManagerAddress[chainId],
    eventName: "OwnershipTransferred",
    ...config
  });
}
function useOptimismMintableErc721FactoryRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function useOptimismMintableErc721FactoryBridge(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "bridge",
    ...config
  });
}
function useOptimismMintableErc721FactoryIsOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "isOptimismMintableERC721",
    ...config
  });
}
function useOptimismMintableErc721FactoryRemoteChainId(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "remoteChainId",
    ...config
  });
}
function useOptimismMintableErc721FactoryVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "version",
    ...config
  });
}
function useOptimismMintableErc721FactoryWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function useOptimismMintableErc721FactoryCreateOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "createOptimismMintableERC721",
    ...config
  });
}
function usePrepareOptimismMintableErc721FactoryWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function usePrepareOptimismMintableErc721FactoryCreateOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    functionName: "createOptimismMintableERC721",
    ...config
  });
}
function useOptimismMintableErc721FactoryEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismMintableErc721CreatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc721FactoryABI,
    address: optimismMintableErc721FactoryAddress[10],
    eventName: "OptimismMintableERC721Created",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliBridge(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "BRIDGE",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliRemoteChainId(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "REMOTE_CHAIN_ID",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliIsOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "isOptimismMintableERC721",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "version",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "createOptimismMintableERC721",
    ...config
  });
}
function usePrepareOptimismMintableErc721FactoryOptimismGoerliWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function usePrepareOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    functionName: "createOptimismMintableERC721",
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    ...config
  });
}
function useOptimismMintableErc721FactoryOptimismGoerliOptimismMintableErc721CreatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: optimismMintableErc721FactoryOptimismGoerliABI,
    address: optimismMintableErc721FactoryOptimismGoerliAddress[420],
    eventName: "OptimismMintableERC721Created",
    ...config
  });
}
function useOptimistRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    ...config
  });
}
function useOptimistAttestationStation(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "ATTESTATION_STATION",
    ...config
  });
}
function useOptimistBaseUriAttestationKey(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "BASE_URI_ATTESTATION_KEY",
    ...config
  });
}
function useOptimistBaseUriAttestor(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "BASE_URI_ATTESTOR",
    ...config
  });
}
function useOptimistOptimistAllowlist(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "OPTIMIST_ALLOWLIST",
    ...config
  });
}
function useOptimistApprove(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "approve",
    ...config
  });
}
function useOptimistBalanceOf(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "balanceOf",
    ...config
  });
}
function useOptimistBaseUri(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "baseURI",
    ...config
  });
}
function useOptimistGetApproved(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "getApproved",
    ...config
  });
}
function useOptimistIsApprovedForAll(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "isApprovedForAll",
    ...config
  });
}
function useOptimistIsOnAllowList(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "isOnAllowList",
    ...config
  });
}
function useOptimistName(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "name",
    ...config
  });
}
function useOptimistOwnerOf(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "ownerOf",
    ...config
  });
}
function useOptimistSupportsInterface(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "supportsInterface",
    ...config
  });
}
function useOptimistSymbol(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "symbol",
    ...config
  });
}
function useOptimistTokenIdOfAddress(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "tokenIdOfAddress",
    ...config
  });
}
function useOptimistTokenUri(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "tokenURI",
    ...config
  });
}
function useOptimistVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useOptimistWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    ...config
  });
}
function useOptimistBurn(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "burn",
    ...config
  });
}
function useOptimistInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useOptimistMint(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "mint",
    ...config
  });
}
function useOptimistSafeTransferFrom(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "safeTransferFrom",
    ...config
  });
}
function useOptimistSetApprovalForAll(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "setApprovalForAll",
    ...config
  });
}
function useOptimistTransferFrom(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "transferFrom",
    ...config
  });
}
function usePrepareOptimistWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    ...config
  });
}
function usePrepareOptimistBurn(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "burn",
    ...config
  });
}
function usePrepareOptimistInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareOptimistMint(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "mint",
    ...config
  });
}
function usePrepareOptimistSafeTransferFrom(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "safeTransferFrom",
    ...config
  });
}
function usePrepareOptimistSetApprovalForAll(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "setApprovalForAll",
    ...config
  });
}
function usePrepareOptimistTransferFrom(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    functionName: "transferFrom",
    ...config
  });
}
function useOptimistEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    ...config
  });
}
function useOptimistApprovalEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    eventName: "Approval",
    ...config
  });
}
function useOptimistApprovalForAllEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    eventName: "ApprovalForAll",
    ...config
  });
}
function useOptimistInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useOptimistTransferEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistABI,
    address: optimistAddress[chainId],
    eventName: "Transfer",
    ...config
  });
}
function useOptimistAllowlistRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    ...config
  });
}
function useOptimistAllowlistAllowlistAttestor(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "ALLOWLIST_ATTESTOR",
    ...config
  });
}
function useOptimistAllowlistAttestationStation(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "ATTESTATION_STATION",
    ...config
  });
}
function useOptimistAllowlistCoinbaseQuestAttestor(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "COINBASE_QUEST_ATTESTOR",
    ...config
  });
}
function useOptimistAllowlistCoinbaseQuestEligibleAttestationKey(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    ...config
  });
}
function useOptimistAllowlistOptimistCanMintAttestationKey(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    ...config
  });
}
function useOptimistAllowlistOptimistInviter(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "OPTIMIST_INVITER",
    ...config
  });
}
function useOptimistAllowlistIsAllowedToMint(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "isAllowedToMint",
    ...config
  });
}
function useOptimistAllowlistVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistAllowlistABI,
    address: optimistAllowlistAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useOptimistInviterRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    ...config
  });
}
function useOptimistInviterAttestationStation(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "ATTESTATION_STATION",
    ...config
  });
}
function useOptimistInviterCanInviteAttestationKey(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "CAN_INVITE_ATTESTATION_KEY",
    ...config
  });
}
function useOptimistInviterClaimableInviteTypehash(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "CLAIMABLE_INVITE_TYPEHASH",
    ...config
  });
}
function useOptimistInviterEip712Version(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "EIP712_VERSION",
    ...config
  });
}
function useOptimistInviterInviteGranter(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "INVITE_GRANTER",
    ...config
  });
}
function useOptimistInviterMinCommitmentPeriod(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "MIN_COMMITMENT_PERIOD",
    ...config
  });
}
function useOptimistInviterCommitmentTimestamps(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "commitmentTimestamps",
    ...config
  });
}
function useOptimistInviterInviteCounts(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "inviteCounts",
    ...config
  });
}
function useOptimistInviterUsedNonces(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "usedNonces",
    ...config
  });
}
function useOptimistInviterVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useOptimistInviterWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    ...config
  });
}
function useOptimistInviterClaimInvite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "claimInvite",
    ...config
  });
}
function useOptimistInviterCommitInvite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "commitInvite",
    ...config
  });
}
function useOptimistInviterInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function useOptimistInviterSetInviteCounts(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "setInviteCounts",
    ...config
  });
}
function usePrepareOptimistInviterWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    ...config
  });
}
function usePrepareOptimistInviterClaimInvite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "claimInvite",
    ...config
  });
}
function usePrepareOptimistInviterCommitInvite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "commitInvite",
    ...config
  });
}
function usePrepareOptimistInviterInitialize(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "initialize",
    ...config
  });
}
function usePrepareOptimistInviterSetInviteCounts(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    functionName: "setInviteCounts",
    ...config
  });
}
function useOptimistInviterEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    ...config
  });
}
function useOptimistInviterInitializedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    eventName: "Initialized",
    ...config
  });
}
function useOptimistInviterInviteClaimedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: optimistInviterABI,
    address: optimistInviterAddress[chainId],
    eventName: "InviteClaimed",
    ...config
  });
}
function useBaseFeeVaultRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function useBaseFeeVaultMinWithdrawalAmount(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "MIN_WITHDRAWAL_AMOUNT",
    ...config
  });
}
function useBaseFeeVaultRecipient(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "RECIPIENT",
    ...config
  });
}
function useBaseFeeVaultTotalProcessed(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "totalProcessed",
    ...config
  });
}
function useBaseFeeVaultVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "version",
    ...config
  });
}
function useBaseFeeVaultWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function useBaseFeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function usePrepareBaseFeeVaultWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function usePrepareBaseFeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function useBaseFeeVaultEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    ...config
  });
}
function useBaseFeeVaultWithdrawalEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: baseFeeVaultABI,
    address: baseFeeVaultAddress[420],
    eventName: "Withdrawal",
    ...config
  });
}
function useGasPriceOracleRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    ...config
  });
}
function useGasPriceOracleBaseFee(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "baseFee",
    ...config
  });
}
function useGasPriceOracleDecimals(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "decimals",
    ...config
  });
}
function useGasPriceOracleGasPrice(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "gasPrice",
    ...config
  });
}
function useGasPriceOracleGetL1Fee(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "getL1Fee",
    ...config
  });
}
function useGasPriceOracleGetL1GasUsed(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "getL1GasUsed",
    ...config
  });
}
function useGasPriceOracleL1BaseFee(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "l1BaseFee",
    ...config
  });
}
function useGasPriceOracleOverhead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "overhead",
    ...config
  });
}
function useGasPriceOracleScalar(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "scalar",
    ...config
  });
}
function useGasPriceOracleVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: gasPriceOracleABI,
    address: gasPriceOracleAddress[420],
    functionName: "version",
    ...config
  });
}
function useL1BlockRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function useL1BlockDepositorAccount(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "DEPOSITOR_ACCOUNT",
    ...config
  });
}
function useL1BlockBasefee(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "basefee",
    ...config
  });
}
function useL1BlockBatcherHash(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "batcherHash",
    ...config
  });
}
function useL1BlockHash(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "hash",
    ...config
  });
}
function useL1BlockL1FeeOverhead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "l1FeeOverhead",
    ...config
  });
}
function useL1BlockL1FeeScalar(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "l1FeeScalar",
    ...config
  });
}
function useL1BlockNumber(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "number",
    ...config
  });
}
function useL1BlockSequenceNumber(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "sequenceNumber",
    ...config
  });
}
function useL1BlockTimestamp(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "timestamp",
    ...config
  });
}
function useL1BlockVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "version",
    ...config
  });
}
function useL1BlockWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function useL1BlockSetL1BlockValues(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "setL1BlockValues",
    ...config
  });
}
function usePrepareL1BlockWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    ...config
  });
}
function usePrepareL1BlockSetL1BlockValues(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1BlockABI,
    address: l1BlockAddress[420],
    functionName: "setL1BlockValues",
    ...config
  });
}
function useL1FeeVaultRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function useL1FeeVaultMinWithdrawalAmount(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "MIN_WITHDRAWAL_AMOUNT",
    ...config
  });
}
function useL1FeeVaultRecipient(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "RECIPIENT",
    ...config
  });
}
function useL1FeeVaultTotalProcessed(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "totalProcessed",
    ...config
  });
}
function useL1FeeVaultVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "version",
    ...config
  });
}
function useL1FeeVaultWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function useL1FeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function usePrepareL1FeeVaultWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function usePrepareL1FeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function useL1FeeVaultEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    ...config
  });
}
function useL1FeeVaultWithdrawalEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l1FeeVaultABI,
    address: l1FeeVaultAddress[420],
    eventName: "Withdrawal",
    ...config
  });
}
function useL2CrossDomainMessengerRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function useL2CrossDomainMessengerMessageVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "MESSAGE_VERSION",
    ...config
  });
}
function useL2CrossDomainMessengerMinGasCalldataOverhead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "MIN_GAS_CALLDATA_OVERHEAD",
    ...config
  });
}
function useL2CrossDomainMessengerMinGasDynamicOverheadDenominator(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    ...config
  });
}
function useL2CrossDomainMessengerMinGasDynamicOverheadNumerator(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    ...config
  });
}
function useL2CrossDomainMessengerOtherMessenger(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "OTHER_MESSENGER",
    ...config
  });
}
function useL2CrossDomainMessengerRelayCallOverhead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "RELAY_CALL_OVERHEAD",
    ...config
  });
}
function useL2CrossDomainMessengerRelayConstantOverhead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "RELAY_CONSTANT_OVERHEAD",
    ...config
  });
}
function useL2CrossDomainMessengerRelayGasCheckBuffer(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "RELAY_GAS_CHECK_BUFFER",
    ...config
  });
}
function useL2CrossDomainMessengerRelayReservedGas(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "RELAY_RESERVED_GAS",
    ...config
  });
}
function useL2CrossDomainMessengerBaseGas(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "baseGas",
    ...config
  });
}
function useL2CrossDomainMessengerFailedMessages(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "failedMessages",
    ...config
  });
}
function useL2CrossDomainMessengerL1CrossDomainMessenger(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "l1CrossDomainMessenger",
    ...config
  });
}
function useL2CrossDomainMessengerMessageNonce(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "messageNonce",
    ...config
  });
}
function useL2CrossDomainMessengerSuccessfulMessages(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "successfulMessages",
    ...config
  });
}
function useL2CrossDomainMessengerVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "version",
    ...config
  });
}
function useL2CrossDomainMessengerXDomainMessageSender(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "xDomainMessageSender",
    ...config
  });
}
function useL2CrossDomainMessengerWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function useL2CrossDomainMessengerInitialize(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "initialize",
    ...config
  });
}
function useL2CrossDomainMessengerRelayMessage(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "relayMessage",
    ...config
  });
}
function useL2CrossDomainMessengerSendMessage(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "sendMessage",
    ...config
  });
}
function usePrepareL2CrossDomainMessengerWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function usePrepareL2CrossDomainMessengerInitialize(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "initialize",
    ...config
  });
}
function usePrepareL2CrossDomainMessengerRelayMessage(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "relayMessage",
    ...config
  });
}
function usePrepareL2CrossDomainMessengerSendMessage(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    functionName: "sendMessage",
    ...config
  });
}
function useL2CrossDomainMessengerEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    ...config
  });
}
function useL2CrossDomainMessengerFailedRelayedMessageEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    eventName: "FailedRelayedMessage",
    ...config
  });
}
function useL2CrossDomainMessengerInitializedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    eventName: "Initialized",
    ...config
  });
}
function useL2CrossDomainMessengerRelayedMessageEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    eventName: "RelayedMessage",
    ...config
  });
}
function useL2CrossDomainMessengerSentMessageEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    eventName: "SentMessage",
    ...config
  });
}
function useL2CrossDomainMessengerSentMessageExtension1Event(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2CrossDomainMessengerABI,
    address: l2CrossDomainMessengerAddress[420],
    eventName: "SentMessageExtension1",
    ...config
  });
}
function useL2StandardBridgeRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function useL2StandardBridgeDeposits(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "deposits",
    ...config
  });
}
function useL2StandardBridgeL1TokenBridge(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "l1TokenBridge",
    ...config
  });
}
function useL2StandardBridgeMessenger(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "messenger",
    ...config
  });
}
function useL2StandardBridgeVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "version",
    ...config
  });
}
function useL2StandardBridgeWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function useL2StandardBridgeBridgeErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeERC20",
    ...config
  });
}
function useL2StandardBridgeBridgeErc20To(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeERC20To",
    ...config
  });
}
function useL2StandardBridgeBridgeEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeETH",
    ...config
  });
}
function useL2StandardBridgeBridgeEthTo(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeETHTo",
    ...config
  });
}
function useL2StandardBridgeFinalizeBridgeErc20(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "finalizeBridgeERC20",
    ...config
  });
}
function useL2StandardBridgeFinalizeBridgeEth(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "finalizeBridgeETH",
    ...config
  });
}
function useL2StandardBridgeFinalizeDeposit(config = {}) {
  return (0, import_wagmi.useContractWrite)(
    {
      abi: l2StandardBridgeABI,
      address: l2StandardBridgeAddress[420],
      functionName: "finalizeDeposit",
      ...config
    }
  );
}
function useL2StandardBridgeWithdraw(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function useL2StandardBridgeWithdrawTo(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "withdrawTo",
    ...config
  });
}
function usePrepareL2StandardBridgeWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function usePrepareL2StandardBridgeBridgeErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeERC20",
    ...config
  });
}
function usePrepareL2StandardBridgeBridgeErc20To(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeERC20To",
    ...config
  });
}
function usePrepareL2StandardBridgeBridgeEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeETH",
    ...config
  });
}
function usePrepareL2StandardBridgeBridgeEthTo(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "bridgeETHTo",
    ...config
  });
}
function usePrepareL2StandardBridgeFinalizeBridgeErc20(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "finalizeBridgeERC20",
    ...config
  });
}
function usePrepareL2StandardBridgeFinalizeBridgeEth(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "finalizeBridgeETH",
    ...config
  });
}
function usePrepareL2StandardBridgeFinalizeDeposit(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "finalizeDeposit",
    ...config
  });
}
function usePrepareL2StandardBridgeWithdraw(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function usePrepareL2StandardBridgeWithdrawTo(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    functionName: "withdrawTo",
    ...config
  });
}
function useL2StandardBridgeEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    ...config
  });
}
function useL2StandardBridgeDepositFinalizedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "DepositFinalized",
    ...config
  });
}
function useL2StandardBridgeErc20BridgeFinalizedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "ERC20BridgeFinalized",
    ...config
  });
}
function useL2StandardBridgeErc20BridgeInitiatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "ERC20BridgeInitiated",
    ...config
  });
}
function useL2StandardBridgeEthBridgeFinalizedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "ETHBridgeFinalized",
    ...config
  });
}
function useL2StandardBridgeEthBridgeInitiatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "ETHBridgeInitiated",
    ...config
  });
}
function useL2StandardBridgeWithdrawalInitiatedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2StandardBridgeABI,
    address: l2StandardBridgeAddress[420],
    eventName: "WithdrawalInitiated",
    ...config
  });
}
function useL2ToL1MessagePasserRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function useL2ToL1MessagePasserMessageVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "MESSAGE_VERSION",
    ...config
  });
}
function useL2ToL1MessagePasserMessageNonce(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "messageNonce",
    ...config
  });
}
function useL2ToL1MessagePasserSentMessages(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "sentMessages",
    ...config
  });
}
function useL2ToL1MessagePasserVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "version",
    ...config
  });
}
function useL2ToL1MessagePasserWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function useL2ToL1MessagePasserBurn(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "burn",
    ...config
  });
}
function useL2ToL1MessagePasserInitiateWithdrawal(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "initiateWithdrawal",
    ...config
  });
}
function usePrepareL2ToL1MessagePasserWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function usePrepareL2ToL1MessagePasserBurn(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "burn",
    ...config
  });
}
function usePrepareL2ToL1MessagePasserInitiateWithdrawal(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    functionName: "initiateWithdrawal",
    ...config
  });
}
function useL2ToL1MessagePasserEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    ...config
  });
}
function useL2ToL1MessagePasserMessagePassedEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    eventName: "MessagePassed",
    ...config
  });
}
function useL2ToL1MessagePasserWithdrawerBalanceBurntEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: l2ToL1MessagePasserABI,
    address: l2ToL1MessagePasserAddress[420],
    eventName: "WithdrawerBalanceBurnt",
    ...config
  });
}
function useSequencerFeeVaultRead(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function useSequencerFeeVaultMinWithdrawalAmount(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "MIN_WITHDRAWAL_AMOUNT",
    ...config
  });
}
function useSequencerFeeVaultRecipient(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "RECIPIENT",
    ...config
  });
}
function useSequencerFeeVaultL1FeeWallet(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "l1FeeWallet",
    ...config
  });
}
function useSequencerFeeVaultTotalProcessed(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "totalProcessed",
    ...config
  });
}
function useSequencerFeeVaultVersion(config = {}) {
  return (0, import_wagmi.useContractRead)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "version",
    ...config
  });
}
function useSequencerFeeVaultWrite(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function useSequencerFeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.useContractWrite)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function usePrepareSequencerFeeVaultWrite(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function usePrepareSequencerFeeVaultWithdraw(config = {}) {
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    functionName: "withdraw",
    ...config
  });
}
function useSequencerFeeVaultEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    ...config
  });
}
function useSequencerFeeVaultWithdrawalEvent(config = {}) {
  return (0, import_wagmi.useContractEvent)({
    abi: sequencerFeeVaultABI,
    address: sequencerFeeVaultAddress[420],
    eventName: "Withdrawal",
    ...config
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addressManagerABI,
  addressManagerAddress,
  addressManagerConfig,
  assetReceiverABI,
  assetReceiverAddress,
  assetReceiverConfig,
  attestationStationABI,
  attestationStationAddress,
  attestationStationConfig,
  baseFeeVaultABI,
  baseFeeVaultAddress,
  baseFeeVaultConfig,
  checkBalanceHighABI,
  checkBalanceHighAddress,
  checkBalanceHighConfig,
  checkBalanceLowABI,
  checkBalanceLowAddress,
  checkBalanceLowConfig,
  checkGelatoLowABI,
  checkGelatoLowAddress,
  checkGelatoLowConfig,
  checkTrueABI,
  checkTrueAddress,
  checkTrueConfig,
  drippieABI,
  drippieAddress,
  drippieConfig,
  drippieGoerliABI,
  drippieGoerliAddress,
  drippieGoerliConfig,
  drippieOptimismGoerliABI,
  drippieOptimismGoerliAddress,
  drippieOptimismGoerliConfig,
  gasPriceOracleABI,
  gasPriceOracleAddress,
  gasPriceOracleConfig,
  l1BlockABI,
  l1BlockAddress,
  l1BlockConfig,
  l1CrossDomainMessengerABI,
  l1CrossDomainMessengerAddress,
  l1CrossDomainMessengerConfig,
  l1Erc721BridgeABI,
  l1Erc721BridgeAddress,
  l1Erc721BridgeConfig,
  l1FeeVaultABI,
  l1FeeVaultAddress,
  l1FeeVaultConfig,
  l1StandardBridgeABI,
  l1StandardBridgeAddress,
  l1StandardBridgeConfig,
  l2CrossDomainMessengerABI,
  l2CrossDomainMessengerAddress,
  l2CrossDomainMessengerConfig,
  l2Erc721BridgeABI,
  l2Erc721BridgeAddress,
  l2Erc721BridgeConfig,
  l2OutputOracleABI,
  l2OutputOracleAddress,
  l2OutputOracleConfig,
  l2StandardBridgeABI,
  l2StandardBridgeAddress,
  l2StandardBridgeConfig,
  l2ToL1MessagePasserABI,
  l2ToL1MessagePasserAddress,
  l2ToL1MessagePasserConfig,
  mintManagerABI,
  mintManagerAddress,
  mintManagerConfig,
  optimismMintableErc20FactoryABI,
  optimismMintableErc20FactoryAddress,
  optimismMintableErc20FactoryConfig,
  optimismMintableErc721FactoryABI,
  optimismMintableErc721FactoryAddress,
  optimismMintableErc721FactoryConfig,
  optimismMintableErc721FactoryOptimismGoerliABI,
  optimismMintableErc721FactoryOptimismGoerliAddress,
  optimismMintableErc721FactoryOptimismGoerliConfig,
  optimismPortalABI,
  optimismPortalAddress,
  optimismPortalConfig,
  optimistABI,
  optimistAddress,
  optimistAllowlistABI,
  optimistAllowlistAddress,
  optimistAllowlistConfig,
  optimistConfig,
  optimistInviterABI,
  optimistInviterAddress,
  optimistInviterConfig,
  portalSenderABI,
  portalSenderAddress,
  portalSenderConfig,
  proxyAdminABI,
  proxyAdminAddress,
  proxyAdminConfig,
  sequencerFeeVaultABI,
  sequencerFeeVaultAddress,
  sequencerFeeVaultConfig,
  systemConfigABI,
  systemConfigAddress,
  systemConfigConfig,
  systemDictatorABI,
  systemDictatorAddress,
  systemDictatorConfig,
  systemDictatorGoerliABI,
  systemDictatorGoerliAddress,
  systemDictatorGoerliConfig,
  teleportrWithdrawerABI,
  teleportrWithdrawerAddress,
  teleportrWithdrawerConfig,
  useAddressManagerAddressSetEvent,
  useAddressManagerEvent,
  useAddressManagerGetAddress,
  useAddressManagerOwner,
  useAddressManagerOwnershipTransferredEvent,
  useAddressManagerRead,
  useAddressManagerRenounceOwnership,
  useAddressManagerSetAddress,
  useAddressManagerTransferOwnership,
  useAddressManagerWrite,
  useAssetReceiverCall,
  useAssetReceiverDelegatecall,
  useAssetReceiverEvent,
  useAssetReceiverOwner,
  useAssetReceiverOwnerUpdatedEvent,
  useAssetReceiverRead,
  useAssetReceiverReceivedEthEvent,
  useAssetReceiverSetOwner,
  useAssetReceiverWithdrawErc20,
  useAssetReceiverWithdrawErc721,
  useAssetReceiverWithdrawEth,
  useAssetReceiverWithdrewErc20Event,
  useAssetReceiverWithdrewErc721Event,
  useAssetReceiverWithdrewEthEvent,
  useAssetReceiverWrite,
  useAttestationStationAttest,
  useAttestationStationAttestationCreatedEvent,
  useAttestationStationAttestations,
  useAttestationStationEvent,
  useAttestationStationRead,
  useAttestationStationVersion,
  useAttestationStationWrite,
  useBaseFeeVaultEvent,
  useBaseFeeVaultMinWithdrawalAmount,
  useBaseFeeVaultRead,
  useBaseFeeVaultRecipient,
  useBaseFeeVaultTotalProcessed,
  useBaseFeeVaultVersion,
  useBaseFeeVaultWithdraw,
  useBaseFeeVaultWithdrawalEvent,
  useBaseFeeVaultWrite,
  useCheckBalanceHighCheck,
  useCheckBalanceHighEvent,
  useCheckBalanceHighEventToExposeStructInAbiParamsEvent,
  useCheckBalanceHighRead,
  useCheckBalanceLowCheck,
  useCheckBalanceLowEvent,
  useCheckBalanceLowEventToExposeStructInAbiParamsEvent,
  useCheckBalanceLowRead,
  useCheckGelatoLowCheck,
  useCheckGelatoLowEvent,
  useCheckGelatoLowEventToExposeStructInAbiParamsEvent,
  useCheckGelatoLowRead,
  useCheckTrueCheck,
  useCheckTrueRead,
  useDrippieCall,
  useDrippieCreate,
  useDrippieDelegatecall,
  useDrippieDrip,
  useDrippieDripCreatedEvent,
  useDrippieDripExecutedEvent,
  useDrippieDripStatusUpdatedEvent,
  useDrippieDrips,
  useDrippieEvent,
  useDrippieExecutable,
  useDrippieGoerliCall,
  useDrippieGoerliCreate,
  useDrippieGoerliDelegatecall,
  useDrippieGoerliDrip,
  useDrippieGoerliDripCreatedEvent,
  useDrippieGoerliDripExecutedEvent,
  useDrippieGoerliDripStatusUpdatedEvent,
  useDrippieGoerliDrips,
  useDrippieGoerliEvent,
  useDrippieGoerliExecutable,
  useDrippieGoerliOwner,
  useDrippieGoerliOwnerUpdatedEvent,
  useDrippieGoerliRead,
  useDrippieGoerliReceivedEthEvent,
  useDrippieGoerliSetOwner,
  useDrippieGoerliStatus,
  useDrippieGoerliWithdrawErc20,
  useDrippieGoerliWithdrawErc721,
  useDrippieGoerliWithdrawEth,
  useDrippieGoerliWithdrewErc20Event,
  useDrippieGoerliWithdrewErc721Event,
  useDrippieGoerliWithdrewEthEvent,
  useDrippieGoerliWrite,
  useDrippieOptimismGoerliCall,
  useDrippieOptimismGoerliCreate,
  useDrippieOptimismGoerliDelegatecall,
  useDrippieOptimismGoerliDrip,
  useDrippieOptimismGoerliDripCreatedEvent,
  useDrippieOptimismGoerliDripExecutedEvent,
  useDrippieOptimismGoerliDripStatusUpdatedEvent,
  useDrippieOptimismGoerliDrips,
  useDrippieOptimismGoerliEvent,
  useDrippieOptimismGoerliExecutable,
  useDrippieOptimismGoerliOwner,
  useDrippieOptimismGoerliOwnerUpdatedEvent,
  useDrippieOptimismGoerliRead,
  useDrippieOptimismGoerliReceivedEthEvent,
  useDrippieOptimismGoerliSetOwner,
  useDrippieOptimismGoerliStatus,
  useDrippieOptimismGoerliWithdrawErc20,
  useDrippieOptimismGoerliWithdrawErc721,
  useDrippieOptimismGoerliWithdrawEth,
  useDrippieOptimismGoerliWithdrewErc20Event,
  useDrippieOptimismGoerliWithdrewErc721Event,
  useDrippieOptimismGoerliWithdrewEthEvent,
  useDrippieOptimismGoerliWrite,
  useDrippieOwner,
  useDrippieOwnerUpdatedEvent,
  useDrippieRead,
  useDrippieReceivedEthEvent,
  useDrippieSetOwner,
  useDrippieStatus,
  useDrippieWithdrawErc20,
  useDrippieWithdrawErc721,
  useDrippieWithdrawEth,
  useDrippieWithdrewErc20Event,
  useDrippieWithdrewErc721Event,
  useDrippieWithdrewEthEvent,
  useDrippieWrite,
  useGasPriceOracleBaseFee,
  useGasPriceOracleDecimals,
  useGasPriceOracleGasPrice,
  useGasPriceOracleGetL1Fee,
  useGasPriceOracleGetL1GasUsed,
  useGasPriceOracleL1BaseFee,
  useGasPriceOracleOverhead,
  useGasPriceOracleRead,
  useGasPriceOracleScalar,
  useGasPriceOracleVersion,
  useL1BlockBasefee,
  useL1BlockBatcherHash,
  useL1BlockDepositorAccount,
  useL1BlockHash,
  useL1BlockL1FeeOverhead,
  useL1BlockL1FeeScalar,
  useL1BlockNumber,
  useL1BlockRead,
  useL1BlockSequenceNumber,
  useL1BlockSetL1BlockValues,
  useL1BlockTimestamp,
  useL1BlockVersion,
  useL1BlockWrite,
  useL1CrossDomainMessengerBaseGas,
  useL1CrossDomainMessengerEvent,
  useL1CrossDomainMessengerFailedMessages,
  useL1CrossDomainMessengerFailedRelayedMessageEvent,
  useL1CrossDomainMessengerInitialize,
  useL1CrossDomainMessengerInitializedEvent,
  useL1CrossDomainMessengerMessageNonce,
  useL1CrossDomainMessengerMessageVersion,
  useL1CrossDomainMessengerMinGasCalldataOverhead,
  useL1CrossDomainMessengerMinGasDynamicOverheadDenominator,
  useL1CrossDomainMessengerMinGasDynamicOverheadNumerator,
  useL1CrossDomainMessengerOtherMessenger,
  useL1CrossDomainMessengerPortal,
  useL1CrossDomainMessengerRead,
  useL1CrossDomainMessengerRelayCallOverhead,
  useL1CrossDomainMessengerRelayConstantOverhead,
  useL1CrossDomainMessengerRelayGasCheckBuffer,
  useL1CrossDomainMessengerRelayMessage,
  useL1CrossDomainMessengerRelayReservedGas,
  useL1CrossDomainMessengerRelayedMessageEvent,
  useL1CrossDomainMessengerSendMessage,
  useL1CrossDomainMessengerSentMessageEvent,
  useL1CrossDomainMessengerSentMessageExtension1Event,
  useL1CrossDomainMessengerSuccessfulMessages,
  useL1CrossDomainMessengerVersion,
  useL1CrossDomainMessengerWrite,
  useL1CrossDomainMessengerXDomainMessageSender,
  useL1Erc721BridgeBridgeErc721,
  useL1Erc721BridgeBridgeErc721To,
  useL1Erc721BridgeDeposits,
  useL1Erc721BridgeErc721BridgeFinalizedEvent,
  useL1Erc721BridgeErc721BridgeInitiatedEvent,
  useL1Erc721BridgeEvent,
  useL1Erc721BridgeFinalizeBridgeErc721,
  useL1Erc721BridgeMessenger,
  useL1Erc721BridgeOtherBridge,
  useL1Erc721BridgeRead,
  useL1Erc721BridgeVersion,
  useL1Erc721BridgeWrite,
  useL1FeeVaultEvent,
  useL1FeeVaultMinWithdrawalAmount,
  useL1FeeVaultRead,
  useL1FeeVaultRecipient,
  useL1FeeVaultTotalProcessed,
  useL1FeeVaultVersion,
  useL1FeeVaultWithdraw,
  useL1FeeVaultWithdrawalEvent,
  useL1FeeVaultWrite,
  useL1StandardBridgeBridgeErc20,
  useL1StandardBridgeBridgeErc20To,
  useL1StandardBridgeBridgeEth,
  useL1StandardBridgeBridgeEthTo,
  useL1StandardBridgeDepositErc20,
  useL1StandardBridgeDepositErc20To,
  useL1StandardBridgeDepositEth,
  useL1StandardBridgeDepositEthTo,
  useL1StandardBridgeDeposits,
  useL1StandardBridgeErc20BridgeFinalizedEvent,
  useL1StandardBridgeErc20BridgeInitiatedEvent,
  useL1StandardBridgeErc20DepositInitiatedEvent,
  useL1StandardBridgeErc20WithdrawalFinalizedEvent,
  useL1StandardBridgeEthBridgeFinalizedEvent,
  useL1StandardBridgeEthBridgeInitiatedEvent,
  useL1StandardBridgeEthDepositInitiatedEvent,
  useL1StandardBridgeEthWithdrawalFinalizedEvent,
  useL1StandardBridgeEvent,
  useL1StandardBridgeFinalizeBridgeErc20,
  useL1StandardBridgeFinalizeBridgeEth,
  useL1StandardBridgeFinalizeErc20Withdrawal,
  useL1StandardBridgeFinalizeEthWithdrawal,
  useL1StandardBridgeL2TokenBridge,
  useL1StandardBridgeMessenger,
  useL1StandardBridgeRead,
  useL1StandardBridgeVersion,
  useL1StandardBridgeWrite,
  useL2CrossDomainMessengerBaseGas,
  useL2CrossDomainMessengerEvent,
  useL2CrossDomainMessengerFailedMessages,
  useL2CrossDomainMessengerFailedRelayedMessageEvent,
  useL2CrossDomainMessengerInitialize,
  useL2CrossDomainMessengerInitializedEvent,
  useL2CrossDomainMessengerL1CrossDomainMessenger,
  useL2CrossDomainMessengerMessageNonce,
  useL2CrossDomainMessengerMessageVersion,
  useL2CrossDomainMessengerMinGasCalldataOverhead,
  useL2CrossDomainMessengerMinGasDynamicOverheadDenominator,
  useL2CrossDomainMessengerMinGasDynamicOverheadNumerator,
  useL2CrossDomainMessengerOtherMessenger,
  useL2CrossDomainMessengerRead,
  useL2CrossDomainMessengerRelayCallOverhead,
  useL2CrossDomainMessengerRelayConstantOverhead,
  useL2CrossDomainMessengerRelayGasCheckBuffer,
  useL2CrossDomainMessengerRelayMessage,
  useL2CrossDomainMessengerRelayReservedGas,
  useL2CrossDomainMessengerRelayedMessageEvent,
  useL2CrossDomainMessengerSendMessage,
  useL2CrossDomainMessengerSentMessageEvent,
  useL2CrossDomainMessengerSentMessageExtension1Event,
  useL2CrossDomainMessengerSuccessfulMessages,
  useL2CrossDomainMessengerVersion,
  useL2CrossDomainMessengerWrite,
  useL2CrossDomainMessengerXDomainMessageSender,
  useL2Erc721BridgeBridgeErc721,
  useL2Erc721BridgeBridgeErc721To,
  useL2Erc721BridgeErc721BridgeFinalizedEvent,
  useL2Erc721BridgeErc721BridgeInitiatedEvent,
  useL2Erc721BridgeEvent,
  useL2Erc721BridgeFinalizeBridgeErc721,
  useL2Erc721BridgeMessenger,
  useL2Erc721BridgeOtherBridge,
  useL2Erc721BridgeRead,
  useL2Erc721BridgeVersion,
  useL2Erc721BridgeWrite,
  useL2OutputOracleChallenger,
  useL2OutputOracleComputeL2Timestamp,
  useL2OutputOracleDeleteL2Outputs,
  useL2OutputOracleEvent,
  useL2OutputOracleFinalizationPeriodSeconds,
  useL2OutputOracleGetL2Output,
  useL2OutputOracleGetL2OutputAfter,
  useL2OutputOracleGetL2OutputIndexAfter,
  useL2OutputOracleInitialize,
  useL2OutputOracleInitializedEvent,
  useL2OutputOracleL2BlockTime,
  useL2OutputOracleLatestBlockNumber,
  useL2OutputOracleLatestOutputIndex,
  useL2OutputOracleNextBlockNumber,
  useL2OutputOracleNextOutputIndex,
  useL2OutputOracleOutputProposedEvent,
  useL2OutputOracleOutputsDeletedEvent,
  useL2OutputOracleProposeL2Output,
  useL2OutputOracleProposer,
  useL2OutputOracleRead,
  useL2OutputOracleStartingBlockNumber,
  useL2OutputOracleStartingTimestamp,
  useL2OutputOracleSubmissionInterval,
  useL2OutputOracleVersion,
  useL2OutputOracleWrite,
  useL2StandardBridgeBridgeErc20,
  useL2StandardBridgeBridgeErc20To,
  useL2StandardBridgeBridgeEth,
  useL2StandardBridgeBridgeEthTo,
  useL2StandardBridgeDepositFinalizedEvent,
  useL2StandardBridgeDeposits,
  useL2StandardBridgeErc20BridgeFinalizedEvent,
  useL2StandardBridgeErc20BridgeInitiatedEvent,
  useL2StandardBridgeEthBridgeFinalizedEvent,
  useL2StandardBridgeEthBridgeInitiatedEvent,
  useL2StandardBridgeEvent,
  useL2StandardBridgeFinalizeBridgeErc20,
  useL2StandardBridgeFinalizeBridgeEth,
  useL2StandardBridgeFinalizeDeposit,
  useL2StandardBridgeL1TokenBridge,
  useL2StandardBridgeMessenger,
  useL2StandardBridgeRead,
  useL2StandardBridgeVersion,
  useL2StandardBridgeWithdraw,
  useL2StandardBridgeWithdrawTo,
  useL2StandardBridgeWithdrawalInitiatedEvent,
  useL2StandardBridgeWrite,
  useL2ToL1MessagePasserBurn,
  useL2ToL1MessagePasserEvent,
  useL2ToL1MessagePasserInitiateWithdrawal,
  useL2ToL1MessagePasserMessageNonce,
  useL2ToL1MessagePasserMessagePassedEvent,
  useL2ToL1MessagePasserMessageVersion,
  useL2ToL1MessagePasserRead,
  useL2ToL1MessagePasserSentMessages,
  useL2ToL1MessagePasserVersion,
  useL2ToL1MessagePasserWithdrawerBalanceBurntEvent,
  useL2ToL1MessagePasserWrite,
  useMintManagerDenominator,
  useMintManagerEvent,
  useMintManagerGovernanceToken,
  useMintManagerMint,
  useMintManagerMintCap,
  useMintManagerMintPeriod,
  useMintManagerMintPermittedAfter,
  useMintManagerOwner,
  useMintManagerOwnershipTransferredEvent,
  useMintManagerRead,
  useMintManagerRenounceOwnership,
  useMintManagerTransferOwnership,
  useMintManagerUpgrade,
  useMintManagerWrite,
  useOptimismMintableErc20FactoryBridge,
  useOptimismMintableErc20FactoryCreateOptimismMintableErc20,
  useOptimismMintableErc20FactoryCreateStandardL2Token,
  useOptimismMintableErc20FactoryEvent,
  useOptimismMintableErc20FactoryOptimismMintableErc20CreatedEvent,
  useOptimismMintableErc20FactoryRead,
  useOptimismMintableErc20FactoryStandardL2TokenCreatedEvent,
  useOptimismMintableErc20FactoryVersion,
  useOptimismMintableErc20FactoryWrite,
  useOptimismMintableErc721FactoryBridge,
  useOptimismMintableErc721FactoryCreateOptimismMintableErc721,
  useOptimismMintableErc721FactoryEvent,
  useOptimismMintableErc721FactoryIsOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliBridge,
  useOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliEvent,
  useOptimismMintableErc721FactoryOptimismGoerliIsOptimismMintableErc721,
  useOptimismMintableErc721FactoryOptimismGoerliOptimismMintableErc721CreatedEvent,
  useOptimismMintableErc721FactoryOptimismGoerliRead,
  useOptimismMintableErc721FactoryOptimismGoerliRemoteChainId,
  useOptimismMintableErc721FactoryOptimismGoerliVersion,
  useOptimismMintableErc721FactoryOptimismGoerliWrite,
  useOptimismMintableErc721FactoryOptimismMintableErc721CreatedEvent,
  useOptimismMintableErc721FactoryRead,
  useOptimismMintableErc721FactoryRemoteChainId,
  useOptimismMintableErc721FactoryVersion,
  useOptimismMintableErc721FactoryWrite,
  useOptimismPortalDepositTransaction,
  useOptimismPortalDonateEth,
  useOptimismPortalEvent,
  useOptimismPortalFinalizeWithdrawalTransaction,
  useOptimismPortalFinalizedWithdrawals,
  useOptimismPortalGuardian,
  useOptimismPortalInitialize,
  useOptimismPortalInitializedEvent,
  useOptimismPortalIsOutputFinalized,
  useOptimismPortalL2Oracle,
  useOptimismPortalL2Sender,
  useOptimismPortalMinimumGasLimit,
  useOptimismPortalParams,
  useOptimismPortalPause,
  useOptimismPortalPaused,
  useOptimismPortalPausedEvent,
  useOptimismPortalProveWithdrawalTransaction,
  useOptimismPortalProvenWithdrawals,
  useOptimismPortalRead,
  useOptimismPortalSystemConfig,
  useOptimismPortalTransactionDepositedEvent,
  useOptimismPortalUnpause,
  useOptimismPortalUnpausedEvent,
  useOptimismPortalVersion,
  useOptimismPortalWithdrawalFinalizedEvent,
  useOptimismPortalWithdrawalProvenEvent,
  useOptimismPortalWrite,
  useOptimistAllowlistAllowlistAttestor,
  useOptimistAllowlistAttestationStation,
  useOptimistAllowlistCoinbaseQuestAttestor,
  useOptimistAllowlistCoinbaseQuestEligibleAttestationKey,
  useOptimistAllowlistIsAllowedToMint,
  useOptimistAllowlistOptimistCanMintAttestationKey,
  useOptimistAllowlistOptimistInviter,
  useOptimistAllowlistRead,
  useOptimistAllowlistVersion,
  useOptimistApprovalEvent,
  useOptimistApprovalForAllEvent,
  useOptimistApprove,
  useOptimistAttestationStation,
  useOptimistBalanceOf,
  useOptimistBaseUri,
  useOptimistBaseUriAttestationKey,
  useOptimistBaseUriAttestor,
  useOptimistBurn,
  useOptimistEvent,
  useOptimistGetApproved,
  useOptimistInitialize,
  useOptimistInitializedEvent,
  useOptimistInviterAttestationStation,
  useOptimistInviterCanInviteAttestationKey,
  useOptimistInviterClaimInvite,
  useOptimistInviterClaimableInviteTypehash,
  useOptimistInviterCommitInvite,
  useOptimistInviterCommitmentTimestamps,
  useOptimistInviterEip712Version,
  useOptimistInviterEvent,
  useOptimistInviterInitialize,
  useOptimistInviterInitializedEvent,
  useOptimistInviterInviteClaimedEvent,
  useOptimistInviterInviteCounts,
  useOptimistInviterInviteGranter,
  useOptimistInviterMinCommitmentPeriod,
  useOptimistInviterRead,
  useOptimistInviterSetInviteCounts,
  useOptimistInviterUsedNonces,
  useOptimistInviterVersion,
  useOptimistInviterWrite,
  useOptimistIsApprovedForAll,
  useOptimistIsOnAllowList,
  useOptimistMint,
  useOptimistName,
  useOptimistOptimistAllowlist,
  useOptimistOwnerOf,
  useOptimistRead,
  useOptimistSafeTransferFrom,
  useOptimistSetApprovalForAll,
  useOptimistSupportsInterface,
  useOptimistSymbol,
  useOptimistTokenIdOfAddress,
  useOptimistTokenUri,
  useOptimistTransferEvent,
  useOptimistTransferFrom,
  useOptimistVersion,
  useOptimistWrite,
  usePortalSenderDonate,
  usePortalSenderPortal,
  usePortalSenderRead,
  usePortalSenderWrite,
  usePrepareAddressManagerRenounceOwnership,
  usePrepareAddressManagerSetAddress,
  usePrepareAddressManagerTransferOwnership,
  usePrepareAddressManagerWrite,
  usePrepareAssetReceiverCall,
  usePrepareAssetReceiverDelegatecall,
  usePrepareAssetReceiverSetOwner,
  usePrepareAssetReceiverWithdrawErc20,
  usePrepareAssetReceiverWithdrawErc721,
  usePrepareAssetReceiverWithdrawEth,
  usePrepareAssetReceiverWrite,
  usePrepareAttestationStationAttest,
  usePrepareAttestationStationWrite,
  usePrepareBaseFeeVaultWithdraw,
  usePrepareBaseFeeVaultWrite,
  usePrepareDrippieCall,
  usePrepareDrippieCreate,
  usePrepareDrippieDelegatecall,
  usePrepareDrippieDrip,
  usePrepareDrippieGoerliCall,
  usePrepareDrippieGoerliCreate,
  usePrepareDrippieGoerliDelegatecall,
  usePrepareDrippieGoerliDrip,
  usePrepareDrippieGoerliSetOwner,
  usePrepareDrippieGoerliStatus,
  usePrepareDrippieGoerliWithdrawErc20,
  usePrepareDrippieGoerliWithdrawErc721,
  usePrepareDrippieGoerliWithdrawEth,
  usePrepareDrippieGoerliWrite,
  usePrepareDrippieOptimismGoerliCall,
  usePrepareDrippieOptimismGoerliCreate,
  usePrepareDrippieOptimismGoerliDelegatecall,
  usePrepareDrippieOptimismGoerliDrip,
  usePrepareDrippieOptimismGoerliSetOwner,
  usePrepareDrippieOptimismGoerliStatus,
  usePrepareDrippieOptimismGoerliWithdrawErc20,
  usePrepareDrippieOptimismGoerliWithdrawErc721,
  usePrepareDrippieOptimismGoerliWithdrawEth,
  usePrepareDrippieOptimismGoerliWrite,
  usePrepareDrippieSetOwner,
  usePrepareDrippieStatus,
  usePrepareDrippieWithdrawErc20,
  usePrepareDrippieWithdrawErc721,
  usePrepareDrippieWithdrawEth,
  usePrepareDrippieWrite,
  usePrepareL1BlockSetL1BlockValues,
  usePrepareL1BlockWrite,
  usePrepareL1CrossDomainMessengerInitialize,
  usePrepareL1CrossDomainMessengerRelayMessage,
  usePrepareL1CrossDomainMessengerSendMessage,
  usePrepareL1CrossDomainMessengerWrite,
  usePrepareL1Erc721BridgeBridgeErc721,
  usePrepareL1Erc721BridgeBridgeErc721To,
  usePrepareL1Erc721BridgeFinalizeBridgeErc721,
  usePrepareL1Erc721BridgeWrite,
  usePrepareL1FeeVaultWithdraw,
  usePrepareL1FeeVaultWrite,
  usePrepareL1StandardBridgeBridgeErc20,
  usePrepareL1StandardBridgeBridgeErc20To,
  usePrepareL1StandardBridgeBridgeEth,
  usePrepareL1StandardBridgeBridgeEthTo,
  usePrepareL1StandardBridgeDepositErc20,
  usePrepareL1StandardBridgeDepositErc20To,
  usePrepareL1StandardBridgeDepositEth,
  usePrepareL1StandardBridgeDepositEthTo,
  usePrepareL1StandardBridgeFinalizeBridgeErc20,
  usePrepareL1StandardBridgeFinalizeBridgeEth,
  usePrepareL1StandardBridgeFinalizeErc20Withdrawal,
  usePrepareL1StandardBridgeFinalizeEthWithdrawal,
  usePrepareL1StandardBridgeWrite,
  usePrepareL2CrossDomainMessengerInitialize,
  usePrepareL2CrossDomainMessengerRelayMessage,
  usePrepareL2CrossDomainMessengerSendMessage,
  usePrepareL2CrossDomainMessengerWrite,
  usePrepareL2Erc721BridgeBridgeErc721,
  usePrepareL2Erc721BridgeBridgeErc721To,
  usePrepareL2Erc721BridgeFinalizeBridgeErc721,
  usePrepareL2Erc721BridgeWrite,
  usePrepareL2OutputOracleDeleteL2Outputs,
  usePrepareL2OutputOracleInitialize,
  usePrepareL2OutputOracleProposeL2Output,
  usePrepareL2OutputOracleWrite,
  usePrepareL2StandardBridgeBridgeErc20,
  usePrepareL2StandardBridgeBridgeErc20To,
  usePrepareL2StandardBridgeBridgeEth,
  usePrepareL2StandardBridgeBridgeEthTo,
  usePrepareL2StandardBridgeFinalizeBridgeErc20,
  usePrepareL2StandardBridgeFinalizeBridgeEth,
  usePrepareL2StandardBridgeFinalizeDeposit,
  usePrepareL2StandardBridgeWithdraw,
  usePrepareL2StandardBridgeWithdrawTo,
  usePrepareL2StandardBridgeWrite,
  usePrepareL2ToL1MessagePasserBurn,
  usePrepareL2ToL1MessagePasserInitiateWithdrawal,
  usePrepareL2ToL1MessagePasserWrite,
  usePrepareMintManagerMint,
  usePrepareMintManagerRenounceOwnership,
  usePrepareMintManagerTransferOwnership,
  usePrepareMintManagerUpgrade,
  usePrepareMintManagerWrite,
  usePrepareOptimismMintableErc20FactoryCreateOptimismMintableErc20,
  usePrepareOptimismMintableErc20FactoryCreateStandardL2Token,
  usePrepareOptimismMintableErc20FactoryWrite,
  usePrepareOptimismMintableErc721FactoryCreateOptimismMintableErc721,
  usePrepareOptimismMintableErc721FactoryOptimismGoerliCreateOptimismMintableErc721,
  usePrepareOptimismMintableErc721FactoryOptimismGoerliWrite,
  usePrepareOptimismMintableErc721FactoryWrite,
  usePrepareOptimismPortalDepositTransaction,
  usePrepareOptimismPortalDonateEth,
  usePrepareOptimismPortalFinalizeWithdrawalTransaction,
  usePrepareOptimismPortalInitialize,
  usePrepareOptimismPortalPause,
  usePrepareOptimismPortalProveWithdrawalTransaction,
  usePrepareOptimismPortalUnpause,
  usePrepareOptimismPortalWrite,
  usePrepareOptimistBurn,
  usePrepareOptimistInitialize,
  usePrepareOptimistInviterClaimInvite,
  usePrepareOptimistInviterCommitInvite,
  usePrepareOptimistInviterInitialize,
  usePrepareOptimistInviterSetInviteCounts,
  usePrepareOptimistInviterWrite,
  usePrepareOptimistMint,
  usePrepareOptimistSafeTransferFrom,
  usePrepareOptimistSetApprovalForAll,
  usePrepareOptimistTransferFrom,
  usePrepareOptimistWrite,
  usePreparePortalSenderDonate,
  usePreparePortalSenderWrite,
  usePrepareProxyAdminChangeProxyAdmin,
  usePrepareProxyAdminRenounceOwnership,
  usePrepareProxyAdminSetAddress,
  usePrepareProxyAdminSetAddressManager,
  usePrepareProxyAdminSetImplementationName,
  usePrepareProxyAdminSetProxyType,
  usePrepareProxyAdminSetUpgrading,
  usePrepareProxyAdminTransferOwnership,
  usePrepareProxyAdminUpgrade,
  usePrepareProxyAdminUpgradeAndCall,
  usePrepareProxyAdminWrite,
  usePrepareSequencerFeeVaultWithdraw,
  usePrepareSequencerFeeVaultWrite,
  usePrepareSystemConfigInitialize,
  usePrepareSystemConfigRenounceOwnership,
  usePrepareSystemConfigSetBatcherHash,
  usePrepareSystemConfigSetGasConfig,
  usePrepareSystemConfigSetGasLimit,
  usePrepareSystemConfigSetResourceConfig,
  usePrepareSystemConfigSetUnsafeBlockSigner,
  usePrepareSystemConfigTransferOwnership,
  usePrepareSystemConfigWrite,
  usePrepareSystemDictatorExit1,
  usePrepareSystemDictatorFinalize,
  usePrepareSystemDictatorGoerliExit1,
  usePrepareSystemDictatorGoerliFinalize,
  usePrepareSystemDictatorGoerliInitialize,
  usePrepareSystemDictatorGoerliRenounceOwnership,
  usePrepareSystemDictatorGoerliStep1,
  usePrepareSystemDictatorGoerliStep2,
  usePrepareSystemDictatorGoerliStep3,
  usePrepareSystemDictatorGoerliStep4,
  usePrepareSystemDictatorGoerliStep5,
  usePrepareSystemDictatorGoerliStep6,
  usePrepareSystemDictatorGoerliTransferOwnership,
  usePrepareSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig,
  usePrepareSystemDictatorGoerliWrite,
  usePrepareSystemDictatorInitialize,
  usePrepareSystemDictatorPhase1,
  usePrepareSystemDictatorPhase2,
  usePrepareSystemDictatorRenounceOwnership,
  usePrepareSystemDictatorStep1,
  usePrepareSystemDictatorStep2,
  usePrepareSystemDictatorStep3,
  usePrepareSystemDictatorStep4,
  usePrepareSystemDictatorStep5,
  usePrepareSystemDictatorTransferOwnership,
  usePrepareSystemDictatorUpdateDynamicConfig,
  usePrepareSystemDictatorWrite,
  usePrepareTeleportrWithdrawerCall,
  usePrepareTeleportrWithdrawerDelegatecall,
  usePrepareTeleportrWithdrawerSetData,
  usePrepareTeleportrWithdrawerSetOwner,
  usePrepareTeleportrWithdrawerSetRecipient,
  usePrepareTeleportrWithdrawerSetTeleportr,
  usePrepareTeleportrWithdrawerWithdrawErc20,
  usePrepareTeleportrWithdrawerWithdrawErc721,
  usePrepareTeleportrWithdrawerWithdrawEth,
  usePrepareTeleportrWithdrawerWithdrawFromTeleportr,
  usePrepareTeleportrWithdrawerWrite,
  useProxyAdminAddressManager,
  useProxyAdminChangeProxyAdmin,
  useProxyAdminEvent,
  useProxyAdminGetProxyAdmin,
  useProxyAdminGetProxyImplementation,
  useProxyAdminImplementationName,
  useProxyAdminIsUpgrading,
  useProxyAdminOwner,
  useProxyAdminOwnershipTransferredEvent,
  useProxyAdminProxyType,
  useProxyAdminRead,
  useProxyAdminRenounceOwnership,
  useProxyAdminSetAddress,
  useProxyAdminSetAddressManager,
  useProxyAdminSetImplementationName,
  useProxyAdminSetProxyType,
  useProxyAdminSetUpgrading,
  useProxyAdminTransferOwnership,
  useProxyAdminUpgrade,
  useProxyAdminUpgradeAndCall,
  useProxyAdminWrite,
  useSequencerFeeVaultEvent,
  useSequencerFeeVaultL1FeeWallet,
  useSequencerFeeVaultMinWithdrawalAmount,
  useSequencerFeeVaultRead,
  useSequencerFeeVaultRecipient,
  useSequencerFeeVaultTotalProcessed,
  useSequencerFeeVaultVersion,
  useSequencerFeeVaultWithdraw,
  useSequencerFeeVaultWithdrawalEvent,
  useSequencerFeeVaultWrite,
  useSystemConfigBatcherHash,
  useSystemConfigConfigUpdateEvent,
  useSystemConfigEvent,
  useSystemConfigGasLimit,
  useSystemConfigInitialize,
  useSystemConfigInitializedEvent,
  useSystemConfigMinimumGasLimit,
  useSystemConfigOverhead,
  useSystemConfigOwner,
  useSystemConfigOwnershipTransferredEvent,
  useSystemConfigRead,
  useSystemConfigRenounceOwnership,
  useSystemConfigResourceConfig,
  useSystemConfigScalar,
  useSystemConfigSetBatcherHash,
  useSystemConfigSetGasConfig,
  useSystemConfigSetGasLimit,
  useSystemConfigSetResourceConfig,
  useSystemConfigSetUnsafeBlockSigner,
  useSystemConfigTransferOwnership,
  useSystemConfigUnsafeBlockSigner,
  useSystemConfigUnsafeBlockSignerSlot,
  useSystemConfigVersion,
  useSystemConfigWrite,
  useSystemDictatorConfig,
  useSystemDictatorCurrentStep,
  useSystemDictatorDynamicConfigSet,
  useSystemDictatorEvent,
  useSystemDictatorExit1,
  useSystemDictatorExit_1NoReturnStep,
  useSystemDictatorExited,
  useSystemDictatorFinalize,
  useSystemDictatorFinalized,
  useSystemDictatorGoerliConfig,
  useSystemDictatorGoerliCurrentStep,
  useSystemDictatorGoerliDynamicConfigSet,
  useSystemDictatorGoerliEvent,
  useSystemDictatorGoerliExit1,
  useSystemDictatorGoerliExit_1NoReturnStep,
  useSystemDictatorGoerliFinalize,
  useSystemDictatorGoerliFinalized,
  useSystemDictatorGoerliInitialize,
  useSystemDictatorGoerliInitializedEvent,
  useSystemDictatorGoerliL2OutputOracleDynamicConfig,
  useSystemDictatorGoerliOldL1CrossDomainMessenger,
  useSystemDictatorGoerliOwner,
  useSystemDictatorGoerliOwnershipTransferredEvent,
  useSystemDictatorGoerliProxyTransferStep,
  useSystemDictatorGoerliRead,
  useSystemDictatorGoerliRenounceOwnership,
  useSystemDictatorGoerliStep1,
  useSystemDictatorGoerliStep2,
  useSystemDictatorGoerliStep3,
  useSystemDictatorGoerliStep4,
  useSystemDictatorGoerliStep5,
  useSystemDictatorGoerliStep6,
  useSystemDictatorGoerliTransferOwnership,
  useSystemDictatorGoerliUpdateL2OutputOracleDynamicConfig,
  useSystemDictatorGoerliWrite,
  useSystemDictatorInitialize,
  useSystemDictatorInitializedEvent,
  useSystemDictatorL2OutputOracleDynamicConfig,
  useSystemDictatorOldL1CrossDomainMessenger,
  useSystemDictatorOptimismPortalDynamicConfig,
  useSystemDictatorOwner,
  useSystemDictatorOwnershipTransferredEvent,
  useSystemDictatorPhase1,
  useSystemDictatorPhase2,
  useSystemDictatorProxyTransferStep,
  useSystemDictatorRead,
  useSystemDictatorRenounceOwnership,
  useSystemDictatorStep1,
  useSystemDictatorStep2,
  useSystemDictatorStep3,
  useSystemDictatorStep4,
  useSystemDictatorStep5,
  useSystemDictatorTransferOwnership,
  useSystemDictatorUpdateDynamicConfig,
  useSystemDictatorWrite,
  useTeleportrWithdrawerCall,
  useTeleportrWithdrawerData,
  useTeleportrWithdrawerDelegatecall,
  useTeleportrWithdrawerEvent,
  useTeleportrWithdrawerOwner,
  useTeleportrWithdrawerOwnerUpdatedEvent,
  useTeleportrWithdrawerRead,
  useTeleportrWithdrawerReceivedEthEvent,
  useTeleportrWithdrawerRecipient,
  useTeleportrWithdrawerSetData,
  useTeleportrWithdrawerSetOwner,
  useTeleportrWithdrawerSetRecipient,
  useTeleportrWithdrawerSetTeleportr,
  useTeleportrWithdrawerTeleportr,
  useTeleportrWithdrawerWithdrawErc20,
  useTeleportrWithdrawerWithdrawErc721,
  useTeleportrWithdrawerWithdrawEth,
  useTeleportrWithdrawerWithdrawFromTeleportr,
  useTeleportrWithdrawerWithdrewErc20Event,
  useTeleportrWithdrawerWithdrewErc721Event,
  useTeleportrWithdrawerWithdrewEthEvent,
  useTeleportrWithdrawerWrite
});
//# sourceMappingURL=react.cjs.map