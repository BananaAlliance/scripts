import type { Chain, Hex, PublicClient, Transport } from 'viem';
import type { MessagePassedEvent } from '../../../index.js';
import type { GetL2Chain, L1ActionBaseType } from '../../../types/l1Actions.js';
import { OpStackL1Contract } from '../../../types/opStackContracts.js';
declare const CONTRACT = OpStackL1Contract.OptimismPortal;
export type ReadProvenWithdrawalsParameters<TChain extends Chain | undefined = Chain> = {
    withdrawalHash: MessagePassedEvent['withdrawalHash'];
} & L1ActionBaseType<GetL2Chain<TChain>, typeof CONTRACT>;
export type ProvenWithdrawal = {
    outputRoot: Hex;
    timestamp: bigint;
    l2OutputIndex: bigint;
};
export type ReadProvenWithdrawalsReturnType = ProvenWithdrawal;
export declare function readProvenWithdrawals<TChain extends Chain | undefined>(client: PublicClient<Transport, TChain>, { withdrawalHash, optimismPortalAddress, l2Chain, }: ReadProvenWithdrawalsParameters<TChain>): Promise<ReadProvenWithdrawalsReturnType>;
export {};
//# sourceMappingURL=readProvenWithdrawals.d.ts.map